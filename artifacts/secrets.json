{"branch": "origin/work", "commit": "with settings , gate pass etc\n", "commitHash": "eb592e0670dac4adf5c843497469e6d15b89d01b", "date": "2025-08-14 21:24:10", "diff": "@@ -1 +1 @@\n-gAAAAABondhUsms7MjrwxpBMmWoGQp9iSfwiaiNkXv9YRYzt3D4kNEPzSjbU1eCyodd9FR14RrbDWZBRo-7ltd8G_EN7TzqMUPlCPX_iaN8tIX9QBcJel9QOvET9m2W1SGEj-BTkLRZX1EylAk7hauEbsULpNfuKvEBoxR2QZeEPa-TRC_X9SCMbtah0pzy9ePxAwlqMjnzJFMWmOYq_5bgDmmY-ZoDDa3pUt4sDhtUtl9tb7fm7wzSUljAKnTT9bkEGuV7CeKal3uu7ucP3_FSGdG7Ax7oovjT1zU1EZhkUwLbMBr1ZYJ9jRXtop94Sibt7wOBeYIqR9sh9WmiL7f28DhGoE4Dvyg==\n\\ No newline at end of file\n+gAAAAABoineDZAzCPDzo2q9lP_vZO80blNd4httPqiL9JjZyCAkvzWG0u_QNhrqo7lhH5BpbmzvJXHp3BvQr24Aeq0Gm5O8CLGyHUnheGrPrHA-fPLD5uiDPqJvl3S5B_qF3g81MFdX4x0FGGMAFMFJMSAi7SLMb23tfPoCgRRsge-7X6EkjkZyhRZeKjfIosToCBj2fI9biVVkKkn6AJcIGfAZyFrJWdFI3qwqAcfMOSZw2gamz5flkxaV8LJlYg7KX9Jpxuy6y9pekPlXDkHRx2BoHEUHYZ_GARZYE_XVkvgyuCbOCaCg=\n\\ No newline at end of file\n", "path": "license.lic", "printDiff": "@@ -1 +1 @@\n-\u001b[93mgAAAAABondhUsms7MjrwxpBMmWoGQp9iSfwiaiNkXv9YRYzt3D4kNEPzSjbU1eCyodd9FR14RrbDWZBRo\u001b[0m-7ltd8G_EN7TzqMUPlCPX_\u001b[93miaN8tIX9QBcJel9QOvET9m2W1SGEj\u001b[0m-\u001b[93mBTkLRZX1EylAk7hauEbsULpNfuKvEBoxR2QZeEPa\u001b[0m-TRC_\u001b[93mX9SCMbtah0pzy9ePxAwlqMjnzJFMWmOYq\u001b[0m_5bgDmmY-\u001b[93mZoDDa3pUt4sDhtUtl9tb7fm7wzSUljAKnTT9bkEGuV7CeKal3uu7ucP3\u001b[0m_\u001b[93mFSGdG7Ax7oovjT1zU1EZhkUwLbMBr1ZYJ9jRXtop94Sibt7wOBeYIqR9sh9WmiL7f28DhGoE4Dvyg==\u001b[0m\n\\ No newline at end of file\n+gAAAAABoineDZAzCPDzo2q9lP_\u001b[93mvZO80blNd4httPqiL9JjZyCAkvzWG0u\u001b[0m_\u001b[93mQNhrqo7lhH5BpbmzvJXHp3BvQr24Aeq0Gm5O8CLGyHUnheGrPrHA\u001b[0m-fPLD5uiDPqJvl3S5B_\u001b[93mqF3g81MFdX4x0FGGMAFMFJMSAi7SLMb23tfPoCgRRsge\u001b[0m-\u001b[93m7X6EkjkZyhRZeKjfIosToCBj2fI9biVVkKkn6AJcIGfAZyFrJWdFI3qwqAcfMOSZw2gamz5flkxaV8LJlYg7KX9Jpxuy6y9pekPlXDkHRx2BoHEUHYZ\u001b[0m_GARZYE_XVkvgyuCbOCaCg=\n\\ No newline at end of file\n", "reason": "High Entropy", "stringsFound": ["gAAAAABondhUsms7MjrwxpBMmWoGQp9iSfwiaiNkXv9YRYzt3D4kNEPzSjbU1eCyodd9FR14RrbDWZBRo", "iaN8tIX9QBcJel9QOvET9m2W1SGEj", "BTkLRZX1EylAk7hauEbsULpNfuKvEBoxR2QZeEPa", "X9SCMbtah0pzy9ePxAwlqMjnzJFMWmOYq", "ZoDDa3pUt4sDhtUtl9tb7fm7wzSUljAKnTT9bkEGuV7CeKal3uu7ucP3", "FSGdG7Ax7oovjT1zU1EZhkUwLbMBr1ZYJ9jRXtop94Sibt7wOBeYIqR9sh9WmiL7f28DhGoE4Dvyg==", "vZO80blNd4httPqiL9JjZyCAkvzWG0u", "QNhrqo7lhH5BpbmzvJXHp3BvQr24Aeq0Gm5O8CLGyHUnheGrPrHA", "qF3g81MFdX4x0FGGMAFMFJMSAi7SLMb23tfPoCgRRsge", "7X6EkjkZyhRZeKjfIosToCBj2fI9biVVkKkn6AJcIGfAZyFrJWdFI3qwqAcfMOSZw2gamz5flkxaV8LJlYg7KX9Jpxuy6y9pekPlXDkHRx2BoHEUHYZ"]}
{"branch": "origin/work", "commit": "adding settings\n", "commitHash": "bbb64c9d5b5596b2b1f847fff08a96234a3d8d41", "date": "2025-07-30 20:50:09", "diff": "@@ -1 +0,0 @@\n-gAAAAABoineDZAzCPDzo2q9lP_vZO80blNd4httPqiL9JjZyCAkvzWG0u_QNhrqo7lhH5BpbmzvJXHp3BvQr24Aeq0Gm5O8CLGyHUnheGrPrHA-fPLD5uiDPqJvl3S5B_qF3g81MFdX4x0FGGMAFMFJMSAi7SLMb23tfPoCgRRsge-7X6EkjkZyhRZeKjfIosToCBj2fI9biVVkKkn6AJcIGfAZyFrJWdFI3qwqAcfMOSZw2gamz5flkxaV8LJlYg7KX9Jpxuy6y9pekPlXDkHRx2BoHEUHYZ_GARZYE_XVkvgyuCbOCaCg=\n\\ No newline at end of file\n", "path": "license.lic", "printDiff": "@@ -1 +0,0 @@\n-gAAAAABoineDZAzCPDzo2q9lP_\u001b[93mvZO80blNd4httPqiL9JjZyCAkvzWG0u\u001b[0m_\u001b[93mQNhrqo7lhH5BpbmzvJXHp3BvQr24Aeq0Gm5O8CLGyHUnheGrPrHA\u001b[0m-fPLD5uiDPqJvl3S5B_\u001b[93mqF3g81MFdX4x0FGGMAFMFJMSAi7SLMb23tfPoCgRRsge\u001b[0m-\u001b[93m7X6EkjkZyhRZeKjfIosToCBj2fI9biVVkKkn6AJcIGfAZyFrJWdFI3qwqAcfMOSZw2gamz5flkxaV8LJlYg7KX9Jpxuy6y9pekPlXDkHRx2BoHEUHYZ\u001b[0m_GARZYE_XVkvgyuCbOCaCg=\n\\ No newline at end of file\n", "reason": "High Entropy", "stringsFound": ["vZO80blNd4httPqiL9JjZyCAkvzWG0u", "QNhrqo7lhH5BpbmzvJXHp3BvQr24Aeq0Gm5O8CLGyHUnheGrPrHA", "qF3g81MFdX4x0FGGMAFMFJMSAi7SLMb23tfPoCgRRsge", "7X6EkjkZyhRZeKjfIosToCBj2fI9biVVkKkn6AJcIGfAZyFrJWdFI3qwqAcfMOSZw2gamz5flkxaV8LJlYg7KX9Jpxuy6y9pekPlXDkHRx2BoHEUHYZ"]}
{"branch": "origin/work", "commit": "gate pass rights allocation\n", "commitHash": "8141568077158e103f12d11db3d5418c5167ced8", "date": "2025-07-11 10:01:03", "diff": "@@ -3,13 +3,11 @@\n <title>auth.py</title>\n <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n <style type=\"text/css\">\n-.s0 { color: #5f826b; font-style: italic;}\n+.s0 { color: #cf8e6d;}\n .s1 { color: #bcbec4;}\n-.s2 { color: #cf8e6d;}\n-.s3 { color: #bcbec4;}\n+.s2 { color: #bcbec4;}\n+.s3 { color: #6aab73;}\n .s4 { color: #7a7e85;}\n-.s5 { color: #6aab73;}\n-.s6 { color: #2aacb8;}\n </style>\n </head>\n <body bgcolor=\"#1e1f22\">\n@@ -18,572 +16,58 @@\n <font face=\"Arial, Helvetica\" color=\"#000000\">\n auth.py</font>\n </center></td></tr></table>\n-<pre><span class=\"s0\">&quot;&quot;&quot;Network Authentication Helpers \n- \n-Contains interface (MultiDomainBasicAuth) and associated glue code for \n-providing credentials in the context of network requests. \n-&quot;&quot;&quot;</span>\n-\n-<span class=\"s2\">import </span><span class=\"s1\">logging</span>\n-<span class=\"s2\">import </span><span class=\"s1\">os</span>\n-<span class=\"s2\">import </span><span class=\"s1\">shutil</span>\n-<span class=\"s2\">import </span><span class=\"s1\">subprocess</span>\n-<span class=\"s2\">import </span><span class=\"s1\">sysconfig</span>\n-<span class=\"s2\">import </span><span class=\"s1\">typing</span>\n-<span class=\"s2\">import </span><span class=\"s1\">urllib</span><span class=\"s3\">.</span><span class=\"s1\">parse</span>\n-<span class=\"s2\">from </span><span class=\"s1\">abc </span><span class=\"s2\">import </span><span class=\"s1\">ABC</span><span class=\"s3\">, </span><span class=\"s1\">abstractmethod</span>\n-<span class=\"s2\">from </span><span class=\"s1\">functools </span><span class=\"s2\">import </span><span class=\"s1\">lru_cache</span>\n-<span class=\"s2\">from </span><span class=\"s1\">os</span><span class=\"s3\">.</span><span class=\"s1\">path </span><span class=\"s2\">import </span><span class=\"s1\">commonprefix</span>\n-<span class=\"s2\">from </span><span class=\"s1\">pathlib </span><span class=\"s2\">import </span><span class=\"s1\">Path</span>\n-<span class=\"s2\">from </span><span class=\"s1\">typing </span><span class=\"s2\">import </span><span class=\"s1\">Any</span><span class=\"s3\">, </span><span class=\"s1\">Dict</span><span class=\"s3\">, </span><span class=\"s1\">List</span><span class=\"s3\">, </span><span class=\"s1\">NamedTuple</span><span class=\"s3\">, </span><span class=\"s1\">Optional</span><span class=\"s3\">, </span><span class=\"s1\">Tuple</span>\n-\n-<span class=\"s2\">from </span><span class=\"s1\">pip</span><span class=\"s3\">.</span><span class=\"s1\">_vendor</span><span class=\"s3\">.</span><span class=\"s1\">requests</span><span class=\"s3\">.</span><span class=\"s1\">auth </span><span class=\"s2\">import </span><span class=\"s1\">AuthBase</span><span class=\"s3\">, </span><span class=\"s1\">HTTPBasicAuth</span>\n-<span class=\"s2\">from </span><span class=\"s1\">pip</span><span class=\"s3\">.</span><span class=\"s1\">_vendor</span><span class=\"s3\">.</span><span class=\"s1\">requests</span><span class=\"s3\">.</span><span class=\"s1\">models </span><span class=\"s2\">import </span><span class=\"s1\">Request</span><span class=\"s3\">, </span><span class=\"s1\">Response</span>\n-<span class=\"s2\">from </span><span class=\"s1\">pip</span><span class=\"s3\">.</span><span class=\"s1\">_vendor</span><span class=\"s3\">.</span><span class=\"s1\">requests</span><span class=\"s3\">.</span><span class=\"s1\">utils </span><span class=\"s2\">import </span><span class=\"s1\">get_netrc_auth</span>\n-\n-<span class=\"s2\">from </span><span class=\"s1\">pip</span><span class=\"s3\">.</span><span class=\"s1\">_internal</span><span class=\"s3\">.</span><span class=\"s1\">utils</span><span class=\"s3\">.</span><span class=\"s1\">logging </span><span class=\"s2\">import </span><span class=\"s1\">getLogger</span>\n-<span class=\"s2\">from </span><span class=\"s1\">pip</span><span class=\"s3\">.</span><span class=\"s1\">_internal</span><span class=\"s3\">.</span><span class=\"s1\">utils</span><span class=\"s3\">.</span><span class=\"s1\">misc </span><span class=\"s2\">import </span><span class=\"s3\">(</span>\n-    <span class=\"s1\">ask</span><span class=\"s3\">,</span>\n-    <span class=\"s1\">ask_input</span><span class=\"s3\">,</span>\n-    <span class=\"s1\">ask_password</span><span class=\"s3\">,</span>\n-    <span class=\"s1\">remove_auth_from_url</span><span class=\"s3\">,</span>\n-    <span class=\"s1\">split_auth_netloc_from_url</span><span class=\"s3\">,</span>\n-<span class=\"s3\">)</span>\n-<span class=\"s2\">from </span><span class=\"s1\">pip</span><span class=\"s3\">.</span><span class=\"s1\">_internal</span><span class=\"s3\">.</span><span class=\"s1\">vcs</span><span class=\"s3\">.</span><span class=\"s1\">versioncontrol </span><span class=\"s2\">import </span><span class=\"s1\">AuthInfo</span>\n-\n-<span class=\"s1\">logger </span><span class=\"s3\">= </span><span class=\"s1\">getLogger</span><span class=\"s3\">(</span><span class=\"s1\">__name__</span><span class=\"s3\">)</span>\n-\n-<span class=\"s1\">KEYRING_DISABLED </span><span class=\"s3\">= </span><span class=\"s2\">False</span>\n-\n-\n-<span class=\"s2\">class </span><span class=\"s1\">Credentials</span><span class=\"s3\">(</span><span class=\"s1\">NamedTuple</span><span class=\"s3\">):</span>\n-    <span class=\"s1\">url</span><span class=\"s3\">: </span><span class=\"s1\">str</span>\n-    <span class=\"s1\">username</span><span class=\"s3\">: </span><span class=\"s1\">str</span>\n-    <span class=\"s1\">password</span><span class=\"s3\">: </span><span class=\"s1\">str</span>\n-\n-\n-<span class=\"s2\">class </span><span class=\"s1\">KeyRingBaseProvider</span><span class=\"s3\">(</span><span class=\"s1\">ABC</span><span class=\"s3\">):</span>\n-    <span class=\"s0\">&quot;&quot;&quot;Keyring base provider interface&quot;&quot;&quot;</span>\n-\n-    <span class=\"s1\">has_keyring</span><span class=\"s3\">: </span><span class=\"s1\">bool</span>\n-\n-    <span class=\"s3\">@</span><span class=\"s1\">abstractmethod</span>\n-    <span class=\"s2\">def </span><span class=\"s1\">get_auth_info</span><span class=\"s3\">(</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">url</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">: </span><span class=\"s1\">Optional</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">]</span>\n-    <span class=\"s3\">) </span><span class=\"s1\">-&gt; Optional</span><span class=\"s3\">[</span><span class=\"s1\">AuthInfo</span><span class=\"s3\">]: ...</span>\n-\n-    <span class=\"s3\">@</span><span class=\"s1\">abstractmethod</span>\n-    <span class=\"s2\">def </span><span class=\"s1\">save_auth_info</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">url</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">password</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; </span><span class=\"s2\">None</span><span class=\"s3\">: ...</span>\n-\n-\n-<span class=\"s2\">class </span><span class=\"s1\">KeyRingNullProvider</span><span class=\"s3\">(</span><span class=\"s1\">KeyRingBaseProvider</span><span class=\"s3\">):</span>\n-    <span class=\"s0\">&quot;&quot;&quot;Keyring null provider&quot;&quot;&quot;</span>\n-\n-    <span class=\"s1\">has_keyring </span><span class=\"s3\">= </span><span class=\"s2\">False</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">get_auth_info</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">url</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">: </span><span class=\"s1\">Optional</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">]) </span><span class=\"s1\">-&gt; Optional</span><span class=\"s3\">[</span><span class=\"s1\">AuthInfo</span><span class=\"s3\">]:</span>\n-        <span class=\"s2\">return None</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">save_auth_info</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">url</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">password</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; </span><span class=\"s2\">None</span><span class=\"s3\">:</span>\n-        <span class=\"s2\">return None</span>\n-\n-\n-<span class=\"s2\">class </span><span class=\"s1\">KeyRingPythonProvider</span><span class=\"s3\">(</span><span class=\"s1\">KeyRingBaseProvider</span><span class=\"s3\">):</span>\n-    <span class=\"s0\">&quot;&quot;&quot;Keyring interface which uses locally imported `keyring`&quot;&quot;&quot;</span>\n-\n-    <span class=\"s1\">has_keyring </span><span class=\"s3\">= </span><span class=\"s2\">True</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">__init__</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; </span><span class=\"s2\">None</span><span class=\"s3\">:</span>\n-        <span class=\"s2\">import </span><span class=\"s1\">keyring</span>\n-\n-        <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring </span><span class=\"s3\">= </span><span class=\"s1\">keyring</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">get_auth_info</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">url</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">: </span><span class=\"s1\">Optional</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">]) </span><span class=\"s1\">-&gt; Optional</span><span class=\"s3\">[</span><span class=\"s1\">AuthInfo</span><span class=\"s3\">]:</span>\n-        <span class=\"s4\"># Support keyring's get_credential interface which supports getting</span>\n-        <span class=\"s4\"># credentials without a username. This is only available for</span>\n-        <span class=\"s4\"># keyring&gt;=15.2.0.</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">hasattr</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring</span><span class=\"s3\">, </span><span class=\"s5\">&quot;get_credential&quot;</span><span class=\"s3\">):</span>\n-            <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">debug</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Getting credentials from keyring for %s&quot;</span><span class=\"s3\">, </span><span class=\"s1\">url</span><span class=\"s3\">)</span>\n-            <span class=\"s1\">cred </span><span class=\"s3\">= </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring</span><span class=\"s3\">.</span><span class=\"s1\">get_credential</span><span class=\"s3\">(</span><span class=\"s1\">url</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">)</span>\n-            <span class=\"s2\">if </span><span class=\"s1\">cred </span><span class=\"s2\">is not None</span><span class=\"s3\">:</span>\n-                <span class=\"s2\">return </span><span class=\"s1\">cred</span><span class=\"s3\">.</span><span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">cred</span><span class=\"s3\">.</span><span class=\"s1\">password</span>\n-            <span class=\"s2\">return None</span>\n-\n-        <span class=\"s2\">if </span><span class=\"s1\">username </span><span class=\"s2\">is not None</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">debug</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Getting password from keyring for %s&quot;</span><span class=\"s3\">, </span><span class=\"s1\">url</span><span class=\"s3\">)</span>\n-            <span class=\"s1\">password </span><span class=\"s3\">= </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring</span><span class=\"s3\">.</span><span class=\"s1\">get_password</span><span class=\"s3\">(</span><span class=\"s1\">url</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">)</span>\n-            <span class=\"s2\">if </span><span class=\"s1\">password</span><span class=\"s3\">:</span>\n-                <span class=\"s2\">return </span><span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password</span>\n-        <span class=\"s2\">return None</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">save_auth_info</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">url</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">password</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; </span><span class=\"s2\">None</span><span class=\"s3\">:</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring</span><span class=\"s3\">.</span><span class=\"s1\">set_password</span><span class=\"s3\">(</span><span class=\"s1\">url</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password</span><span class=\"s3\">)</span>\n-\n-\n-<span class=\"s2\">class </span><span class=\"s1\">KeyRingCliProvider</span><span class=\"s3\">(</span><span class=\"s1\">KeyRingBaseProvider</span><span class=\"s3\">):</span>\n-    <span class=\"s0\">&quot;&quot;&quot;Provider which uses `keyring` cli \n- \n-    Instead of calling the keyring package installed alongside pip \n-    we call keyring on the command line which will enable pip to \n-    use which ever installation of keyring is available first in \n-    PATH. \n-    &quot;&quot;&quot;</span>\n-\n-    <span class=\"s1\">has_keyring </span><span class=\"s3\">= </span><span class=\"s2\">True</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">__init__</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">cmd</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; </span><span class=\"s2\">None</span><span class=\"s3\">:</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring </span><span class=\"s3\">= </span><span class=\"s1\">cmd</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">get_auth_info</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">url</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">: </span><span class=\"s1\">Optional</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">]) </span><span class=\"s1\">-&gt; Optional</span><span class=\"s3\">[</span><span class=\"s1\">AuthInfo</span><span class=\"s3\">]:</span>\n-        <span class=\"s4\"># This is the default implementation of keyring.get_credential</span>\n-        <span class=\"s4\"># https://github.com/jaraco/keyring/blob/97689324abcf01bd1793d49063e7ca01e03d7d07/keyring/backend.py#L134-L139</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">username </span><span class=\"s2\">is not None</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">password </span><span class=\"s3\">= </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_get_password</span><span class=\"s3\">(</span><span class=\"s1\">url</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">)</span>\n-            <span class=\"s2\">if </span><span class=\"s1\">password </span><span class=\"s2\">is not None</span><span class=\"s3\">:</span>\n-                <span class=\"s2\">return </span><span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password</span>\n-        <span class=\"s2\">return None</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">save_auth_info</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">url</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">password</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; </span><span class=\"s2\">None</span><span class=\"s3\">:</span>\n-        <span class=\"s2\">return </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_set_password</span><span class=\"s3\">(</span><span class=\"s1\">url</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password</span><span class=\"s3\">)</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">_get_password</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">service_name</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; Optional</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">]:</span>\n-        <span class=\"s0\">&quot;&quot;&quot;Mirror the implementation of keyring.get_password using cli&quot;&quot;&quot;</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring </span><span class=\"s2\">is None</span><span class=\"s3\">:</span>\n-            <span class=\"s2\">return None</span>\n-\n-        <span class=\"s1\">cmd </span><span class=\"s3\">= [</span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring</span><span class=\"s3\">, </span><span class=\"s5\">&quot;get&quot;</span><span class=\"s3\">, </span><span class=\"s1\">service_name</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">]</span>\n-        <span class=\"s1\">env </span><span class=\"s3\">= </span><span class=\"s1\">os</span><span class=\"s3\">.</span><span class=\"s1\">environ</span><span class=\"s3\">.</span><span class=\"s1\">copy</span><span class=\"s3\">()</span>\n-        <span class=\"s1\">env</span><span class=\"s3\">[</span><span class=\"s5\">&quot;PYTHONIOENCODING&quot;</span><span class=\"s3\">] = </span><span class=\"s5\">&quot;utf-8&quot;</span>\n-        <span class=\"s1\">res </span><span class=\"s3\">= </span><span class=\"s1\">subprocess</span><span class=\"s3\">.</span><span class=\"s1\">run</span><span class=\"s3\">(</span>\n-            <span class=\"s1\">cmd</span><span class=\"s3\">,</span>\n-            <span class=\"s1\">stdin</span><span class=\"s3\">=</span><span class=\"s1\">subprocess</span><span class=\"s3\">.</span><span class=\"s1\">DEVNULL</span><span class=\"s3\">,</span>\n-            <span class=\"s1\">stdout</span><span class=\"s3\">=</span><span class=\"s1\">subprocess</span><span class=\"s3\">.</span><span class=\"s1\">PIPE</span><span class=\"s3\">,</span>\n-            <span class=\"s1\">env</span><span class=\"s3\">=</span><span class=\"s1\">env</span><span class=\"s3\">,</span>\n-        <span class=\"s3\">)</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">res</span><span class=\"s3\">.</span><span class=\"s1\">returncode</span><span class=\"s3\">:</span>\n-            <span class=\"s2\">return None</span>\n-        <span class=\"s2\">return </span><span class=\"s1\">res</span><span class=\"s3\">.</span><span class=\"s1\">stdout</span><span class=\"s3\">.</span><span class=\"s1\">decode</span><span class=\"s3\">(</span><span class=\"s5\">&quot;utf-8&quot;</span><span class=\"s3\">).</span><span class=\"s1\">strip</span><span class=\"s3\">(</span><span class=\"s1\">os</span><span class=\"s3\">.</span><span class=\"s1\">linesep</span><span class=\"s3\">)</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">_set_password</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">service_name</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">password</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; </span><span class=\"s2\">None</span><span class=\"s3\">:</span>\n-        <span class=\"s0\">&quot;&quot;&quot;Mirror the implementation of keyring.set_password using cli&quot;&quot;&quot;</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring </span><span class=\"s2\">is None</span><span class=\"s3\">:</span>\n-            <span class=\"s2\">return None</span>\n-        <span class=\"s1\">env </span><span class=\"s3\">= </span><span class=\"s1\">os</span><span class=\"s3\">.</span><span class=\"s1\">environ</span><span class=\"s3\">.</span><span class=\"s1\">copy</span><span class=\"s3\">()</span>\n-        <span class=\"s1\">env</span><span class=\"s3\">[</span><span class=\"s5\">&quot;PYTHONIOENCODING&quot;</span><span class=\"s3\">] = </span><span class=\"s5\">&quot;utf-8&quot;</span>\n-        <span class=\"s1\">subprocess</span><span class=\"s3\">.</span><span class=\"s1\">run</span><span class=\"s3\">(</span>\n-            <span class=\"s3\">[</span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring</span><span class=\"s3\">, </span><span class=\"s5\">&quot;set&quot;</span><span class=\"s3\">, </span><span class=\"s1\">service_name</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">],</span>\n-            <span class=\"s1\">input</span><span class=\"s3\">=</span><span class=\"s5\">f&quot;</span><span class=\"s2\">{</span><span class=\"s1\">password</span><span class=\"s2\">}{</span><span class=\"s1\">os</span><span class=\"s3\">.</span><span class=\"s1\">linesep</span><span class=\"s2\">}</span><span class=\"s5\">&quot;</span><span class=\"s3\">.</span><span class=\"s1\">encode</span><span class=\"s3\">(),</span>\n-            <span class=\"s1\">env</span><span class=\"s3\">=</span><span class=\"s1\">env</span><span class=\"s3\">,</span>\n-            <span class=\"s1\">check</span><span class=\"s3\">=</span><span class=\"s2\">True</span><span class=\"s3\">,</span>\n-        <span class=\"s3\">)</span>\n-        <span class=\"s2\">return None</span>\n-\n-\n-<span class=\"s3\">@</span><span class=\"s1\">lru_cache</span><span class=\"s3\">(</span><span class=\"s1\">maxsize</span><span class=\"s3\">=</span><span class=\"s2\">None</span><span class=\"s3\">)</span>\n-<span class=\"s2\">def </span><span class=\"s1\">get_keyring_provider</span><span class=\"s3\">(</span><span class=\"s1\">provider</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; KeyRingBaseProvider</span><span class=\"s3\">:</span>\n-    <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">verbose</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Keyring provider requested: %s&quot;</span><span class=\"s3\">, </span><span class=\"s1\">provider</span><span class=\"s3\">)</span>\n-\n-    <span class=\"s4\"># keyring has previously failed and been disabled</span>\n-    <span class=\"s2\">if </span><span class=\"s1\">KEYRING_DISABLED</span><span class=\"s3\">:</span>\n-        <span class=\"s1\">provider </span><span class=\"s3\">= </span><span class=\"s5\">&quot;disabled&quot;</span>\n-    <span class=\"s2\">if </span><span class=\"s1\">provider </span><span class=\"s2\">in </span><span class=\"s3\">[</span><span class=\"s5\">&quot;import&quot;</span><span class=\"s3\">, </span><span class=\"s5\">&quot;auto&quot;</span><span class=\"s3\">]:</span>\n-        <span class=\"s2\">try</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">impl </span><span class=\"s3\">= </span><span class=\"s1\">KeyRingPythonProvider</span><span class=\"s3\">()</span>\n-            <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">verbose</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Keyring provider set: import&quot;</span><span class=\"s3\">)</span>\n-            <span class=\"s2\">return </span><span class=\"s1\">impl</span>\n-        <span class=\"s2\">except </span><span class=\"s1\">ImportError</span><span class=\"s3\">:</span>\n-            <span class=\"s2\">pass</span>\n-        <span class=\"s2\">except </span><span class=\"s1\">Exception </span><span class=\"s2\">as </span><span class=\"s1\">exc</span><span class=\"s3\">:</span>\n-            <span class=\"s4\"># In the event of an unexpected exception</span>\n-            <span class=\"s4\"># we should warn the user</span>\n-            <span class=\"s1\">msg </span><span class=\"s3\">= </span><span class=\"s5\">&quot;Installed copy of keyring fails with exception %s&quot;</span>\n-            <span class=\"s2\">if </span><span class=\"s1\">provider </span><span class=\"s3\">== </span><span class=\"s5\">&quot;auto&quot;</span><span class=\"s3\">:</span>\n-                <span class=\"s1\">msg </span><span class=\"s3\">= </span><span class=\"s1\">msg </span><span class=\"s3\">+ </span><span class=\"s5\">&quot;, trying to find a keyring executable as a fallback&quot;</span>\n-            <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">warning</span><span class=\"s3\">(</span><span class=\"s1\">msg</span><span class=\"s3\">, </span><span class=\"s1\">exc</span><span class=\"s3\">, </span><span class=\"s1\">exc_info</span><span class=\"s3\">=</span><span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">isEnabledFor</span><span class=\"s3\">(</span><span class=\"s1\">logging</span><span class=\"s3\">.</span><span class=\"s1\">DEBUG</span><span class=\"s3\">))</span>\n-    <span class=\"s2\">if </span><span class=\"s1\">provider </span><span class=\"s2\">in </span><span class=\"s3\">[</span><span class=\"s5\">&quot;subprocess&quot;</span><span class=\"s3\">, </span><span class=\"s5\">&quot;auto&quot;</span><span class=\"s3\">]:</span>\n-        <span class=\"s1\">cli </span><span class=\"s3\">= </span><span class=\"s1\">shutil</span><span class=\"s3\">.</span><span class=\"s1\">which</span><span class=\"s3\">(</span><span class=\"s5\">&quot;keyring&quot;</span><span class=\"s3\">)</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">cli </span><span class=\"s2\">and </span><span class=\"s1\">cli</span><span class=\"s3\">.</span><span class=\"s1\">startswith</span><span class=\"s3\">(</span><span class=\"s1\">sysconfig</span><span class=\"s3\">.</span><span class=\"s1\">get_path</span><span class=\"s3\">(</span><span class=\"s5\">&quot;scripts&quot;</span><span class=\"s3\">)):</span>\n-            <span class=\"s4\"># all code within this function is stolen from shutil.which implementation</span>\n-            <span class=\"s3\">@</span><span class=\"s1\">typing</span><span class=\"s3\">.</span><span class=\"s1\">no_type_check</span>\n-            <span class=\"s2\">def </span><span class=\"s1\">PATH_as_shutil_which_determines_it</span><span class=\"s3\">() </span><span class=\"s1\">-&gt; str</span><span class=\"s3\">:</span>\n-                <span class=\"s1\">path </span><span class=\"s3\">= </span><span class=\"s1\">os</span><span class=\"s3\">.</span><span class=\"s1\">environ</span><span class=\"s3\">.</span><span class=\"s1\">get</span><span class=\"s3\">(</span><span class=\"s5\">&quot;PATH&quot;</span><span class=\"s3\">, </span><span class=\"s2\">None</span><span class=\"s3\">)</span>\n-                <span class=\"s2\">if </span><span class=\"s1\">path </span><span class=\"s2\">is None</span><span class=\"s3\">:</span>\n-                    <span class=\"s2\">try</span><span class=\"s3\">:</span>\n-                        <span class=\"s1\">path </span><span class=\"s3\">= </span><span class=\"s1\">os</span><span class=\"s3\">.</span><span class=\"s1\">confstr</span><span class=\"s3\">(</span><span class=\"s5\">&quot;CS_PATH&quot;</span><span class=\"s3\">)</span>\n-                    <span class=\"s2\">except </span><span class=\"s3\">(</span><span class=\"s1\">AttributeError</span><span class=\"s3\">, </span><span class=\"s1\">ValueError</span><span class=\"s3\">):</span>\n-                        <span class=\"s4\"># os.confstr() or CS_PATH is not available</span>\n-                        <span class=\"s1\">path </span><span class=\"s3\">= </span><span class=\"s1\">os</span><span class=\"s3\">.</span><span class=\"s1\">defpath</span>\n-                <span class=\"s4\"># bpo-35755: Don't use os.defpath if the PATH environment variable is</span>\n-                <span class=\"s4\"># set to an empty string</span>\n-\n-                <span class=\"s2\">return </span><span class=\"s1\">path</span>\n-\n-            <span class=\"s1\">scripts </span><span class=\"s3\">= </span><span class=\"s1\">Path</span><span class=\"s3\">(</span><span class=\"s1\">sysconfig</span><span class=\"s3\">.</span><span class=\"s1\">get_path</span><span class=\"s3\">(</span><span class=\"s5\">&quot;scripts&quot;</span><span class=\"s3\">))</span>\n-\n-            <span class=\"s1\">paths </span><span class=\"s3\">= []</span>\n-            <span class=\"s2\">for </span><span class=\"s1\">path </span><span class=\"s2\">in </span><span class=\"s1\">PATH_as_shutil_which_determines_it</span><span class=\"s3\">().</span><span class=\"s1\">split</span><span class=\"s3\">(</span><span class=\"s1\">os</span><span class=\"s3\">.</span><span class=\"s1\">pathsep</span><span class=\"s3\">):</span>\n-                <span class=\"s1\">p </span><span class=\"s3\">= </span><span class=\"s1\">Path</span><span class=\"s3\">(</span><span class=\"s1\">path</span><span class=\"s3\">)</span>\n-                <span class=\"s2\">try</span><span class=\"s3\">:</span>\n-                    <span class=\"s2\">if not </span><span class=\"s1\">p</span><span class=\"s3\">.</span><span class=\"s1\">samefile</span><span class=\"s3\">(</span><span class=\"s1\">scripts</span><span class=\"s3\">):</span>\n-                        <span class=\"s1\">paths</span><span class=\"s3\">.</span><span class=\"s1\">append</span><span class=\"s3\">(</span><span class=\"s1\">path</span><span class=\"s3\">)</span>\n-                <span class=\"s2\">except </span><span class=\"s1\">FileNotFoundError</span><span class=\"s3\">:</span>\n-                    <span class=\"s2\">pass</span>\n-\n-            <span class=\"s1\">path </span><span class=\"s3\">= </span><span class=\"s1\">os</span><span class=\"s3\">.</span><span class=\"s1\">pathsep</span><span class=\"s3\">.</span><span class=\"s1\">join</span><span class=\"s3\">(</span><span class=\"s1\">paths</span><span class=\"s3\">)</span>\n-\n-            <span class=\"s1\">cli </span><span class=\"s3\">= </span><span class=\"s1\">shutil</span><span class=\"s3\">.</span><span class=\"s1\">which</span><span class=\"s3\">(</span><span class=\"s5\">&quot;keyring&quot;</span><span class=\"s3\">, </span><span class=\"s1\">path</span><span class=\"s3\">=</span><span class=\"s1\">path</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s2\">if </span><span class=\"s1\">cli</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">verbose</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Keyring provider set: subprocess with executable %s&quot;</span><span class=\"s3\">, </span><span class=\"s1\">cli</span><span class=\"s3\">)</span>\n-            <span class=\"s2\">return </span><span class=\"s1\">KeyRingCliProvider</span><span class=\"s3\">(</span><span class=\"s1\">cli</span><span class=\"s3\">)</span>\n-\n-    <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">verbose</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Keyring provider set: disabled&quot;</span><span class=\"s3\">)</span>\n-    <span class=\"s2\">return </span><span class=\"s1\">KeyRingNullProvider</span><span class=\"s3\">()</span>\n-\n-\n-<span class=\"s2\">class </span><span class=\"s1\">MultiDomainBasicAuth</span><span class=\"s3\">(</span><span class=\"s1\">AuthBase</span><span class=\"s3\">):</span>\n-    <span class=\"s2\">def </span><span class=\"s1\">__init__</span><span class=\"s3\">(</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">,</span>\n-        <span class=\"s1\">prompting</span><span class=\"s3\">: </span><span class=\"s1\">bool </span><span class=\"s3\">= </span><span class=\"s2\">True</span><span class=\"s3\">,</span>\n-        <span class=\"s1\">index_urls</span><span class=\"s3\">: </span><span class=\"s1\">Optional</span><span class=\"s3\">[</span><span class=\"s1\">List</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">]] = </span><span class=\"s2\">None</span><span class=\"s3\">,</span>\n-        <span class=\"s1\">keyring_provider</span><span class=\"s3\">: </span><span class=\"s1\">str </span><span class=\"s3\">= </span><span class=\"s5\">&quot;auto&quot;</span><span class=\"s3\">,</span>\n-    <span class=\"s3\">) </span><span class=\"s1\">-&gt; </span><span class=\"s2\">None</span><span class=\"s3\">:</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">prompting </span><span class=\"s3\">= </span><span class=\"s1\">prompting</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">index_urls </span><span class=\"s3\">= </span><span class=\"s1\">index_urls</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring_provider </span><span class=\"s3\">= </span><span class=\"s1\">keyring_provider  </span><span class=\"s4\"># type: ignore[assignment]</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">passwords</span><span class=\"s3\">: </span><span class=\"s1\">Dict</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">AuthInfo</span><span class=\"s3\">] = {}</span>\n-        <span class=\"s4\"># When the user is prompted to enter credentials and keyring is</span>\n-        <span class=\"s4\"># available, we will offer to save them. If the user accepts,</span>\n-        <span class=\"s4\"># this value is set to the credentials they entered. After the</span>\n-        <span class=\"s4\"># request authenticates, the caller should call</span>\n-        <span class=\"s4\"># ``save_credentials`` to save these.</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_credentials_to_save</span><span class=\"s3\">: </span><span class=\"s1\">Optional</span><span class=\"s3\">[</span><span class=\"s1\">Credentials</span><span class=\"s3\">] = </span><span class=\"s2\">None</span>\n-\n-    <span class=\"s3\">@</span><span class=\"s1\">property</span>\n-    <span class=\"s2\">def </span><span class=\"s1\">keyring_provider</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; KeyRingBaseProvider</span><span class=\"s3\">:</span>\n-        <span class=\"s2\">return </span><span class=\"s1\">get_keyring_provider</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_keyring_provider</span><span class=\"s3\">)</span>\n-\n-    <span class=\"s3\">@</span><span class=\"s1\">keyring_provider</span><span class=\"s3\">.</span><span class=\"s1\">setter</span>\n-    <span class=\"s2\">def </span><span class=\"s1\">keyring_provider</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">provider</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; </span><span class=\"s2\">None</span><span class=\"s3\">:</span>\n-        <span class=\"s4\"># The free function get_keyring_provider has been decorated with</span>\n-        <span class=\"s4\"># functools.cache. If an exception occurs in get_keyring_auth that</span>\n-        <span class=\"s4\"># cache will be cleared and keyring disabled, take that into account</span>\n-        <span class=\"s4\"># if you want to remove this indirection.</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_keyring_provider </span><span class=\"s3\">= </span><span class=\"s1\">provider</span>\n-\n-    <span class=\"s3\">@</span><span class=\"s1\">property</span>\n-    <span class=\"s2\">def </span><span class=\"s1\">use_keyring</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; bool</span><span class=\"s3\">:</span>\n-        <span class=\"s4\"># We won't use keyring when --no-input is passed unless</span>\n-        <span class=\"s4\"># a specific provider is requested because it might require</span>\n-        <span class=\"s4\"># user interaction</span>\n-        <span class=\"s2\">return </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">prompting </span><span class=\"s2\">or </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_keyring_provider </span><span class=\"s2\">not in </span><span class=\"s3\">[</span><span class=\"s5\">&quot;auto&quot;</span><span class=\"s3\">, </span><span class=\"s5\">&quot;disabled&quot;</span><span class=\"s3\">]</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">_get_keyring_auth</span><span class=\"s3\">(</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">,</span>\n-        <span class=\"s1\">url</span><span class=\"s3\">: </span><span class=\"s1\">Optional</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">],</span>\n-        <span class=\"s1\">username</span><span class=\"s3\">: </span><span class=\"s1\">Optional</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">],</span>\n-    <span class=\"s3\">) </span><span class=\"s1\">-&gt; Optional</span><span class=\"s3\">[</span><span class=\"s1\">AuthInfo</span><span class=\"s3\">]:</span>\n-        <span class=\"s0\">&quot;&quot;&quot;Return the tuple auth for a given url from keyring.&quot;&quot;&quot;</span>\n-        <span class=\"s4\"># Do nothing if no url was provided</span>\n-        <span class=\"s2\">if not </span><span class=\"s1\">url</span><span class=\"s3\">:</span>\n-            <span class=\"s2\">return None</span>\n-\n-        <span class=\"s2\">try</span><span class=\"s3\">:</span>\n-            <span class=\"s2\">return </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring_provider</span><span class=\"s3\">.</span><span class=\"s1\">get_auth_info</span><span class=\"s3\">(</span><span class=\"s1\">url</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">)</span>\n-        <span class=\"s2\">except </span><span class=\"s1\">Exception </span><span class=\"s2\">as </span><span class=\"s1\">exc</span><span class=\"s3\">:</span>\n-            <span class=\"s4\"># Log the full exception (with stacktrace) at debug, so it'll only</span>\n-            <span class=\"s4\"># show up when running in verbose mode.</span>\n-            <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">debug</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Keyring is skipped due to an exception&quot;</span><span class=\"s3\">, </span><span class=\"s1\">exc_info</span><span class=\"s3\">=</span><span class=\"s2\">True</span><span class=\"s3\">)</span>\n-            <span class=\"s4\"># Always log a shortened version of the exception.</span>\n-            <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">warning</span><span class=\"s3\">(</span>\n-                <span class=\"s5\">&quot;Keyring is skipped due to an exception: %s&quot;</span><span class=\"s3\">,</span>\n-                <span class=\"s1\">str</span><span class=\"s3\">(</span><span class=\"s1\">exc</span><span class=\"s3\">),</span>\n-            <span class=\"s3\">)</span>\n-            <span class=\"s2\">global </span><span class=\"s1\">KEYRING_DISABLED</span>\n-            <span class=\"s1\">KEYRING_DISABLED </span><span class=\"s3\">= </span><span class=\"s2\">True</span>\n-            <span class=\"s1\">get_keyring_provider</span><span class=\"s3\">.</span><span class=\"s1\">cache_clear</span><span class=\"s3\">()</span>\n-            <span class=\"s2\">return None</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">_get_index_url</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">url</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; Optional</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">]:</span>\n-        <span class=\"s0\">&quot;&quot;&quot;Return the original index URL matching the requested URL. \n- \n-        Cached or dynamically generated credentials may work against \n-        the original index URL rather than just the netloc. \n- \n-        The provided url should have had its username and password \n-        removed already. If the original index url had credentials then \n-        they will be included in the return value. \n- \n-        Returns None if no matching index was found, or if --no-index \n-        was specified by the user. \n-        &quot;&quot;&quot;</span>\n-        <span class=\"s2\">if not </span><span class=\"s1\">url </span><span class=\"s2\">or not </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">index_urls</span><span class=\"s3\">:</span>\n-            <span class=\"s2\">return None</span>\n-\n-        <span class=\"s1\">url </span><span class=\"s3\">= </span><span class=\"s1\">remove_auth_from_url</span><span class=\"s3\">(</span><span class=\"s1\">url</span><span class=\"s3\">).</span><span class=\"s1\">rstrip</span><span class=\"s3\">(</span><span class=\"s5\">&quot;/&quot;</span><span class=\"s3\">) + </span><span class=\"s5\">&quot;/&quot;</span>\n-        <span class=\"s1\">parsed_url </span><span class=\"s3\">= </span><span class=\"s1\">urllib</span><span class=\"s3\">.</span><span class=\"s1\">parse</span><span class=\"s3\">.</span><span class=\"s1\">urlsplit</span><span class=\"s3\">(</span><span class=\"s1\">url</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s1\">candidates </span><span class=\"s3\">= []</span>\n-\n-        <span class=\"s2\">for </span><span class=\"s1\">index </span><span class=\"s2\">in </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">index_urls</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">index </span><span class=\"s3\">= </span><span class=\"s1\">index</span><span class=\"s3\">.</span><span class=\"s1\">rstrip</span><span class=\"s3\">(</span><span class=\"s5\">&quot;/&quot;</span><span class=\"s3\">) + </span><span class=\"s5\">&quot;/&quot;</span>\n-            <span class=\"s1\">parsed_index </span><span class=\"s3\">= </span><span class=\"s1\">urllib</span><span class=\"s3\">.</span><span class=\"s1\">parse</span><span class=\"s3\">.</span><span class=\"s1\">urlsplit</span><span class=\"s3\">(</span><span class=\"s1\">remove_auth_from_url</span><span class=\"s3\">(</span><span class=\"s1\">index</span><span class=\"s3\">))</span>\n-            <span class=\"s2\">if </span><span class=\"s1\">parsed_url </span><span class=\"s3\">== </span><span class=\"s1\">parsed_index</span><span class=\"s3\">:</span>\n-                <span class=\"s2\">return </span><span class=\"s1\">index</span>\n-\n-            <span class=\"s2\">if </span><span class=\"s1\">parsed_url</span><span class=\"s3\">.</span><span class=\"s1\">netloc </span><span class=\"s3\">!= </span><span class=\"s1\">parsed_index</span><span class=\"s3\">.</span><span class=\"s1\">netloc</span><span class=\"s3\">:</span>\n-                <span class=\"s2\">continue</span>\n-\n-            <span class=\"s1\">candidate </span><span class=\"s3\">= </span><span class=\"s1\">urllib</span><span class=\"s3\">.</span><span class=\"s1\">parse</span><span class=\"s3\">.</span><span class=\"s1\">urlsplit</span><span class=\"s3\">(</span><span class=\"s1\">index</span><span class=\"s3\">)</span>\n-            <span class=\"s1\">candidates</span><span class=\"s3\">.</span><span class=\"s1\">append</span><span class=\"s3\">(</span><span class=\"s1\">candidate</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s2\">if not </span><span class=\"s1\">candidates</span><span class=\"s3\">:</span>\n-            <span class=\"s2\">return None</span>\n-\n-        <span class=\"s1\">candidates</span><span class=\"s3\">.</span><span class=\"s1\">sort</span><span class=\"s3\">(</span>\n-            <span class=\"s1\">reverse</span><span class=\"s3\">=</span><span class=\"s2\">True</span><span class=\"s3\">,</span>\n-            <span class=\"s1\">key</span><span class=\"s3\">=</span><span class=\"s2\">lambda </span><span class=\"s1\">candidate</span><span class=\"s3\">: </span><span class=\"s1\">commonprefix</span><span class=\"s3\">(</span>\n-                <span class=\"s3\">[</span>\n-                    <span class=\"s1\">parsed_url</span><span class=\"s3\">.</span><span class=\"s1\">path</span><span class=\"s3\">,</span>\n-                    <span class=\"s1\">candidate</span><span class=\"s3\">.</span><span class=\"s1\">path</span><span class=\"s3\">,</span>\n-                <span class=\"s3\">]</span>\n-            <span class=\"s3\">).</span><span class=\"s1\">rfind</span><span class=\"s3\">(</span><span class=\"s5\">&quot;/&quot;</span><span class=\"s3\">),</span>\n-        <span class=\"s3\">)</span>\n-\n-        <span class=\"s2\">return </span><span class=\"s1\">urllib</span><span class=\"s3\">.</span><span class=\"s1\">parse</span><span class=\"s3\">.</span><span class=\"s1\">urlunsplit</span><span class=\"s3\">(</span><span class=\"s1\">candidates</span><span class=\"s3\">[</span><span class=\"s6\">0</span><span class=\"s3\">])</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">_get_new_credentials</span><span class=\"s3\">(</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">,</span>\n-        <span class=\"s1\">original_url</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">,</span>\n-        <span class=\"s3\">*,</span>\n-        <span class=\"s1\">allow_netrc</span><span class=\"s3\">: </span><span class=\"s1\">bool </span><span class=\"s3\">= </span><span class=\"s2\">True</span><span class=\"s3\">,</span>\n-        <span class=\"s1\">allow_keyring</span><span class=\"s3\">: </span><span class=\"s1\">bool </span><span class=\"s3\">= </span><span class=\"s2\">False</span><span class=\"s3\">,</span>\n-    <span class=\"s3\">) </span><span class=\"s1\">-&gt; AuthInfo</span><span class=\"s3\">:</span>\n-        <span class=\"s0\">&quot;&quot;&quot;Find and return credentials for the specified URL.&quot;&quot;&quot;</span>\n-        <span class=\"s4\"># Split the credentials and netloc from the url.</span>\n-        <span class=\"s1\">url</span><span class=\"s3\">, </span><span class=\"s1\">netloc</span><span class=\"s3\">, </span><span class=\"s1\">url_user_password </span><span class=\"s3\">= </span><span class=\"s1\">split_auth_netloc_from_url</span><span class=\"s3\">(</span>\n-            <span class=\"s1\">original_url</span><span class=\"s3\">,</span>\n-        <span class=\"s3\">)</span>\n-\n-        <span class=\"s4\"># Start with the credentials embedded in the url</span>\n-        <span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password </span><span class=\"s3\">= </span><span class=\"s1\">url_user_password</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">username </span><span class=\"s2\">is not None and </span><span class=\"s1\">password </span><span class=\"s2\">is not None</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">debug</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Found credentials in url for %s&quot;</span><span class=\"s3\">, </span><span class=\"s1\">netloc</span><span class=\"s3\">)</span>\n-            <span class=\"s2\">return </span><span class=\"s1\">url_user_password</span>\n-\n-        <span class=\"s4\"># Find a matching index url for this request</span>\n-        <span class=\"s1\">index_url </span><span class=\"s3\">= </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_get_index_url</span><span class=\"s3\">(</span><span class=\"s1\">url</span><span class=\"s3\">)</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">index_url</span><span class=\"s3\">:</span>\n-            <span class=\"s4\"># Split the credentials from the url.</span>\n-            <span class=\"s1\">index_info </span><span class=\"s3\">= </span><span class=\"s1\">split_auth_netloc_from_url</span><span class=\"s3\">(</span><span class=\"s1\">index_url</span><span class=\"s3\">)</span>\n-            <span class=\"s2\">if </span><span class=\"s1\">index_info</span><span class=\"s3\">:</span>\n-                <span class=\"s1\">index_url</span><span class=\"s3\">, </span><span class=\"s1\">_</span><span class=\"s3\">, </span><span class=\"s1\">index_url_user_password </span><span class=\"s3\">= </span><span class=\"s1\">index_info</span>\n-                <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">debug</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Found index url %s&quot;</span><span class=\"s3\">, </span><span class=\"s1\">index_url</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s4\"># If an index URL was found, try its embedded credentials</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">index_url </span><span class=\"s2\">and </span><span class=\"s1\">index_url_user_password</span><span class=\"s3\">[</span><span class=\"s6\">0</span><span class=\"s3\">] </span><span class=\"s2\">is not None</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password </span><span class=\"s3\">= </span><span class=\"s1\">index_url_user_password</span>\n-            <span class=\"s2\">if </span><span class=\"s1\">username </span><span class=\"s2\">is not None and </span><span class=\"s1\">password </span><span class=\"s2\">is not None</span><span class=\"s3\">:</span>\n-                <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">debug</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Found credentials in index url for %s&quot;</span><span class=\"s3\">, </span><span class=\"s1\">netloc</span><span class=\"s3\">)</span>\n-                <span class=\"s2\">return </span><span class=\"s1\">index_url_user_password</span>\n-\n-        <span class=\"s4\"># Get creds from netrc if we still don't have them</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">allow_netrc</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">netrc_auth </span><span class=\"s3\">= </span><span class=\"s1\">get_netrc_auth</span><span class=\"s3\">(</span><span class=\"s1\">original_url</span><span class=\"s3\">)</span>\n-            <span class=\"s2\">if </span><span class=\"s1\">netrc_auth</span><span class=\"s3\">:</span>\n-                <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">debug</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Found credentials in netrc for %s&quot;</span><span class=\"s3\">, </span><span class=\"s1\">netloc</span><span class=\"s3\">)</span>\n-                <span class=\"s2\">return </span><span class=\"s1\">netrc_auth</span>\n-\n-        <span class=\"s4\"># If we don't have a password and keyring is available, use it.</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">allow_keyring</span><span class=\"s3\">:</span>\n-            <span class=\"s4\"># The index url is more specific than the netloc, so try it first</span>\n-            <span class=\"s4\"># fmt: off</span>\n-            <span class=\"s1\">kr_auth </span><span class=\"s3\">= (</span>\n-                <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_get_keyring_auth</span><span class=\"s3\">(</span><span class=\"s1\">index_url</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">) </span><span class=\"s2\">or</span>\n-                <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_get_keyring_auth</span><span class=\"s3\">(</span><span class=\"s1\">netloc</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">)</span>\n-            <span class=\"s3\">)</span>\n-            <span class=\"s4\"># fmt: on</span>\n-            <span class=\"s2\">if </span><span class=\"s1\">kr_auth</span><span class=\"s3\">:</span>\n-                <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">debug</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Found credentials in keyring for %s&quot;</span><span class=\"s3\">, </span><span class=\"s1\">netloc</span><span class=\"s3\">)</span>\n-                <span class=\"s2\">return </span><span class=\"s1\">kr_auth</span>\n-\n-        <span class=\"s2\">return </span><span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">_get_url_and_credentials</span><span class=\"s3\">(</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">original_url</span><span class=\"s3\">: </span><span class=\"s1\">str</span>\n-    <span class=\"s3\">) </span><span class=\"s1\">-&gt; Tuple</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">Optional</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">], </span><span class=\"s1\">Optional</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">]]:</span>\n-        <span class=\"s0\">&quot;&quot;&quot;Return the credentials to use for the provided URL. \n- \n-        If allowed, netrc and keyring may be used to obtain the \n-        correct credentials. \n- \n-        Returns (url_without_credentials, username, password). Note \n-        that even if the original URL contains credentials, this \n-        function may return a different username and password. \n-        &quot;&quot;&quot;</span>\n-        <span class=\"s1\">url</span><span class=\"s3\">, </span><span class=\"s1\">netloc</span><span class=\"s3\">, </span><span class=\"s1\">_ </span><span class=\"s3\">= </span><span class=\"s1\">split_auth_netloc_from_url</span><span class=\"s3\">(</span><span class=\"s1\">original_url</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s4\"># Try to get credentials from original url</span>\n-        <span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password </span><span class=\"s3\">= </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_get_new_credentials</span><span class=\"s3\">(</span><span class=\"s1\">original_url</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s4\"># If credentials not found, use any stored credentials for this netloc.</span>\n-        <span class=\"s4\"># Do this if either the username or the password is missing.</span>\n-        <span class=\"s4\"># This accounts for the situation in which the user has specified</span>\n-        <span class=\"s4\"># the username in the index url, but the password comes from keyring.</span>\n-        <span class=\"s2\">if </span><span class=\"s3\">(</span><span class=\"s1\">username </span><span class=\"s2\">is None or </span><span class=\"s1\">password </span><span class=\"s2\">is None</span><span class=\"s3\">) </span><span class=\"s2\">and </span><span class=\"s1\">netloc </span><span class=\"s2\">in </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">passwords</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">un</span><span class=\"s3\">, </span><span class=\"s1\">pw </span><span class=\"s3\">= </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">passwords</span><span class=\"s3\">[</span><span class=\"s1\">netloc</span><span class=\"s3\">]</span>\n-            <span class=\"s4\"># It is possible that the cached credentials are for a different username,</span>\n-            <span class=\"s4\"># in which case the cache should be ignored.</span>\n-            <span class=\"s2\">if </span><span class=\"s1\">username </span><span class=\"s2\">is None or </span><span class=\"s1\">username </span><span class=\"s3\">== </span><span class=\"s1\">un</span><span class=\"s3\">:</span>\n-                <span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password </span><span class=\"s3\">= </span><span class=\"s1\">un</span><span class=\"s3\">, </span><span class=\"s1\">pw</span>\n-\n-        <span class=\"s2\">if </span><span class=\"s1\">username </span><span class=\"s2\">is not None or </span><span class=\"s1\">password </span><span class=\"s2\">is not None</span><span class=\"s3\">:</span>\n-            <span class=\"s4\"># Convert the username and password if they're None, so that</span>\n-            <span class=\"s4\"># this netloc will show up as &quot;cached&quot; in the conditional above.</span>\n-            <span class=\"s4\"># Further, HTTPBasicAuth doesn't accept None, so it makes sense to</span>\n-            <span class=\"s4\"># cache the value that is going to be used.</span>\n-            <span class=\"s1\">username </span><span class=\"s3\">= </span><span class=\"s1\">username </span><span class=\"s2\">or </span><span class=\"s5\">&quot;&quot;</span>\n-            <span class=\"s1\">password </span><span class=\"s3\">= </span><span class=\"s1\">password </span><span class=\"s2\">or </span><span class=\"s5\">&quot;&quot;</span>\n-\n-            <span class=\"s4\"># Store any acquired credentials.</span>\n-            <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">passwords</span><span class=\"s3\">[</span><span class=\"s1\">netloc</span><span class=\"s3\">] = (</span><span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s2\">assert </span><span class=\"s3\">(</span>\n-            <span class=\"s4\"># Credentials were found</span>\n-            <span class=\"s3\">(</span><span class=\"s1\">username </span><span class=\"s2\">is not None and </span><span class=\"s1\">password </span><span class=\"s2\">is not None</span><span class=\"s3\">)</span>\n-            <span class=\"s4\"># Credentials were not found</span>\n-            <span class=\"s2\">or </span><span class=\"s3\">(</span><span class=\"s1\">username </span><span class=\"s2\">is None and </span><span class=\"s1\">password </span><span class=\"s2\">is None</span><span class=\"s3\">)</span>\n-        <span class=\"s3\">), </span><span class=\"s5\">f&quot;Could not load credentials from url: </span><span class=\"s2\">{</span><span class=\"s1\">original_url</span><span class=\"s2\">}</span><span class=\"s5\">&quot;</span>\n-\n-        <span class=\"s2\">return </span><span class=\"s1\">url</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">__call__</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">req</span><span class=\"s3\">: </span><span class=\"s1\">Request</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; Request</span><span class=\"s3\">:</span>\n-        <span class=\"s4\"># Get credentials for this request</span>\n-        <span class=\"s1\">url</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password </span><span class=\"s3\">= </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_get_url_and_credentials</span><span class=\"s3\">(</span><span class=\"s1\">req</span><span class=\"s3\">.</span><span class=\"s1\">url</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s4\"># Set the url of the request to the url without any credentials</span>\n-        <span class=\"s1\">req</span><span class=\"s3\">.</span><span class=\"s1\">url </span><span class=\"s3\">= </span><span class=\"s1\">url</span>\n-\n-        <span class=\"s2\">if </span><span class=\"s1\">username </span><span class=\"s2\">is not None and </span><span class=\"s1\">password </span><span class=\"s2\">is not None</span><span class=\"s3\">:</span>\n-            <span class=\"s4\"># Send the basic auth with this request</span>\n-            <span class=\"s1\">req </span><span class=\"s3\">= </span><span class=\"s1\">HTTPBasicAuth</span><span class=\"s3\">(</span><span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password</span><span class=\"s3\">)(</span><span class=\"s1\">req</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s4\"># Attach a hook to handle 401 responses</span>\n-        <span class=\"s1\">req</span><span class=\"s3\">.</span><span class=\"s1\">register_hook</span><span class=\"s3\">(</span><span class=\"s5\">&quot;response&quot;</span><span class=\"s3\">, </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">handle_401</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s2\">return </span><span class=\"s1\">req</span>\n-\n-    <span class=\"s4\"># Factored out to allow for easy patching in tests</span>\n-    <span class=\"s2\">def </span><span class=\"s1\">_prompt_for_password</span><span class=\"s3\">(</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">netloc</span><span class=\"s3\">: </span><span class=\"s1\">str</span>\n-    <span class=\"s3\">) </span><span class=\"s1\">-&gt; Tuple</span><span class=\"s3\">[</span><span class=\"s1\">Optional</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">], </span><span class=\"s1\">Optional</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">], </span><span class=\"s1\">bool</span><span class=\"s3\">]:</span>\n-        <span class=\"s1\">username </span><span class=\"s3\">= </span><span class=\"s1\">ask_input</span><span class=\"s3\">(</span><span class=\"s5\">f&quot;User for </span><span class=\"s2\">{</span><span class=\"s1\">netloc</span><span class=\"s2\">}</span><span class=\"s5\">: &quot;</span><span class=\"s3\">) </span><span class=\"s2\">if </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">prompting </span><span class=\"s2\">else None</span>\n-        <span class=\"s2\">if not </span><span class=\"s1\">username</span><span class=\"s3\">:</span>\n-            <span class=\"s2\">return None</span><span class=\"s3\">, </span><span class=\"s2\">None</span><span class=\"s3\">, </span><span class=\"s2\">False</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">use_keyring</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">auth </span><span class=\"s3\">= </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_get_keyring_auth</span><span class=\"s3\">(</span><span class=\"s1\">netloc</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">)</span>\n-            <span class=\"s2\">if </span><span class=\"s1\">auth </span><span class=\"s2\">and </span><span class=\"s1\">auth</span><span class=\"s3\">[</span><span class=\"s6\">0</span><span class=\"s3\">] </span><span class=\"s2\">is not None and </span><span class=\"s1\">auth</span><span class=\"s3\">[</span><span class=\"s6\">1</span><span class=\"s3\">] </span><span class=\"s2\">is not None</span><span class=\"s3\">:</span>\n-                <span class=\"s2\">return </span><span class=\"s1\">auth</span><span class=\"s3\">[</span><span class=\"s6\">0</span><span class=\"s3\">], </span><span class=\"s1\">auth</span><span class=\"s3\">[</span><span class=\"s6\">1</span><span class=\"s3\">], </span><span class=\"s2\">False</span>\n-        <span class=\"s1\">password </span><span class=\"s3\">= </span><span class=\"s1\">ask_password</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Password: &quot;</span><span class=\"s3\">)</span>\n-        <span class=\"s2\">return </span><span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password</span><span class=\"s3\">, </span><span class=\"s2\">True</span>\n-\n-    <span class=\"s4\"># Factored out to allow for easy patching in tests</span>\n-    <span class=\"s2\">def </span><span class=\"s1\">_should_save_password_to_keyring</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; bool</span><span class=\"s3\">:</span>\n-        <span class=\"s2\">if </span><span class=\"s3\">(</span>\n-            <span class=\"s2\">not </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">prompting</span>\n-            <span class=\"s2\">or not </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">use_keyring</span>\n-            <span class=\"s2\">or not </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring_provider</span><span class=\"s3\">.</span><span class=\"s1\">has_keyring</span>\n-        <span class=\"s3\">):</span>\n-            <span class=\"s2\">return False</span>\n-        <span class=\"s2\">return </span><span class=\"s1\">ask</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Save credentials to keyring [y/N]: &quot;</span><span class=\"s3\">, [</span><span class=\"s5\">&quot;y&quot;</span><span class=\"s3\">, </span><span class=\"s5\">&quot;n&quot;</span><span class=\"s3\">]) == </span><span class=\"s5\">&quot;y&quot;</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">handle_401</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">resp</span><span class=\"s3\">: </span><span class=\"s1\">Response</span><span class=\"s3\">, **</span><span class=\"s1\">kwargs</span><span class=\"s3\">: </span><span class=\"s1\">Any</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; Response</span><span class=\"s3\">:</span>\n-        <span class=\"s4\"># We only care about 401 responses, anything else we want to just</span>\n-        <span class=\"s4\">#   pass through the actual response</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">resp</span><span class=\"s3\">.</span><span class=\"s1\">status_code </span><span class=\"s3\">!= </span><span class=\"s6\">401</span><span class=\"s3\">:</span>\n-            <span class=\"s2\">return </span><span class=\"s1\">resp</span>\n-\n-        <span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password </span><span class=\"s3\">= </span><span class=\"s2\">None</span><span class=\"s3\">, </span><span class=\"s2\">None</span>\n-\n-        <span class=\"s4\"># Query the keyring for credentials:</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">use_keyring</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password </span><span class=\"s3\">= </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_get_new_credentials</span><span class=\"s3\">(</span>\n-                <span class=\"s1\">resp</span><span class=\"s3\">.</span><span class=\"s1\">url</span><span class=\"s3\">,</span>\n-                <span class=\"s1\">allow_netrc</span><span class=\"s3\">=</span><span class=\"s2\">False</span><span class=\"s3\">,</span>\n-                <span class=\"s1\">allow_keyring</span><span class=\"s3\">=</span><span class=\"s2\">True</span><span class=\"s3\">,</span>\n-            <span class=\"s3\">)</span>\n-\n-        <span class=\"s4\"># We are not able to prompt the user so simply return the response</span>\n-        <span class=\"s2\">if not </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">prompting </span><span class=\"s2\">and not </span><span class=\"s1\">username </span><span class=\"s2\">and not </span><span class=\"s1\">password</span><span class=\"s3\">:</span>\n-            <span class=\"s2\">return </span><span class=\"s1\">resp</span>\n-\n-        <span class=\"s1\">parsed </span><span class=\"s3\">= </span><span class=\"s1\">urllib</span><span class=\"s3\">.</span><span class=\"s1\">parse</span><span class=\"s3\">.</span><span class=\"s1\">urlparse</span><span class=\"s3\">(</span><span class=\"s1\">resp</span><span class=\"s3\">.</span><span class=\"s1\">url</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s4\"># Prompt the user for a new username and password</span>\n-        <span class=\"s1\">save </span><span class=\"s3\">= </span><span class=\"s2\">False</span>\n-        <span class=\"s2\">if not </span><span class=\"s1\">username </span><span class=\"s2\">and not </span><span class=\"s1\">password</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password</span><span class=\"s3\">, </span><span class=\"s1\">save </span><span class=\"s3\">= </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_prompt_for_password</span><span class=\"s3\">(</span><span class=\"s1\">parsed</span><span class=\"s3\">.</span><span class=\"s1\">netloc</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s4\"># Store the new username and password to use for future requests</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_credentials_to_save </span><span class=\"s3\">= </span><span class=\"s2\">None</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">username </span><span class=\"s2\">is not None and </span><span class=\"s1\">password </span><span class=\"s2\">is not None</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">passwords</span><span class=\"s3\">[</span><span class=\"s1\">parsed</span><span class=\"s3\">.</span><span class=\"s1\">netloc</span><span class=\"s3\">] = (</span><span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password</span><span class=\"s3\">)</span>\n-\n-            <span class=\"s4\"># Prompt to save the password to keyring</span>\n-            <span class=\"s2\">if </span><span class=\"s1\">save </span><span class=\"s2\">and </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_should_save_password_to_keyring</span><span class=\"s3\">():</span>\n-                <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_credentials_to_save </span><span class=\"s3\">= </span><span class=\"s1\">Credentials</span><span class=\"s3\">(</span>\n-                    <span class=\"s1\">url</span><span class=\"s3\">=</span><span class=\"s1\">parsed</span><span class=\"s3\">.</span><span class=\"s1\">netloc</span><span class=\"s3\">,</span>\n-                    <span class=\"s1\">username</span><span class=\"s3\">=</span><span class=\"s1\">username</span><span class=\"s3\">,</span>\n-                    <span class=\"s1\">password</span><span class=\"s3\">=</span><span class=\"s1\">password</span><span class=\"s3\">,</span>\n-                <span class=\"s3\">)</span>\n-\n-        <span class=\"s4\"># Consume content and release the original connection to allow our new</span>\n-        <span class=\"s4\">#   request to reuse the same one.</span>\n-        <span class=\"s4\"># The result of the assignment isn't used, it's just needed to consume</span>\n-        <span class=\"s4\"># the content.</span>\n-        <span class=\"s1\">_ </span><span class=\"s3\">= </span><span class=\"s1\">resp</span><span class=\"s3\">.</span><span class=\"s1\">content</span>\n-        <span class=\"s1\">resp</span><span class=\"s3\">.</span><span class=\"s1\">raw</span><span class=\"s3\">.</span><span class=\"s1\">release_conn</span><span class=\"s3\">()</span>\n-\n-        <span class=\"s4\"># Add our new username and password to the request</span>\n-        <span class=\"s1\">req </span><span class=\"s3\">= </span><span class=\"s1\">HTTPBasicAuth</span><span class=\"s3\">(</span><span class=\"s1\">username </span><span class=\"s2\">or </span><span class=\"s5\">&quot;&quot;</span><span class=\"s3\">, </span><span class=\"s1\">password </span><span class=\"s2\">or </span><span class=\"s5\">&quot;&quot;</span><span class=\"s3\">)(</span><span class=\"s1\">resp</span><span class=\"s3\">.</span><span class=\"s1\">request</span><span class=\"s3\">)</span>\n-        <span class=\"s1\">req</span><span class=\"s3\">.</span><span class=\"s1\">register_hook</span><span class=\"s3\">(</span><span class=\"s5\">&quot;response&quot;</span><span class=\"s3\">, </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">warn_on_401</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s4\"># On successful request, save the credentials that were used to</span>\n-        <span class=\"s4\"># keyring. (Note that if the user responded &quot;no&quot; above, this member</span>\n-        <span class=\"s4\"># is not set and nothing will be saved.)</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_credentials_to_save</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">req</span><span class=\"s3\">.</span><span class=\"s1\">register_hook</span><span class=\"s3\">(</span><span class=\"s5\">&quot;response&quot;</span><span class=\"s3\">, </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">save_credentials</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s4\"># Send our new request</span>\n-        <span class=\"s1\">new_resp </span><span class=\"s3\">= </span><span class=\"s1\">resp</span><span class=\"s3\">.</span><span class=\"s1\">connection</span><span class=\"s3\">.</span><span class=\"s1\">send</span><span class=\"s3\">(</span><span class=\"s1\">req</span><span class=\"s3\">, **</span><span class=\"s1\">kwargs</span><span class=\"s3\">)</span>\n-        <span class=\"s1\">new_resp</span><span class=\"s3\">.</span><span class=\"s1\">history</span><span class=\"s3\">.</span><span class=\"s1\">append</span><span class=\"s3\">(</span><span class=\"s1\">resp</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s2\">return </span><span class=\"s1\">new_resp</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">warn_on_401</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">resp</span><span class=\"s3\">: </span><span class=\"s1\">Response</span><span class=\"s3\">, **</span><span class=\"s1\">kwargs</span><span class=\"s3\">: </span><span class=\"s1\">Any</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; </span><span class=\"s2\">None</span><span class=\"s3\">:</span>\n-        <span class=\"s0\">&quot;&quot;&quot;Response callback to warn about incorrect credentials.&quot;&quot;&quot;</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">resp</span><span class=\"s3\">.</span><span class=\"s1\">status_code </span><span class=\"s3\">== </span><span class=\"s6\">401</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">warning</span><span class=\"s3\">(</span>\n-                <span class=\"s5\">&quot;401 Error, Credentials not correct for %s&quot;</span><span class=\"s3\">,</span>\n-                <span class=\"s1\">resp</span><span class=\"s3\">.</span><span class=\"s1\">request</span><span class=\"s3\">.</span><span class=\"s1\">url</span><span class=\"s3\">,</span>\n-            <span class=\"s3\">)</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">save_credentials</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">resp</span><span class=\"s3\">: </span><span class=\"s1\">Response</span><span class=\"s3\">, **</span><span class=\"s1\">kwargs</span><span class=\"s3\">: </span><span class=\"s1\">Any</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; </span><span class=\"s2\">None</span><span class=\"s3\">:</span>\n-        <span class=\"s0\">&quot;&quot;&quot;Response callback to save credentials on success.&quot;&quot;&quot;</span>\n-        <span class=\"s2\">assert </span><span class=\"s3\">(</span>\n-            <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring_provider</span><span class=\"s3\">.</span><span class=\"s1\">has_keyring</span>\n-        <span class=\"s3\">), </span><span class=\"s5\">&quot;should never reach here without keyring&quot;</span>\n-\n-        <span class=\"s1\">creds </span><span class=\"s3\">= </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_credentials_to_save</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_credentials_to_save </span><span class=\"s3\">= </span><span class=\"s2\">None</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">creds </span><span class=\"s2\">and </span><span class=\"s1\">resp</span><span class=\"s3\">.</span><span class=\"s1\">status_code </span><span class=\"s3\">&lt; </span><span class=\"s6\">400</span><span class=\"s3\">:</span>\n-            <span class=\"s2\">try</span><span class=\"s3\">:</span>\n-                <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">info</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Saving credentials to keyring&quot;</span><span class=\"s3\">)</span>\n-                <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring_provider</span><span class=\"s3\">.</span><span class=\"s1\">save_auth_info</span><span class=\"s3\">(</span>\n-                    <span class=\"s1\">creds</span><span class=\"s3\">.</span><span class=\"s1\">url</span><span class=\"s3\">, </span><span class=\"s1\">creds</span><span class=\"s3\">.</span><span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">creds</span><span class=\"s3\">.</span><span class=\"s1\">password</span>\n-                <span class=\"s3\">)</span>\n-            <span class=\"s2\">except </span><span class=\"s1\">Exception</span><span class=\"s3\">:</span>\n-                <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">exception</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Failed to save credentials&quot;</span><span class=\"s3\">)</span>\n+<pre><span class=\"s0\">from </span><span class=\"s1\">flask </span><span class=\"s0\">import </span><span class=\"s1\">Blueprint</span><span class=\"s2\">, </span><span class=\"s1\">render_template</span><span class=\"s2\">, </span><span class=\"s1\">redirect</span><span class=\"s2\">, </span><span class=\"s1\">url_for</span><span class=\"s2\">, </span><span class=\"s1\">request</span><span class=\"s2\">, </span><span class=\"s1\">flash</span>\n+<span class=\"s0\">from </span><span class=\"s1\">flask_login </span><span class=\"s0\">import </span><span class=\"s1\">login_user</span><span class=\"s2\">, </span><span class=\"s1\">logout_user</span><span class=\"s2\">, </span><span class=\"s1\">login_required</span>\n+<span class=\"s0\">from </span><span class=\"s1\">app</span><span class=\"s2\">.</span><span class=\"s1\">models </span><span class=\"s0\">import </span><span class=\"s1\">db</span><span class=\"s2\">, </span><span class=\"s1\">User</span>\n+<span class=\"s0\">from </span><span class=\"s1\">werkzeug</span><span class=\"s2\">.</span><span class=\"s1\">security </span><span class=\"s0\">import </span><span class=\"s1\">generate_password_hash</span><span class=\"s2\">, </span><span class=\"s1\">check_password_hash</span>\n+\n+<span class=\"s1\">auth_bp </span><span class=\"s2\">= </span><span class=\"s1\">Blueprint</span><span class=\"s2\">(</span><span class=\"s3\">&quot;auth&quot;</span><span class=\"s2\">, </span><span class=\"s1\">__name__</span><span class=\"s2\">, </span><span class=\"s1\">template_folder</span><span class=\"s2\">=</span><span class=\"s3\">&quot;../templates/auth&quot;</span><span class=\"s2\">)</span>\n+\n+<span class=\"s2\">@</span><span class=\"s1\">auth_bp</span><span class=\"s2\">.</span><span class=\"s1\">route</span><span class=\"s2\">(</span><span class=\"s3\">&quot;/login&quot;</span><span class=\"s2\">, </span><span class=\"s1\">methods</span><span class=\"s2\">=[</span><span class=\"s3\">&quot;GET&quot;</span><span class=\"s2\">, </span><span class=\"s3\">&quot;POST&quot;</span><span class=\"s2\">])</span>\n+<span class=\"s0\">def </span><span class=\"s1\">login</span><span class=\"s2\">():</span>\n+    <span class=\"s0\">if </span><span class=\"s1\">request</span><span class=\"s2\">.</span><span class=\"s1\">method </span><span class=\"s2\">== </span><span class=\"s3\">&quot;POST&quot;</span><span class=\"s2\">:</span>\n+        <span class=\"s1\">username </span><span class=\"s2\">= </span><span class=\"s1\">request</span><span class=\"s2\">.</span><span class=\"s1\">form</span><span class=\"s2\">.</span><span class=\"s1\">get</span><span class=\"s2\">(</span><span class=\"s3\">&quot;username&quot;</span><span class=\"s2\">)</span>\n+        <span class=\"s1\">password </span><span class=\"s2\">= </span><span class=\"s1\">request</span><span class=\"s2\">.</span><span class=\"s1\">form</span><span class=\"s2\">.</span><span class=\"s1\">get</span><span class=\"s2\">(</span><span class=\"s3\">&quot;password&quot;</span><span class=\"s2\">)</span>\n+        <span class=\"s1\">user </span><span class=\"s2\">= </span><span class=\"s1\">User</span><span class=\"s2\">.</span><span class=\"s1\">query</span><span class=\"s2\">.</span><span class=\"s1\">filter_by</span><span class=\"s2\">(</span><span class=\"s1\">username</span><span class=\"s2\">=</span><span class=\"s1\">username</span><span class=\"s2\">).</span><span class=\"s1\">first</span><span class=\"s2\">()</span>\n+\n+        <span class=\"s0\">if </span><span class=\"s1\">user </span><span class=\"s0\">and </span><span class=\"s1\">check_password_hash</span><span class=\"s2\">(</span><span class=\"s1\">user</span><span class=\"s2\">.</span><span class=\"s1\">password_hash</span><span class=\"s2\">, </span><span class=\"s1\">password</span><span class=\"s2\">):</span>\n+            <span class=\"s1\">login_user</span><span class=\"s2\">(</span><span class=\"s1\">user</span><span class=\"s2\">)</span>\n+            <span class=\"s1\">flash</span><span class=\"s2\">(</span><span class=\"s3\">&quot;Login successful!&quot;</span><span class=\"s2\">, </span><span class=\"s3\">&quot;success&quot;</span><span class=\"s2\">)</span>\n+            <span class=\"s0\">return </span><span class=\"s1\">redirect</span><span class=\"s2\">(</span><span class=\"s1\">url_for</span><span class=\"s2\">(</span><span class=\"s3\">&quot;dashboard.index&quot;</span><span class=\"s2\">))</span>\n+        <span class=\"s0\">else</span><span class=\"s2\">:</span>\n+            <span class=\"s1\">flash</span><span class=\"s2\">(</span><span class=\"s3\">&quot;Invalid username or password&quot;</span><span class=\"s2\">, </span><span class=\"s3\">&quot;danger&quot;</span><span class=\"s2\">)</span>\n+\n+    <span class=\"s0\">return </span><span class=\"s1\">render_template</span><span class=\"s2\">(</span><span class=\"s3\">&quot;auth/login.html&quot;</span><span class=\"s2\">)</span>\n+\n+<span class=\"s2\">@</span><span class=\"s1\">auth_bp</span><span class=\"s2\">.</span><span class=\"s1\">route</span><span class=\"s2\">(</span><span class=\"s3\">&quot;/logout&quot;</span><span class=\"s2\">)</span>\n+<span class=\"s2\">@</span><span class=\"s1\">login_required</span>\n+<span class=\"s0\">def </span><span class=\"s1\">logout</span><span class=\"s2\">():</span>\n+    <span class=\"s1\">logout_user</span><span class=\"s2\">()</span>\n+    <span class=\"s1\">flash</span><span class=\"s2\">(</span><span class=\"s3\">&quot;You have been logged out.&quot;</span><span class=\"s2\">, </span><span class=\"s3\">&quot;info&quot;</span><span class=\"s2\">)</span>\n+    <span class=\"s0\">return </span><span class=\"s1\">redirect</span><span class=\"s2\">(</span><span class=\"s1\">url_for</span><span class=\"s2\">(</span><span class=\"s3\">&quot;auth.login&quot;</span><span class=\"s2\">))</span>\n+\n+<span class=\"s2\">@</span><span class=\"s1\">auth_bp</span><span class=\"s2\">.</span><span class=\"s1\">route</span><span class=\"s2\">(</span><span class=\"s3\">&quot;/register&quot;</span><span class=\"s2\">, </span><span class=\"s1\">methods</span><span class=\"s2\">=[</span><span class=\"s3\">&quot;GET&quot;</span><span class=\"s2\">, </span><span class=\"s3\">&quot;POST&quot;</span><span class=\"s2\">])</span>\n+<span class=\"s0\">def </span><span class=\"s1\">register</span><span class=\"s2\">():</span>\n+    <span class=\"s0\">if </span><span class=\"s1\">request</span><span class=\"s2\">.</span><span class=\"s1\">method </span><span class=\"s2\">== </span><span class=\"s3\">&quot;POST&quot;</span><span class=\"s2\">:</span>\n+        <span class=\"s1\">username </span><span class=\"s2\">= </span><span class=\"s1\">request</span><span class=\"s2\">.</span><span class=\"s1\">form</span><span class=\"s2\">.</span><span class=\"s1\">get</span><span class=\"s2\">(</span><span class=\"s3\">&quot;username&quot;</span><span class=\"s2\">)</span>\n+        <span class=\"s1\">email </span><span class=\"s2\">= </span><span class=\"s1\">request</span><span class=\"s2\">.</span><span class=\"s1\">form</span><span class=\"s2\">.</span><span class=\"s1\">get</span><span class=\"s2\">(</span><span class=\"s3\">&quot;email&quot;</span><span class=\"s2\">)</span>\n+        <span class=\"s1\">password </span><span class=\"s2\">= </span><span class=\"s1\">request</span><span class=\"s2\">.</span><span class=\"s1\">form</span><span class=\"s2\">.</span><span class=\"s1\">get</span><span class=\"s2\">(</span><span class=\"s3\">&quot;password&quot;</span><span class=\"s2\">)</span>\n+\n+        <span class=\"s4\"># Check if user exists</span>\n+        <span class=\"s1\">existing_user </span><span class=\"s2\">= </span><span class=\"s1\">User</span><span class=\"s2\">.</span><span class=\"s1\">query</span><span class=\"s2\">.</span><span class=\"s1\">filter_by</span><span class=\"s2\">(</span><span class=\"s1\">username</span><span class=\"s2\">=</span><span class=\"s1\">username</span><span class=\"s2\">).</span><span class=\"s1\">first</span><span class=\"s2\">()</span>\n+        <span class=\"s0\">if </span><span class=\"s1\">existing_user</span><span class=\"s2\">:</span>\n+            <span class=\"s1\">flash</span><span class=\"s2\">(</span><span class=\"s3\">&quot;Username already exists. Choose a different one.&quot;</span><span class=\"s2\">, </span><span class=\"s3\">&quot;warning&quot;</span><span class=\"s2\">)</span>\n+            <span class=\"s0\">return </span><span class=\"s1\">redirect</span><span class=\"s2\">(</span><span class=\"s1\">url_for</span><span class=\"s2\">(</span><span class=\"s3\">&quot;auth.register&quot;</span><span class=\"s2\">))</span>\n+\n+        <span class=\"s4\"># Create new user</span>\n+        <span class=\"s1\">new_user </span><span class=\"s2\">= </span><span class=\"s1\">User</span><span class=\"s2\">(</span><span class=\"s1\">username</span><span class=\"s2\">=</span><span class=\"s1\">username</span><span class=\"s2\">, </span><span class=\"s1\">email</span><span class=\"s2\">=</span><span class=\"s1\">email</span><span class=\"s2\">, </span><span class=\"s1\">password_hash</span><span class=\"s2\">=</span><span class=\"s1\">generate_password_hash</span><span class=\"s2\">(</span><span class=\"s1\">password</span><span class=\"s2\">))</span>\n+        <span class=\"s1\">db</span><span class=\"s2\">.</span><span class=\"s1\">session</span><span class=\"s2\">.</span><span class=\"s1\">add</span><span class=\"s2\">(</span><span class=\"s1\">new_user</span><span class=\"s2\">)</span>\n+        <span class=\"s1\">db</span><span class=\"s2\">.</span><span class=\"s1\">session</span><span class=\"s2\">.</span><span class=\"s1\">commit</span><span class=\"s2\">()</span>\n+\n+        <span class=\"s1\">flash</span><span class=\"s2\">(</span><span class=\"s3\">&quot;Account created successfully! Please log in.&quot;</span><span class=\"s2\">, </span><span class=\"s3\">&quot;success&quot;</span><span class=\"s2\">)</span>\n+        <span class=\"s0\">return </span><span class=\"s1\">redirect</span><span class=\"s2\">(</span><span class=\"s1\">url_for</span><span class=\"s2\">(</span><span class=\"s3\">&quot;auth.login&quot;</span><span class=\"s2\">))</span>\n+\n+    <span class=\"s0\">return </span><span class=\"s1\">render_template</span><span class=\"s2\">(</span><span class=\"s3\">&quot;auth/register.html&quot;</span><span class=\"s2\">)</span>\n </pre>\n </body>\n </html>\n\\ No newline at end of file\n", "path": "exportToHTML/auth.py.html", "printDiff": "@@ -3,13 +3,11 @@\n <title>auth.py</title>\n <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n <style type=\"text/css\">\n-.s0 { color: #5f826b; font-style: italic;}\n+.s0 { color: #cf8e6d;}\n .s1 { color: #bcbec4;}\n-.s2 { color: #cf8e6d;}\n-.s3 { color: #bcbec4;}\n+.s2 { color: #bcbec4;}\n+.s3 { color: #6aab73;}\n .s4 { color: #7a7e85;}\n-.s5 { color: #6aab73;}\n-.s6 { color: #2aacb8;}\n </style>\n </head>\n <body bgcolor=\"#1e1f22\">\n@@ -18,572 +16,58 @@\n <font face=\"Arial, Helvetica\" color=\"#000000\">\n auth.py</font>\n </center></td></tr></table>\n-<pre><span class=\"s0\">&quot;&quot;&quot;Network Authentication Helpers \n- \n-Contains interface (MultiDomainBasicAuth) and associated glue code for \n-providing credentials in the context of network requests. \n-&quot;&quot;&quot;</span>\n-\n-<span class=\"s2\">import </span><span class=\"s1\">logging</span>\n-<span class=\"s2\">import </span><span class=\"s1\">os</span>\n-<span class=\"s2\">import </span><span class=\"s1\">shutil</span>\n-<span class=\"s2\">import </span><span class=\"s1\">subprocess</span>\n-<span class=\"s2\">import </span><span class=\"s1\">sysconfig</span>\n-<span class=\"s2\">import </span><span class=\"s1\">typing</span>\n-<span class=\"s2\">import </span><span class=\"s1\">urllib</span><span class=\"s3\">.</span><span class=\"s1\">parse</span>\n-<span class=\"s2\">from </span><span class=\"s1\">abc </span><span class=\"s2\">import </span><span class=\"s1\">ABC</span><span class=\"s3\">, </span><span class=\"s1\">abstractmethod</span>\n-<span class=\"s2\">from </span><span class=\"s1\">functools </span><span class=\"s2\">import </span><span class=\"s1\">lru_cache</span>\n-<span class=\"s2\">from </span><span class=\"s1\">os</span><span class=\"s3\">.</span><span class=\"s1\">path </span><span class=\"s2\">import </span><span class=\"s1\">commonprefix</span>\n-<span class=\"s2\">from </span><span class=\"s1\">pathlib </span><span class=\"s2\">import </span><span class=\"s1\">Path</span>\n-<span class=\"s2\">from </span><span class=\"s1\">typing </span><span class=\"s2\">import </span><span class=\"s1\">Any</span><span class=\"s3\">, </span><span class=\"s1\">Dict</span><span class=\"s3\">, </span><span class=\"s1\">List</span><span class=\"s3\">, </span><span class=\"s1\">NamedTuple</span><span class=\"s3\">, </span><span class=\"s1\">Optional</span><span class=\"s3\">, </span><span class=\"s1\">Tuple</span>\n-\n-<span class=\"s2\">from </span><span class=\"s1\">pip</span><span class=\"s3\">.</span><span class=\"s1\">_vendor</span><span class=\"s3\">.</span><span class=\"s1\">requests</span><span class=\"s3\">.</span><span class=\"s1\">auth </span><span class=\"s2\">import </span><span class=\"s1\">AuthBase</span><span class=\"s3\">, </span><span class=\"s1\">HTTPBasicAuth</span>\n-<span class=\"s2\">from </span><span class=\"s1\">pip</span><span class=\"s3\">.</span><span class=\"s1\">_vendor</span><span class=\"s3\">.</span><span class=\"s1\">requests</span><span class=\"s3\">.</span><span class=\"s1\">models </span><span class=\"s2\">import </span><span class=\"s1\">Request</span><span class=\"s3\">, </span><span class=\"s1\">Response</span>\n-<span class=\"s2\">from </span><span class=\"s1\">pip</span><span class=\"s3\">.</span><span class=\"s1\">_vendor</span><span class=\"s3\">.</span><span class=\"s1\">requests</span><span class=\"s3\">.</span><span class=\"s1\">utils </span><span class=\"s2\">import </span><span class=\"s1\">get_netrc_auth</span>\n-\n-<span class=\"s2\">from </span><span class=\"s1\">pip</span><span class=\"s3\">.</span><span class=\"s1\">_internal</span><span class=\"s3\">.</span><span class=\"s1\">utils</span><span class=\"s3\">.</span><span class=\"s1\">logging </span><span class=\"s2\">import </span><span class=\"s1\">getLogger</span>\n-<span class=\"s2\">from </span><span class=\"s1\">pip</span><span class=\"s3\">.</span><span class=\"s1\">_internal</span><span class=\"s3\">.</span><span class=\"s1\">utils</span><span class=\"s3\">.</span><span class=\"s1\">misc </span><span class=\"s2\">import </span><span class=\"s3\">(</span>\n-    <span class=\"s1\">ask</span><span class=\"s3\">,</span>\n-    <span class=\"s1\">ask_input</span><span class=\"s3\">,</span>\n-    <span class=\"s1\">ask_password</span><span class=\"s3\">,</span>\n-    <span class=\"s1\">remove_auth_from_url</span><span class=\"s3\">,</span>\n-    <span class=\"s1\">split_auth_netloc_from_url</span><span class=\"s3\">,</span>\n-<span class=\"s3\">)</span>\n-<span class=\"s2\">from </span><span class=\"s1\">pip</span><span class=\"s3\">.</span><span class=\"s1\">_internal</span><span class=\"s3\">.</span><span class=\"s1\">vcs</span><span class=\"s3\">.</span><span class=\"s1\">versioncontrol </span><span class=\"s2\">import </span><span class=\"s1\">AuthInfo</span>\n-\n-<span class=\"s1\">logger </span><span class=\"s3\">= </span><span class=\"s1\">getLogger</span><span class=\"s3\">(</span><span class=\"s1\">__name__</span><span class=\"s3\">)</span>\n-\n-<span class=\"s1\">KEYRING_DISABLED </span><span class=\"s3\">= </span><span class=\"s2\">False</span>\n-\n-\n-<span class=\"s2\">class </span><span class=\"s1\">Credentials</span><span class=\"s3\">(</span><span class=\"s1\">NamedTuple</span><span class=\"s3\">):</span>\n-    <span class=\"s1\">url</span><span class=\"s3\">: </span><span class=\"s1\">str</span>\n-    <span class=\"s1\">username</span><span class=\"s3\">: </span><span class=\"s1\">str</span>\n-    <span class=\"s1\">password</span><span class=\"s3\">: </span><span class=\"s1\">str</span>\n-\n-\n-<span class=\"s2\">class </span><span class=\"s1\">KeyRingBaseProvider</span><span class=\"s3\">(</span><span class=\"s1\">ABC</span><span class=\"s3\">):</span>\n-    <span class=\"s0\">&quot;&quot;&quot;Keyring base provider interface&quot;&quot;&quot;</span>\n-\n-    <span class=\"s1\">has_keyring</span><span class=\"s3\">: </span><span class=\"s1\">bool</span>\n-\n-    <span class=\"s3\">@</span><span class=\"s1\">abstractmethod</span>\n-    <span class=\"s2\">def </span><span class=\"s1\">get_auth_info</span><span class=\"s3\">(</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">url</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">: </span><span class=\"s1\">Optional</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">]</span>\n-    <span class=\"s3\">) </span><span class=\"s1\">-&gt; Optional</span><span class=\"s3\">[</span><span class=\"s1\">AuthInfo</span><span class=\"s3\">]: ...</span>\n-\n-    <span class=\"s3\">@</span><span class=\"s1\">abstractmethod</span>\n-    <span class=\"s2\">def </span><span class=\"s1\">save_auth_info</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">url</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">password</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; </span><span class=\"s2\">None</span><span class=\"s3\">: ...</span>\n-\n-\n-<span class=\"s2\">class </span><span class=\"s1\">KeyRingNullProvider</span><span class=\"s3\">(</span><span class=\"s1\">KeyRingBaseProvider</span><span class=\"s3\">):</span>\n-    <span class=\"s0\">&quot;&quot;&quot;Keyring null provider&quot;&quot;&quot;</span>\n-\n-    <span class=\"s1\">has_keyring </span><span class=\"s3\">= </span><span class=\"s2\">False</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">get_auth_info</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">url</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">: </span><span class=\"s1\">Optional</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">]) </span><span class=\"s1\">-&gt; Optional</span><span class=\"s3\">[</span><span class=\"s1\">AuthInfo</span><span class=\"s3\">]:</span>\n-        <span class=\"s2\">return None</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">save_auth_info</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">url</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">password</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; </span><span class=\"s2\">None</span><span class=\"s3\">:</span>\n-        <span class=\"s2\">return None</span>\n-\n-\n-<span class=\"s2\">class </span><span class=\"s1\">KeyRingPythonProvider</span><span class=\"s3\">(</span><span class=\"s1\">KeyRingBaseProvider</span><span class=\"s3\">):</span>\n-    <span class=\"s0\">&quot;&quot;&quot;Keyring interface which uses locally imported `keyring`&quot;&quot;&quot;</span>\n-\n-    <span class=\"s1\">has_keyring </span><span class=\"s3\">= </span><span class=\"s2\">True</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">__init__</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; </span><span class=\"s2\">None</span><span class=\"s3\">:</span>\n-        <span class=\"s2\">import </span><span class=\"s1\">keyring</span>\n-\n-        <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring </span><span class=\"s3\">= </span><span class=\"s1\">keyring</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">get_auth_info</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">url</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">: </span><span class=\"s1\">Optional</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">]) </span><span class=\"s1\">-&gt; Optional</span><span class=\"s3\">[</span><span class=\"s1\">AuthInfo</span><span class=\"s3\">]:</span>\n-        <span class=\"s4\"># Support keyring's get_credential interface which supports getting</span>\n-        <span class=\"s4\"># credentials without a username. This is only available for</span>\n-        <span class=\"s4\"># keyring&gt;=15.2.0.</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">hasattr</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring</span><span class=\"s3\">, </span><span class=\"s5\">&quot;get_credential&quot;</span><span class=\"s3\">):</span>\n-            <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">debug</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Getting credentials from keyring for %s&quot;</span><span class=\"s3\">, </span><span class=\"s1\">url</span><span class=\"s3\">)</span>\n-            <span class=\"s1\">cred </span><span class=\"s3\">= </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring</span><span class=\"s3\">.</span><span class=\"s1\">get_credential</span><span class=\"s3\">(</span><span class=\"s1\">url</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">)</span>\n-            <span class=\"s2\">if </span><span class=\"s1\">cred </span><span class=\"s2\">is not None</span><span class=\"s3\">:</span>\n-                <span class=\"s2\">return </span><span class=\"s1\">cred</span><span class=\"s3\">.</span><span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">cred</span><span class=\"s3\">.</span><span class=\"s1\">password</span>\n-            <span class=\"s2\">return None</span>\n-\n-        <span class=\"s2\">if </span><span class=\"s1\">username </span><span class=\"s2\">is not None</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">debug</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Getting password from keyring for %s&quot;</span><span class=\"s3\">, </span><span class=\"s1\">url</span><span class=\"s3\">)</span>\n-            <span class=\"s1\">password </span><span class=\"s3\">= </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring</span><span class=\"s3\">.</span><span class=\"s1\">get_password</span><span class=\"s3\">(</span><span class=\"s1\">url</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">)</span>\n-            <span class=\"s2\">if </span><span class=\"s1\">password</span><span class=\"s3\">:</span>\n-                <span class=\"s2\">return </span><span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password</span>\n-        <span class=\"s2\">return None</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">save_auth_info</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">url</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">password</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; </span><span class=\"s2\">None</span><span class=\"s3\">:</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring</span><span class=\"s3\">.</span><span class=\"s1\">set_password</span><span class=\"s3\">(</span><span class=\"s1\">url</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password</span><span class=\"s3\">)</span>\n-\n-\n-<span class=\"s2\">class </span><span class=\"s1\">KeyRingCliProvider</span><span class=\"s3\">(</span><span class=\"s1\">KeyRingBaseProvider</span><span class=\"s3\">):</span>\n-    <span class=\"s0\">&quot;&quot;&quot;Provider which uses `keyring` cli \n- \n-    Instead of calling the keyring package installed alongside pip \n-    we call keyring on the command line which will enable pip to \n-    use which ever installation of keyring is available first in \n-    PATH. \n-    &quot;&quot;&quot;</span>\n-\n-    <span class=\"s1\">has_keyring </span><span class=\"s3\">= </span><span class=\"s2\">True</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">__init__</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">cmd</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; </span><span class=\"s2\">None</span><span class=\"s3\">:</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring </span><span class=\"s3\">= </span><span class=\"s1\">cmd</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">get_auth_info</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">url</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">: </span><span class=\"s1\">Optional</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">]) </span><span class=\"s1\">-&gt; Optional</span><span class=\"s3\">[</span><span class=\"s1\">AuthInfo</span><span class=\"s3\">]:</span>\n-        <span class=\"s4\"># This is the default implementation of keyring.get_credential</span>\n-        <span class=\"s4\"># https://github.com/jaraco/keyring/blob/\u001b[93m97689324abcf01bd1793d49063e7ca01e03d7d07\u001b[0m/keyring/backend.py#L134-L139</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">username </span><span class=\"s2\">is not None</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">password </span><span class=\"s3\">= </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_get_password</span><span class=\"s3\">(</span><span class=\"s1\">url</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">)</span>\n-            <span class=\"s2\">if </span><span class=\"s1\">password </span><span class=\"s2\">is not None</span><span class=\"s3\">:</span>\n-                <span class=\"s2\">return </span><span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password</span>\n-        <span class=\"s2\">return None</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">save_auth_info</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">url</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">password</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; </span><span class=\"s2\">None</span><span class=\"s3\">:</span>\n-        <span class=\"s2\">return </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_set_password</span><span class=\"s3\">(</span><span class=\"s1\">url</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password</span><span class=\"s3\">)</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">_get_password</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">service_name</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; Optional</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">]:</span>\n-        <span class=\"s0\">&quot;&quot;&quot;Mirror the implementation of keyring.get_password using cli&quot;&quot;&quot;</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring </span><span class=\"s2\">is None</span><span class=\"s3\">:</span>\n-            <span class=\"s2\">return None</span>\n-\n-        <span class=\"s1\">cmd </span><span class=\"s3\">= [</span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring</span><span class=\"s3\">, </span><span class=\"s5\">&quot;get&quot;</span><span class=\"s3\">, </span><span class=\"s1\">service_name</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">]</span>\n-        <span class=\"s1\">env </span><span class=\"s3\">= </span><span class=\"s1\">os</span><span class=\"s3\">.</span><span class=\"s1\">environ</span><span class=\"s3\">.</span><span class=\"s1\">copy</span><span class=\"s3\">()</span>\n-        <span class=\"s1\">env</span><span class=\"s3\">[</span><span class=\"s5\">&quot;PYTHONIOENCODING&quot;</span><span class=\"s3\">] = </span><span class=\"s5\">&quot;utf-8&quot;</span>\n-        <span class=\"s1\">res </span><span class=\"s3\">= </span><span class=\"s1\">subprocess</span><span class=\"s3\">.</span><span class=\"s1\">run</span><span class=\"s3\">(</span>\n-            <span class=\"s1\">cmd</span><span class=\"s3\">,</span>\n-            <span class=\"s1\">stdin</span><span class=\"s3\">=</span><span class=\"s1\">subprocess</span><span class=\"s3\">.</span><span class=\"s1\">DEVNULL</span><span class=\"s3\">,</span>\n-            <span class=\"s1\">stdout</span><span class=\"s3\">=</span><span class=\"s1\">subprocess</span><span class=\"s3\">.</span><span class=\"s1\">PIPE</span><span class=\"s3\">,</span>\n-            <span class=\"s1\">env</span><span class=\"s3\">=</span><span class=\"s1\">env</span><span class=\"s3\">,</span>\n-        <span class=\"s3\">)</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">res</span><span class=\"s3\">.</span><span class=\"s1\">returncode</span><span class=\"s3\">:</span>\n-            <span class=\"s2\">return None</span>\n-        <span class=\"s2\">return </span><span class=\"s1\">res</span><span class=\"s3\">.</span><span class=\"s1\">stdout</span><span class=\"s3\">.</span><span class=\"s1\">decode</span><span class=\"s3\">(</span><span class=\"s5\">&quot;utf-8&quot;</span><span class=\"s3\">).</span><span class=\"s1\">strip</span><span class=\"s3\">(</span><span class=\"s1\">os</span><span class=\"s3\">.</span><span class=\"s1\">linesep</span><span class=\"s3\">)</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">_set_password</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">service_name</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">password</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; </span><span class=\"s2\">None</span><span class=\"s3\">:</span>\n-        <span class=\"s0\">&quot;&quot;&quot;Mirror the implementation of keyring.set_password using cli&quot;&quot;&quot;</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring </span><span class=\"s2\">is None</span><span class=\"s3\">:</span>\n-            <span class=\"s2\">return None</span>\n-        <span class=\"s1\">env </span><span class=\"s3\">= </span><span class=\"s1\">os</span><span class=\"s3\">.</span><span class=\"s1\">environ</span><span class=\"s3\">.</span><span class=\"s1\">copy</span><span class=\"s3\">()</span>\n-        <span class=\"s1\">env</span><span class=\"s3\">[</span><span class=\"s5\">&quot;PYTHONIOENCODING&quot;</span><span class=\"s3\">] = </span><span class=\"s5\">&quot;utf-8&quot;</span>\n-        <span class=\"s1\">subprocess</span><span class=\"s3\">.</span><span class=\"s1\">run</span><span class=\"s3\">(</span>\n-            <span class=\"s3\">[</span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring</span><span class=\"s3\">, </span><span class=\"s5\">&quot;set&quot;</span><span class=\"s3\">, </span><span class=\"s1\">service_name</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">],</span>\n-            <span class=\"s1\">input</span><span class=\"s3\">=</span><span class=\"s5\">f&quot;</span><span class=\"s2\">{</span><span class=\"s1\">password</span><span class=\"s2\">}{</span><span class=\"s1\">os</span><span class=\"s3\">.</span><span class=\"s1\">linesep</span><span class=\"s2\">}</span><span class=\"s5\">&quot;</span><span class=\"s3\">.</span><span class=\"s1\">encode</span><span class=\"s3\">(),</span>\n-            <span class=\"s1\">env</span><span class=\"s3\">=</span><span class=\"s1\">env</span><span class=\"s3\">,</span>\n-            <span class=\"s1\">check</span><span class=\"s3\">=</span><span class=\"s2\">True</span><span class=\"s3\">,</span>\n-        <span class=\"s3\">)</span>\n-        <span class=\"s2\">return None</span>\n-\n-\n-<span class=\"s3\">@</span><span class=\"s1\">lru_cache</span><span class=\"s3\">(</span><span class=\"s1\">maxsize</span><span class=\"s3\">=</span><span class=\"s2\">None</span><span class=\"s3\">)</span>\n-<span class=\"s2\">def </span><span class=\"s1\">get_keyring_provider</span><span class=\"s3\">(</span><span class=\"s1\">provider</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; KeyRingBaseProvider</span><span class=\"s3\">:</span>\n-    <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">verbose</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Keyring provider requested: %s&quot;</span><span class=\"s3\">, </span><span class=\"s1\">provider</span><span class=\"s3\">)</span>\n-\n-    <span class=\"s4\"># keyring has previously failed and been disabled</span>\n-    <span class=\"s2\">if </span><span class=\"s1\">KEYRING_DISABLED</span><span class=\"s3\">:</span>\n-        <span class=\"s1\">provider </span><span class=\"s3\">= </span><span class=\"s5\">&quot;disabled&quot;</span>\n-    <span class=\"s2\">if </span><span class=\"s1\">provider </span><span class=\"s2\">in </span><span class=\"s3\">[</span><span class=\"s5\">&quot;import&quot;</span><span class=\"s3\">, </span><span class=\"s5\">&quot;auto&quot;</span><span class=\"s3\">]:</span>\n-        <span class=\"s2\">try</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">impl </span><span class=\"s3\">= </span><span class=\"s1\">KeyRingPythonProvider</span><span class=\"s3\">()</span>\n-            <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">verbose</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Keyring provider set: import&quot;</span><span class=\"s3\">)</span>\n-            <span class=\"s2\">return </span><span class=\"s1\">impl</span>\n-        <span class=\"s2\">except </span><span class=\"s1\">ImportError</span><span class=\"s3\">:</span>\n-            <span class=\"s2\">pass</span>\n-        <span class=\"s2\">except </span><span class=\"s1\">Exception </span><span class=\"s2\">as </span><span class=\"s1\">exc</span><span class=\"s3\">:</span>\n-            <span class=\"s4\"># In the event of an unexpected exception</span>\n-            <span class=\"s4\"># we should warn the user</span>\n-            <span class=\"s1\">msg </span><span class=\"s3\">= </span><span class=\"s5\">&quot;Installed copy of keyring fails with exception %s&quot;</span>\n-            <span class=\"s2\">if </span><span class=\"s1\">provider </span><span class=\"s3\">== </span><span class=\"s5\">&quot;auto&quot;</span><span class=\"s3\">:</span>\n-                <span class=\"s1\">msg </span><span class=\"s3\">= </span><span class=\"s1\">msg </span><span class=\"s3\">+ </span><span class=\"s5\">&quot;, trying to find a keyring executable as a fallback&quot;</span>\n-            <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">warning</span><span class=\"s3\">(</span><span class=\"s1\">msg</span><span class=\"s3\">, </span><span class=\"s1\">exc</span><span class=\"s3\">, </span><span class=\"s1\">exc_info</span><span class=\"s3\">=</span><span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">isEnabledFor</span><span class=\"s3\">(</span><span class=\"s1\">logging</span><span class=\"s3\">.</span><span class=\"s1\">DEBUG</span><span class=\"s3\">))</span>\n-    <span class=\"s2\">if </span><span class=\"s1\">provider </span><span class=\"s2\">in </span><span class=\"s3\">[</span><span class=\"s5\">&quot;subprocess&quot;</span><span class=\"s3\">, </span><span class=\"s5\">&quot;auto&quot;</span><span class=\"s3\">]:</span>\n-        <span class=\"s1\">cli </span><span class=\"s3\">= </span><span class=\"s1\">shutil</span><span class=\"s3\">.</span><span class=\"s1\">which</span><span class=\"s3\">(</span><span class=\"s5\">&quot;keyring&quot;</span><span class=\"s3\">)</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">cli </span><span class=\"s2\">and </span><span class=\"s1\">cli</span><span class=\"s3\">.</span><span class=\"s1\">startswith</span><span class=\"s3\">(</span><span class=\"s1\">sysconfig</span><span class=\"s3\">.</span><span class=\"s1\">get_path</span><span class=\"s3\">(</span><span class=\"s5\">&quot;scripts&quot;</span><span class=\"s3\">)):</span>\n-            <span class=\"s4\"># all code within this function is stolen from shutil.which implementation</span>\n-            <span class=\"s3\">@</span><span class=\"s1\">typing</span><span class=\"s3\">.</span><span class=\"s1\">no_type_check</span>\n-            <span class=\"s2\">def </span><span class=\"s1\">PATH_as_shutil_which_determines_it</span><span class=\"s3\">() </span><span class=\"s1\">-&gt; str</span><span class=\"s3\">:</span>\n-                <span class=\"s1\">path </span><span class=\"s3\">= </span><span class=\"s1\">os</span><span class=\"s3\">.</span><span class=\"s1\">environ</span><span class=\"s3\">.</span><span class=\"s1\">get</span><span class=\"s3\">(</span><span class=\"s5\">&quot;PATH&quot;</span><span class=\"s3\">, </span><span class=\"s2\">None</span><span class=\"s3\">)</span>\n-                <span class=\"s2\">if </span><span class=\"s1\">path </span><span class=\"s2\">is None</span><span class=\"s3\">:</span>\n-                    <span class=\"s2\">try</span><span class=\"s3\">:</span>\n-                        <span class=\"s1\">path </span><span class=\"s3\">= </span><span class=\"s1\">os</span><span class=\"s3\">.</span><span class=\"s1\">confstr</span><span class=\"s3\">(</span><span class=\"s5\">&quot;CS_PATH&quot;</span><span class=\"s3\">)</span>\n-                    <span class=\"s2\">except </span><span class=\"s3\">(</span><span class=\"s1\">AttributeError</span><span class=\"s3\">, </span><span class=\"s1\">ValueError</span><span class=\"s3\">):</span>\n-                        <span class=\"s4\"># os.confstr() or CS_PATH is not available</span>\n-                        <span class=\"s1\">path </span><span class=\"s3\">= </span><span class=\"s1\">os</span><span class=\"s3\">.</span><span class=\"s1\">defpath</span>\n-                <span class=\"s4\"># bpo-35755: Don't use os.defpath if the PATH environment variable is</span>\n-                <span class=\"s4\"># set to an empty string</span>\n-\n-                <span class=\"s2\">return </span><span class=\"s1\">path</span>\n-\n-            <span class=\"s1\">scripts </span><span class=\"s3\">= </span><span class=\"s1\">Path</span><span class=\"s3\">(</span><span class=\"s1\">sysconfig</span><span class=\"s3\">.</span><span class=\"s1\">get_path</span><span class=\"s3\">(</span><span class=\"s5\">&quot;scripts&quot;</span><span class=\"s3\">))</span>\n-\n-            <span class=\"s1\">paths </span><span class=\"s3\">= []</span>\n-            <span class=\"s2\">for </span><span class=\"s1\">path </span><span class=\"s2\">in </span><span class=\"s1\">PATH_as_shutil_which_determines_it</span><span class=\"s3\">().</span><span class=\"s1\">split</span><span class=\"s3\">(</span><span class=\"s1\">os</span><span class=\"s3\">.</span><span class=\"s1\">pathsep</span><span class=\"s3\">):</span>\n-                <span class=\"s1\">p </span><span class=\"s3\">= </span><span class=\"s1\">Path</span><span class=\"s3\">(</span><span class=\"s1\">path</span><span class=\"s3\">)</span>\n-                <span class=\"s2\">try</span><span class=\"s3\">:</span>\n-                    <span class=\"s2\">if not </span><span class=\"s1\">p</span><span class=\"s3\">.</span><span class=\"s1\">samefile</span><span class=\"s3\">(</span><span class=\"s1\">scripts</span><span class=\"s3\">):</span>\n-                        <span class=\"s1\">paths</span><span class=\"s3\">.</span><span class=\"s1\">append</span><span class=\"s3\">(</span><span class=\"s1\">path</span><span class=\"s3\">)</span>\n-                <span class=\"s2\">except </span><span class=\"s1\">FileNotFoundError</span><span class=\"s3\">:</span>\n-                    <span class=\"s2\">pass</span>\n-\n-            <span class=\"s1\">path </span><span class=\"s3\">= </span><span class=\"s1\">os</span><span class=\"s3\">.</span><span class=\"s1\">pathsep</span><span class=\"s3\">.</span><span class=\"s1\">join</span><span class=\"s3\">(</span><span class=\"s1\">paths</span><span class=\"s3\">)</span>\n-\n-            <span class=\"s1\">cli </span><span class=\"s3\">= </span><span class=\"s1\">shutil</span><span class=\"s3\">.</span><span class=\"s1\">which</span><span class=\"s3\">(</span><span class=\"s5\">&quot;keyring&quot;</span><span class=\"s3\">, </span><span class=\"s1\">path</span><span class=\"s3\">=</span><span class=\"s1\">path</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s2\">if </span><span class=\"s1\">cli</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">verbose</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Keyring provider set: subprocess with executable %s&quot;</span><span class=\"s3\">, </span><span class=\"s1\">cli</span><span class=\"s3\">)</span>\n-            <span class=\"s2\">return </span><span class=\"s1\">KeyRingCliProvider</span><span class=\"s3\">(</span><span class=\"s1\">cli</span><span class=\"s3\">)</span>\n-\n-    <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">verbose</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Keyring provider set: disabled&quot;</span><span class=\"s3\">)</span>\n-    <span class=\"s2\">return </span><span class=\"s1\">KeyRingNullProvider</span><span class=\"s3\">()</span>\n-\n-\n-<span class=\"s2\">class </span><span class=\"s1\">MultiDomainBasicAuth</span><span class=\"s3\">(</span><span class=\"s1\">AuthBase</span><span class=\"s3\">):</span>\n-    <span class=\"s2\">def </span><span class=\"s1\">__init__</span><span class=\"s3\">(</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">,</span>\n-        <span class=\"s1\">prompting</span><span class=\"s3\">: </span><span class=\"s1\">bool </span><span class=\"s3\">= </span><span class=\"s2\">True</span><span class=\"s3\">,</span>\n-        <span class=\"s1\">index_urls</span><span class=\"s3\">: </span><span class=\"s1\">Optional</span><span class=\"s3\">[</span><span class=\"s1\">List</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">]] = </span><span class=\"s2\">None</span><span class=\"s3\">,</span>\n-        <span class=\"s1\">keyring_provider</span><span class=\"s3\">: </span><span class=\"s1\">str </span><span class=\"s3\">= </span><span class=\"s5\">&quot;auto&quot;</span><span class=\"s3\">,</span>\n-    <span class=\"s3\">) </span><span class=\"s1\">-&gt; </span><span class=\"s2\">None</span><span class=\"s3\">:</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">prompting </span><span class=\"s3\">= </span><span class=\"s1\">prompting</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">index_urls </span><span class=\"s3\">= </span><span class=\"s1\">index_urls</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring_provider </span><span class=\"s3\">= </span><span class=\"s1\">keyring_provider  </span><span class=\"s4\"># type: ignore[assignment]</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">passwords</span><span class=\"s3\">: </span><span class=\"s1\">Dict</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">AuthInfo</span><span class=\"s3\">] = {}</span>\n-        <span class=\"s4\"># When the user is prompted to enter credentials and keyring is</span>\n-        <span class=\"s4\"># available, we will offer to save them. If the user accepts,</span>\n-        <span class=\"s4\"># this value is set to the credentials they entered. After the</span>\n-        <span class=\"s4\"># request authenticates, the caller should call</span>\n-        <span class=\"s4\"># ``save_credentials`` to save these.</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_credentials_to_save</span><span class=\"s3\">: </span><span class=\"s1\">Optional</span><span class=\"s3\">[</span><span class=\"s1\">Credentials</span><span class=\"s3\">] = </span><span class=\"s2\">None</span>\n-\n-    <span class=\"s3\">@</span><span class=\"s1\">property</span>\n-    <span class=\"s2\">def </span><span class=\"s1\">keyring_provider</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; KeyRingBaseProvider</span><span class=\"s3\">:</span>\n-        <span class=\"s2\">return </span><span class=\"s1\">get_keyring_provider</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_keyring_provider</span><span class=\"s3\">)</span>\n-\n-    <span class=\"s3\">@</span><span class=\"s1\">keyring_provider</span><span class=\"s3\">.</span><span class=\"s1\">setter</span>\n-    <span class=\"s2\">def </span><span class=\"s1\">keyring_provider</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">provider</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; </span><span class=\"s2\">None</span><span class=\"s3\">:</span>\n-        <span class=\"s4\"># The free function get_keyring_provider has been decorated with</span>\n-        <span class=\"s4\"># functools.cache. If an exception occurs in get_keyring_auth that</span>\n-        <span class=\"s4\"># cache will be cleared and keyring disabled, take that into account</span>\n-        <span class=\"s4\"># if you want to remove this indirection.</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_keyring_provider </span><span class=\"s3\">= </span><span class=\"s1\">provider</span>\n-\n-    <span class=\"s3\">@</span><span class=\"s1\">property</span>\n-    <span class=\"s2\">def </span><span class=\"s1\">use_keyring</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; bool</span><span class=\"s3\">:</span>\n-        <span class=\"s4\"># We won't use keyring when --no-input is passed unless</span>\n-        <span class=\"s4\"># a specific provider is requested because it might require</span>\n-        <span class=\"s4\"># user interaction</span>\n-        <span class=\"s2\">return </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">prompting </span><span class=\"s2\">or </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_keyring_provider </span><span class=\"s2\">not in </span><span class=\"s3\">[</span><span class=\"s5\">&quot;auto&quot;</span><span class=\"s3\">, </span><span class=\"s5\">&quot;disabled&quot;</span><span class=\"s3\">]</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">_get_keyring_auth</span><span class=\"s3\">(</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">,</span>\n-        <span class=\"s1\">url</span><span class=\"s3\">: </span><span class=\"s1\">Optional</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">],</span>\n-        <span class=\"s1\">username</span><span class=\"s3\">: </span><span class=\"s1\">Optional</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">],</span>\n-    <span class=\"s3\">) </span><span class=\"s1\">-&gt; Optional</span><span class=\"s3\">[</span><span class=\"s1\">AuthInfo</span><span class=\"s3\">]:</span>\n-        <span class=\"s0\">&quot;&quot;&quot;Return the tuple auth for a given url from keyring.&quot;&quot;&quot;</span>\n-        <span class=\"s4\"># Do nothing if no url was provided</span>\n-        <span class=\"s2\">if not </span><span class=\"s1\">url</span><span class=\"s3\">:</span>\n-            <span class=\"s2\">return None</span>\n-\n-        <span class=\"s2\">try</span><span class=\"s3\">:</span>\n-            <span class=\"s2\">return </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring_provider</span><span class=\"s3\">.</span><span class=\"s1\">get_auth_info</span><span class=\"s3\">(</span><span class=\"s1\">url</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">)</span>\n-        <span class=\"s2\">except </span><span class=\"s1\">Exception </span><span class=\"s2\">as </span><span class=\"s1\">exc</span><span class=\"s3\">:</span>\n-            <span class=\"s4\"># Log the full exception (with stacktrace) at debug, so it'll only</span>\n-            <span class=\"s4\"># show up when running in verbose mode.</span>\n-            <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">debug</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Keyring is skipped due to an exception&quot;</span><span class=\"s3\">, </span><span class=\"s1\">exc_info</span><span class=\"s3\">=</span><span class=\"s2\">True</span><span class=\"s3\">)</span>\n-            <span class=\"s4\"># Always log a shortened version of the exception.</span>\n-            <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">warning</span><span class=\"s3\">(</span>\n-                <span class=\"s5\">&quot;Keyring is skipped due to an exception: %s&quot;</span><span class=\"s3\">,</span>\n-                <span class=\"s1\">str</span><span class=\"s3\">(</span><span class=\"s1\">exc</span><span class=\"s3\">),</span>\n-            <span class=\"s3\">)</span>\n-            <span class=\"s2\">global </span><span class=\"s1\">KEYRING_DISABLED</span>\n-            <span class=\"s1\">KEYRING_DISABLED </span><span class=\"s3\">= </span><span class=\"s2\">True</span>\n-            <span class=\"s1\">get_keyring_provider</span><span class=\"s3\">.</span><span class=\"s1\">cache_clear</span><span class=\"s3\">()</span>\n-            <span class=\"s2\">return None</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">_get_index_url</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">url</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; Optional</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">]:</span>\n-        <span class=\"s0\">&quot;&quot;&quot;Return the original index URL matching the requested URL. \n- \n-        Cached or dynamically generated credentials may work against \n-        the original index URL rather than just the netloc. \n- \n-        The provided url should have had its username and password \n-        removed already. If the original index url had credentials then \n-        they will be included in the return value. \n- \n-        Returns None if no matching index was found, or if --no-index \n-        was specified by the user. \n-        &quot;&quot;&quot;</span>\n-        <span class=\"s2\">if not </span><span class=\"s1\">url </span><span class=\"s2\">or not </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">index_urls</span><span class=\"s3\">:</span>\n-            <span class=\"s2\">return None</span>\n-\n-        <span class=\"s1\">url </span><span class=\"s3\">= </span><span class=\"s1\">remove_auth_from_url</span><span class=\"s3\">(</span><span class=\"s1\">url</span><span class=\"s3\">).</span><span class=\"s1\">rstrip</span><span class=\"s3\">(</span><span class=\"s5\">&quot;/&quot;</span><span class=\"s3\">) + </span><span class=\"s5\">&quot;/&quot;</span>\n-        <span class=\"s1\">parsed_url </span><span class=\"s3\">= </span><span class=\"s1\">urllib</span><span class=\"s3\">.</span><span class=\"s1\">parse</span><span class=\"s3\">.</span><span class=\"s1\">urlsplit</span><span class=\"s3\">(</span><span class=\"s1\">url</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s1\">candidates </span><span class=\"s3\">= []</span>\n-\n-        <span class=\"s2\">for </span><span class=\"s1\">index </span><span class=\"s2\">in </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">index_urls</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">index </span><span class=\"s3\">= </span><span class=\"s1\">index</span><span class=\"s3\">.</span><span class=\"s1\">rstrip</span><span class=\"s3\">(</span><span class=\"s5\">&quot;/&quot;</span><span class=\"s3\">) + </span><span class=\"s5\">&quot;/&quot;</span>\n-            <span class=\"s1\">parsed_index </span><span class=\"s3\">= </span><span class=\"s1\">urllib</span><span class=\"s3\">.</span><span class=\"s1\">parse</span><span class=\"s3\">.</span><span class=\"s1\">urlsplit</span><span class=\"s3\">(</span><span class=\"s1\">remove_auth_from_url</span><span class=\"s3\">(</span><span class=\"s1\">index</span><span class=\"s3\">))</span>\n-            <span class=\"s2\">if </span><span class=\"s1\">parsed_url </span><span class=\"s3\">== </span><span class=\"s1\">parsed_index</span><span class=\"s3\">:</span>\n-                <span class=\"s2\">return </span><span class=\"s1\">index</span>\n-\n-            <span class=\"s2\">if </span><span class=\"s1\">parsed_url</span><span class=\"s3\">.</span><span class=\"s1\">netloc </span><span class=\"s3\">!= </span><span class=\"s1\">parsed_index</span><span class=\"s3\">.</span><span class=\"s1\">netloc</span><span class=\"s3\">:</span>\n-                <span class=\"s2\">continue</span>\n-\n-            <span class=\"s1\">candidate </span><span class=\"s3\">= </span><span class=\"s1\">urllib</span><span class=\"s3\">.</span><span class=\"s1\">parse</span><span class=\"s3\">.</span><span class=\"s1\">urlsplit</span><span class=\"s3\">(</span><span class=\"s1\">index</span><span class=\"s3\">)</span>\n-            <span class=\"s1\">candidates</span><span class=\"s3\">.</span><span class=\"s1\">append</span><span class=\"s3\">(</span><span class=\"s1\">candidate</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s2\">if not </span><span class=\"s1\">candidates</span><span class=\"s3\">:</span>\n-            <span class=\"s2\">return None</span>\n-\n-        <span class=\"s1\">candidates</span><span class=\"s3\">.</span><span class=\"s1\">sort</span><span class=\"s3\">(</span>\n-            <span class=\"s1\">reverse</span><span class=\"s3\">=</span><span class=\"s2\">True</span><span class=\"s3\">,</span>\n-            <span class=\"s1\">key</span><span class=\"s3\">=</span><span class=\"s2\">lambda </span><span class=\"s1\">candidate</span><span class=\"s3\">: </span><span class=\"s1\">commonprefix</span><span class=\"s3\">(</span>\n-                <span class=\"s3\">[</span>\n-                    <span class=\"s1\">parsed_url</span><span class=\"s3\">.</span><span class=\"s1\">path</span><span class=\"s3\">,</span>\n-                    <span class=\"s1\">candidate</span><span class=\"s3\">.</span><span class=\"s1\">path</span><span class=\"s3\">,</span>\n-                <span class=\"s3\">]</span>\n-            <span class=\"s3\">).</span><span class=\"s1\">rfind</span><span class=\"s3\">(</span><span class=\"s5\">&quot;/&quot;</span><span class=\"s3\">),</span>\n-        <span class=\"s3\">)</span>\n-\n-        <span class=\"s2\">return </span><span class=\"s1\">urllib</span><span class=\"s3\">.</span><span class=\"s1\">parse</span><span class=\"s3\">.</span><span class=\"s1\">urlunsplit</span><span class=\"s3\">(</span><span class=\"s1\">candidates</span><span class=\"s3\">[</span><span class=\"s6\">0</span><span class=\"s3\">])</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">_get_new_credentials</span><span class=\"s3\">(</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">,</span>\n-        <span class=\"s1\">original_url</span><span class=\"s3\">: </span><span class=\"s1\">str</span><span class=\"s3\">,</span>\n-        <span class=\"s3\">*,</span>\n-        <span class=\"s1\">allow_netrc</span><span class=\"s3\">: </span><span class=\"s1\">bool </span><span class=\"s3\">= </span><span class=\"s2\">True</span><span class=\"s3\">,</span>\n-        <span class=\"s1\">allow_keyring</span><span class=\"s3\">: </span><span class=\"s1\">bool </span><span class=\"s3\">= </span><span class=\"s2\">False</span><span class=\"s3\">,</span>\n-    <span class=\"s3\">) </span><span class=\"s1\">-&gt; AuthInfo</span><span class=\"s3\">:</span>\n-        <span class=\"s0\">&quot;&quot;&quot;Find and return credentials for the specified URL.&quot;&quot;&quot;</span>\n-        <span class=\"s4\"># Split the credentials and netloc from the url.</span>\n-        <span class=\"s1\">url</span><span class=\"s3\">, </span><span class=\"s1\">netloc</span><span class=\"s3\">, </span><span class=\"s1\">url_user_password </span><span class=\"s3\">= </span><span class=\"s1\">split_auth_netloc_from_url</span><span class=\"s3\">(</span>\n-            <span class=\"s1\">original_url</span><span class=\"s3\">,</span>\n-        <span class=\"s3\">)</span>\n-\n-        <span class=\"s4\"># Start with the credentials embedded in the url</span>\n-        <span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password </span><span class=\"s3\">= </span><span class=\"s1\">url_user_password</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">username </span><span class=\"s2\">is not None and </span><span class=\"s1\">password </span><span class=\"s2\">is not None</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">debug</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Found credentials in url for %s&quot;</span><span class=\"s3\">, </span><span class=\"s1\">netloc</span><span class=\"s3\">)</span>\n-            <span class=\"s2\">return </span><span class=\"s1\">url_user_password</span>\n-\n-        <span class=\"s4\"># Find a matching index url for this request</span>\n-        <span class=\"s1\">index_url </span><span class=\"s3\">= </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_get_index_url</span><span class=\"s3\">(</span><span class=\"s1\">url</span><span class=\"s3\">)</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">index_url</span><span class=\"s3\">:</span>\n-            <span class=\"s4\"># Split the credentials from the url.</span>\n-            <span class=\"s1\">index_info </span><span class=\"s3\">= </span><span class=\"s1\">split_auth_netloc_from_url</span><span class=\"s3\">(</span><span class=\"s1\">index_url</span><span class=\"s3\">)</span>\n-            <span class=\"s2\">if </span><span class=\"s1\">index_info</span><span class=\"s3\">:</span>\n-                <span class=\"s1\">index_url</span><span class=\"s3\">, </span><span class=\"s1\">_</span><span class=\"s3\">, </span><span class=\"s1\">index_url_user_password </span><span class=\"s3\">= </span><span class=\"s1\">index_info</span>\n-                <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">debug</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Found index url %s&quot;</span><span class=\"s3\">, </span><span class=\"s1\">index_url</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s4\"># If an index URL was found, try its embedded credentials</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">index_url </span><span class=\"s2\">and </span><span class=\"s1\">index_url_user_password</span><span class=\"s3\">[</span><span class=\"s6\">0</span><span class=\"s3\">] </span><span class=\"s2\">is not None</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password </span><span class=\"s3\">= </span><span class=\"s1\">index_url_user_password</span>\n-            <span class=\"s2\">if </span><span class=\"s1\">username </span><span class=\"s2\">is not None and </span><span class=\"s1\">password </span><span class=\"s2\">is not None</span><span class=\"s3\">:</span>\n-                <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">debug</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Found credentials in index url for %s&quot;</span><span class=\"s3\">, </span><span class=\"s1\">netloc</span><span class=\"s3\">)</span>\n-                <span class=\"s2\">return </span><span class=\"s1\">index_url_user_password</span>\n-\n-        <span class=\"s4\"># Get creds from netrc if we still don't have them</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">allow_netrc</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">netrc_auth </span><span class=\"s3\">= </span><span class=\"s1\">get_netrc_auth</span><span class=\"s3\">(</span><span class=\"s1\">original_url</span><span class=\"s3\">)</span>\n-            <span class=\"s2\">if </span><span class=\"s1\">netrc_auth</span><span class=\"s3\">:</span>\n-                <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">debug</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Found credentials in netrc for %s&quot;</span><span class=\"s3\">, </span><span class=\"s1\">netloc</span><span class=\"s3\">)</span>\n-                <span class=\"s2\">return </span><span class=\"s1\">netrc_auth</span>\n-\n-        <span class=\"s4\"># If we don't have a password and keyring is available, use it.</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">allow_keyring</span><span class=\"s3\">:</span>\n-            <span class=\"s4\"># The index url is more specific than the netloc, so try it first</span>\n-            <span class=\"s4\"># fmt: off</span>\n-            <span class=\"s1\">kr_auth </span><span class=\"s3\">= (</span>\n-                <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_get_keyring_auth</span><span class=\"s3\">(</span><span class=\"s1\">index_url</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">) </span><span class=\"s2\">or</span>\n-                <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_get_keyring_auth</span><span class=\"s3\">(</span><span class=\"s1\">netloc</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">)</span>\n-            <span class=\"s3\">)</span>\n-            <span class=\"s4\"># fmt: on</span>\n-            <span class=\"s2\">if </span><span class=\"s1\">kr_auth</span><span class=\"s3\">:</span>\n-                <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">debug</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Found credentials in keyring for %s&quot;</span><span class=\"s3\">, </span><span class=\"s1\">netloc</span><span class=\"s3\">)</span>\n-                <span class=\"s2\">return </span><span class=\"s1\">kr_auth</span>\n-\n-        <span class=\"s2\">return </span><span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">_get_url_and_credentials</span><span class=\"s3\">(</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">original_url</span><span class=\"s3\">: </span><span class=\"s1\">str</span>\n-    <span class=\"s3\">) </span><span class=\"s1\">-&gt; Tuple</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">, </span><span class=\"s1\">Optional</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">], </span><span class=\"s1\">Optional</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">]]:</span>\n-        <span class=\"s0\">&quot;&quot;&quot;Return the credentials to use for the provided URL. \n- \n-        If allowed, netrc and keyring may be used to obtain the \n-        correct credentials. \n- \n-        Returns (url_without_credentials, username, password). Note \n-        that even if the original URL contains credentials, this \n-        function may return a different username and password. \n-        &quot;&quot;&quot;</span>\n-        <span class=\"s1\">url</span><span class=\"s3\">, </span><span class=\"s1\">netloc</span><span class=\"s3\">, </span><span class=\"s1\">_ </span><span class=\"s3\">= </span><span class=\"s1\">split_auth_netloc_from_url</span><span class=\"s3\">(</span><span class=\"s1\">original_url</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s4\"># Try to get credentials from original url</span>\n-        <span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password </span><span class=\"s3\">= </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_get_new_credentials</span><span class=\"s3\">(</span><span class=\"s1\">original_url</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s4\"># If credentials not found, use any stored credentials for this netloc.</span>\n-        <span class=\"s4\"># Do this if either the username or the password is missing.</span>\n-        <span class=\"s4\"># This accounts for the situation in which the user has specified</span>\n-        <span class=\"s4\"># the username in the index url, but the password comes from keyring.</span>\n-        <span class=\"s2\">if </span><span class=\"s3\">(</span><span class=\"s1\">username </span><span class=\"s2\">is None or </span><span class=\"s1\">password </span><span class=\"s2\">is None</span><span class=\"s3\">) </span><span class=\"s2\">and </span><span class=\"s1\">netloc </span><span class=\"s2\">in </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">passwords</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">un</span><span class=\"s3\">, </span><span class=\"s1\">pw </span><span class=\"s3\">= </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">passwords</span><span class=\"s3\">[</span><span class=\"s1\">netloc</span><span class=\"s3\">]</span>\n-            <span class=\"s4\"># It is possible that the cached credentials are for a different username,</span>\n-            <span class=\"s4\"># in which case the cache should be ignored.</span>\n-            <span class=\"s2\">if </span><span class=\"s1\">username </span><span class=\"s2\">is None or </span><span class=\"s1\">username </span><span class=\"s3\">== </span><span class=\"s1\">un</span><span class=\"s3\">:</span>\n-                <span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password </span><span class=\"s3\">= </span><span class=\"s1\">un</span><span class=\"s3\">, </span><span class=\"s1\">pw</span>\n-\n-        <span class=\"s2\">if </span><span class=\"s1\">username </span><span class=\"s2\">is not None or </span><span class=\"s1\">password </span><span class=\"s2\">is not None</span><span class=\"s3\">:</span>\n-            <span class=\"s4\"># Convert the username and password if they're None, so that</span>\n-            <span class=\"s4\"># this netloc will show up as &quot;cached&quot; in the conditional above.</span>\n-            <span class=\"s4\"># Further, HTTPBasicAuth doesn't accept None, so it makes sense to</span>\n-            <span class=\"s4\"># cache the value that is going to be used.</span>\n-            <span class=\"s1\">username </span><span class=\"s3\">= </span><span class=\"s1\">username </span><span class=\"s2\">or </span><span class=\"s5\">&quot;&quot;</span>\n-            <span class=\"s1\">password </span><span class=\"s3\">= </span><span class=\"s1\">password </span><span class=\"s2\">or </span><span class=\"s5\">&quot;&quot;</span>\n-\n-            <span class=\"s4\"># Store any acquired credentials.</span>\n-            <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">passwords</span><span class=\"s3\">[</span><span class=\"s1\">netloc</span><span class=\"s3\">] = (</span><span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s2\">assert </span><span class=\"s3\">(</span>\n-            <span class=\"s4\"># Credentials were found</span>\n-            <span class=\"s3\">(</span><span class=\"s1\">username </span><span class=\"s2\">is not None and </span><span class=\"s1\">password </span><span class=\"s2\">is not None</span><span class=\"s3\">)</span>\n-            <span class=\"s4\"># Credentials were not found</span>\n-            <span class=\"s2\">or </span><span class=\"s3\">(</span><span class=\"s1\">username </span><span class=\"s2\">is None and </span><span class=\"s1\">password </span><span class=\"s2\">is None</span><span class=\"s3\">)</span>\n-        <span class=\"s3\">), </span><span class=\"s5\">f&quot;Could not load credentials from url: </span><span class=\"s2\">{</span><span class=\"s1\">original_url</span><span class=\"s2\">}</span><span class=\"s5\">&quot;</span>\n-\n-        <span class=\"s2\">return </span><span class=\"s1\">url</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">__call__</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">req</span><span class=\"s3\">: </span><span class=\"s1\">Request</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; Request</span><span class=\"s3\">:</span>\n-        <span class=\"s4\"># Get credentials for this request</span>\n-        <span class=\"s1\">url</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password </span><span class=\"s3\">= </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_get_url_and_credentials</span><span class=\"s3\">(</span><span class=\"s1\">req</span><span class=\"s3\">.</span><span class=\"s1\">url</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s4\"># Set the url of the request to the url without any credentials</span>\n-        <span class=\"s1\">req</span><span class=\"s3\">.</span><span class=\"s1\">url </span><span class=\"s3\">= </span><span class=\"s1\">url</span>\n-\n-        <span class=\"s2\">if </span><span class=\"s1\">username </span><span class=\"s2\">is not None and </span><span class=\"s1\">password </span><span class=\"s2\">is not None</span><span class=\"s3\">:</span>\n-            <span class=\"s4\"># Send the basic auth with this request</span>\n-            <span class=\"s1\">req </span><span class=\"s3\">= </span><span class=\"s1\">HTTPBasicAuth</span><span class=\"s3\">(</span><span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password</span><span class=\"s3\">)(</span><span class=\"s1\">req</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s4\"># Attach a hook to handle 401 responses</span>\n-        <span class=\"s1\">req</span><span class=\"s3\">.</span><span class=\"s1\">register_hook</span><span class=\"s3\">(</span><span class=\"s5\">&quot;response&quot;</span><span class=\"s3\">, </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">handle_401</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s2\">return </span><span class=\"s1\">req</span>\n-\n-    <span class=\"s4\"># Factored out to allow for easy patching in tests</span>\n-    <span class=\"s2\">def </span><span class=\"s1\">_prompt_for_password</span><span class=\"s3\">(</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">netloc</span><span class=\"s3\">: </span><span class=\"s1\">str</span>\n-    <span class=\"s3\">) </span><span class=\"s1\">-&gt; Tuple</span><span class=\"s3\">[</span><span class=\"s1\">Optional</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">], </span><span class=\"s1\">Optional</span><span class=\"s3\">[</span><span class=\"s1\">str</span><span class=\"s3\">], </span><span class=\"s1\">bool</span><span class=\"s3\">]:</span>\n-        <span class=\"s1\">username </span><span class=\"s3\">= </span><span class=\"s1\">ask_input</span><span class=\"s3\">(</span><span class=\"s5\">f&quot;User for </span><span class=\"s2\">{</span><span class=\"s1\">netloc</span><span class=\"s2\">}</span><span class=\"s5\">: &quot;</span><span class=\"s3\">) </span><span class=\"s2\">if </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">prompting </span><span class=\"s2\">else None</span>\n-        <span class=\"s2\">if not </span><span class=\"s1\">username</span><span class=\"s3\">:</span>\n-            <span class=\"s2\">return None</span><span class=\"s3\">, </span><span class=\"s2\">None</span><span class=\"s3\">, </span><span class=\"s2\">False</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">use_keyring</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">auth </span><span class=\"s3\">= </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_get_keyring_auth</span><span class=\"s3\">(</span><span class=\"s1\">netloc</span><span class=\"s3\">, </span><span class=\"s1\">username</span><span class=\"s3\">)</span>\n-            <span class=\"s2\">if </span><span class=\"s1\">auth </span><span class=\"s2\">and </span><span class=\"s1\">auth</span><span class=\"s3\">[</span><span class=\"s6\">0</span><span class=\"s3\">] </span><span class=\"s2\">is not None and </span><span class=\"s1\">auth</span><span class=\"s3\">[</span><span class=\"s6\">1</span><span class=\"s3\">] </span><span class=\"s2\">is not None</span><span class=\"s3\">:</span>\n-                <span class=\"s2\">return </span><span class=\"s1\">auth</span><span class=\"s3\">[</span><span class=\"s6\">0</span><span class=\"s3\">], </span><span class=\"s1\">auth</span><span class=\"s3\">[</span><span class=\"s6\">1</span><span class=\"s3\">], </span><span class=\"s2\">False</span>\n-        <span class=\"s1\">password </span><span class=\"s3\">= </span><span class=\"s1\">ask_password</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Password: &quot;</span><span class=\"s3\">)</span>\n-        <span class=\"s2\">return </span><span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password</span><span class=\"s3\">, </span><span class=\"s2\">True</span>\n-\n-    <span class=\"s4\"># Factored out to allow for easy patching in tests</span>\n-    <span class=\"s2\">def </span><span class=\"s1\">_should_save_password_to_keyring</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; bool</span><span class=\"s3\">:</span>\n-        <span class=\"s2\">if </span><span class=\"s3\">(</span>\n-            <span class=\"s2\">not </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">prompting</span>\n-            <span class=\"s2\">or not </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">use_keyring</span>\n-            <span class=\"s2\">or not </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring_provider</span><span class=\"s3\">.</span><span class=\"s1\">has_keyring</span>\n-        <span class=\"s3\">):</span>\n-            <span class=\"s2\">return False</span>\n-        <span class=\"s2\">return </span><span class=\"s1\">ask</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Save credentials to keyring [y/N]: &quot;</span><span class=\"s3\">, [</span><span class=\"s5\">&quot;y&quot;</span><span class=\"s3\">, </span><span class=\"s5\">&quot;n&quot;</span><span class=\"s3\">]) == </span><span class=\"s5\">&quot;y&quot;</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">handle_401</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">resp</span><span class=\"s3\">: </span><span class=\"s1\">Response</span><span class=\"s3\">, **</span><span class=\"s1\">kwargs</span><span class=\"s3\">: </span><span class=\"s1\">Any</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; Response</span><span class=\"s3\">:</span>\n-        <span class=\"s4\"># We only care about 401 responses, anything else we want to just</span>\n-        <span class=\"s4\">#   pass through the actual response</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">resp</span><span class=\"s3\">.</span><span class=\"s1\">status_code </span><span class=\"s3\">!= </span><span class=\"s6\">401</span><span class=\"s3\">:</span>\n-            <span class=\"s2\">return </span><span class=\"s1\">resp</span>\n-\n-        <span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password </span><span class=\"s3\">= </span><span class=\"s2\">None</span><span class=\"s3\">, </span><span class=\"s2\">None</span>\n-\n-        <span class=\"s4\"># Query the keyring for credentials:</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">use_keyring</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password </span><span class=\"s3\">= </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_get_new_credentials</span><span class=\"s3\">(</span>\n-                <span class=\"s1\">resp</span><span class=\"s3\">.</span><span class=\"s1\">url</span><span class=\"s3\">,</span>\n-                <span class=\"s1\">allow_netrc</span><span class=\"s3\">=</span><span class=\"s2\">False</span><span class=\"s3\">,</span>\n-                <span class=\"s1\">allow_keyring</span><span class=\"s3\">=</span><span class=\"s2\">True</span><span class=\"s3\">,</span>\n-            <span class=\"s3\">)</span>\n-\n-        <span class=\"s4\"># We are not able to prompt the user so simply return the response</span>\n-        <span class=\"s2\">if not </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">prompting </span><span class=\"s2\">and not </span><span class=\"s1\">username </span><span class=\"s2\">and not </span><span class=\"s1\">password</span><span class=\"s3\">:</span>\n-            <span class=\"s2\">return </span><span class=\"s1\">resp</span>\n-\n-        <span class=\"s1\">parsed </span><span class=\"s3\">= </span><span class=\"s1\">urllib</span><span class=\"s3\">.</span><span class=\"s1\">parse</span><span class=\"s3\">.</span><span class=\"s1\">urlparse</span><span class=\"s3\">(</span><span class=\"s1\">resp</span><span class=\"s3\">.</span><span class=\"s1\">url</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s4\"># Prompt the user for a new username and password</span>\n-        <span class=\"s1\">save </span><span class=\"s3\">= </span><span class=\"s2\">False</span>\n-        <span class=\"s2\">if not </span><span class=\"s1\">username </span><span class=\"s2\">and not </span><span class=\"s1\">password</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password</span><span class=\"s3\">, </span><span class=\"s1\">save </span><span class=\"s3\">= </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_prompt_for_password</span><span class=\"s3\">(</span><span class=\"s1\">parsed</span><span class=\"s3\">.</span><span class=\"s1\">netloc</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s4\"># Store the new username and password to use for future requests</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_credentials_to_save </span><span class=\"s3\">= </span><span class=\"s2\">None</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">username </span><span class=\"s2\">is not None and </span><span class=\"s1\">password </span><span class=\"s2\">is not None</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">passwords</span><span class=\"s3\">[</span><span class=\"s1\">parsed</span><span class=\"s3\">.</span><span class=\"s1\">netloc</span><span class=\"s3\">] = (</span><span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">password</span><span class=\"s3\">)</span>\n-\n-            <span class=\"s4\"># Prompt to save the password to keyring</span>\n-            <span class=\"s2\">if </span><span class=\"s1\">save </span><span class=\"s2\">and </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_should_save_password_to_keyring</span><span class=\"s3\">():</span>\n-                <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_credentials_to_save </span><span class=\"s3\">= </span><span class=\"s1\">Credentials</span><span class=\"s3\">(</span>\n-                    <span class=\"s1\">url</span><span class=\"s3\">=</span><span class=\"s1\">parsed</span><span class=\"s3\">.</span><span class=\"s1\">netloc</span><span class=\"s3\">,</span>\n-                    <span class=\"s1\">username</span><span class=\"s3\">=</span><span class=\"s1\">username</span><span class=\"s3\">,</span>\n-                    <span class=\"s1\">password</span><span class=\"s3\">=</span><span class=\"s1\">password</span><span class=\"s3\">,</span>\n-                <span class=\"s3\">)</span>\n-\n-        <span class=\"s4\"># Consume content and release the original connection to allow our new</span>\n-        <span class=\"s4\">#   request to reuse the same one.</span>\n-        <span class=\"s4\"># The result of the assignment isn't used, it's just needed to consume</span>\n-        <span class=\"s4\"># the content.</span>\n-        <span class=\"s1\">_ </span><span class=\"s3\">= </span><span class=\"s1\">resp</span><span class=\"s3\">.</span><span class=\"s1\">content</span>\n-        <span class=\"s1\">resp</span><span class=\"s3\">.</span><span class=\"s1\">raw</span><span class=\"s3\">.</span><span class=\"s1\">release_conn</span><span class=\"s3\">()</span>\n-\n-        <span class=\"s4\"># Add our new username and password to the request</span>\n-        <span class=\"s1\">req </span><span class=\"s3\">= </span><span class=\"s1\">HTTPBasicAuth</span><span class=\"s3\">(</span><span class=\"s1\">username </span><span class=\"s2\">or </span><span class=\"s5\">&quot;&quot;</span><span class=\"s3\">, </span><span class=\"s1\">password </span><span class=\"s2\">or </span><span class=\"s5\">&quot;&quot;</span><span class=\"s3\">)(</span><span class=\"s1\">resp</span><span class=\"s3\">.</span><span class=\"s1\">request</span><span class=\"s3\">)</span>\n-        <span class=\"s1\">req</span><span class=\"s3\">.</span><span class=\"s1\">register_hook</span><span class=\"s3\">(</span><span class=\"s5\">&quot;response&quot;</span><span class=\"s3\">, </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">warn_on_401</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s4\"># On successful request, save the credentials that were used to</span>\n-        <span class=\"s4\"># keyring. (Note that if the user responded &quot;no&quot; above, this member</span>\n-        <span class=\"s4\"># is not set and nothing will be saved.)</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_credentials_to_save</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">req</span><span class=\"s3\">.</span><span class=\"s1\">register_hook</span><span class=\"s3\">(</span><span class=\"s5\">&quot;response&quot;</span><span class=\"s3\">, </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">save_credentials</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s4\"># Send our new request</span>\n-        <span class=\"s1\">new_resp </span><span class=\"s3\">= </span><span class=\"s1\">resp</span><span class=\"s3\">.</span><span class=\"s1\">connection</span><span class=\"s3\">.</span><span class=\"s1\">send</span><span class=\"s3\">(</span><span class=\"s1\">req</span><span class=\"s3\">, **</span><span class=\"s1\">kwargs</span><span class=\"s3\">)</span>\n-        <span class=\"s1\">new_resp</span><span class=\"s3\">.</span><span class=\"s1\">history</span><span class=\"s3\">.</span><span class=\"s1\">append</span><span class=\"s3\">(</span><span class=\"s1\">resp</span><span class=\"s3\">)</span>\n-\n-        <span class=\"s2\">return </span><span class=\"s1\">new_resp</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">warn_on_401</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">resp</span><span class=\"s3\">: </span><span class=\"s1\">Response</span><span class=\"s3\">, **</span><span class=\"s1\">kwargs</span><span class=\"s3\">: </span><span class=\"s1\">Any</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; </span><span class=\"s2\">None</span><span class=\"s3\">:</span>\n-        <span class=\"s0\">&quot;&quot;&quot;Response callback to warn about incorrect credentials.&quot;&quot;&quot;</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">resp</span><span class=\"s3\">.</span><span class=\"s1\">status_code </span><span class=\"s3\">== </span><span class=\"s6\">401</span><span class=\"s3\">:</span>\n-            <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">warning</span><span class=\"s3\">(</span>\n-                <span class=\"s5\">&quot;401 Error, Credentials not correct for %s&quot;</span><span class=\"s3\">,</span>\n-                <span class=\"s1\">resp</span><span class=\"s3\">.</span><span class=\"s1\">request</span><span class=\"s3\">.</span><span class=\"s1\">url</span><span class=\"s3\">,</span>\n-            <span class=\"s3\">)</span>\n-\n-    <span class=\"s2\">def </span><span class=\"s1\">save_credentials</span><span class=\"s3\">(</span><span class=\"s1\">self</span><span class=\"s3\">, </span><span class=\"s1\">resp</span><span class=\"s3\">: </span><span class=\"s1\">Response</span><span class=\"s3\">, **</span><span class=\"s1\">kwargs</span><span class=\"s3\">: </span><span class=\"s1\">Any</span><span class=\"s3\">) </span><span class=\"s1\">-&gt; </span><span class=\"s2\">None</span><span class=\"s3\">:</span>\n-        <span class=\"s0\">&quot;&quot;&quot;Response callback to save credentials on success.&quot;&quot;&quot;</span>\n-        <span class=\"s2\">assert </span><span class=\"s3\">(</span>\n-            <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring_provider</span><span class=\"s3\">.</span><span class=\"s1\">has_keyring</span>\n-        <span class=\"s3\">), </span><span class=\"s5\">&quot;should never reach here without keyring&quot;</span>\n-\n-        <span class=\"s1\">creds </span><span class=\"s3\">= </span><span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_credentials_to_save</span>\n-        <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">_credentials_to_save </span><span class=\"s3\">= </span><span class=\"s2\">None</span>\n-        <span class=\"s2\">if </span><span class=\"s1\">creds </span><span class=\"s2\">and </span><span class=\"s1\">resp</span><span class=\"s3\">.</span><span class=\"s1\">status_code </span><span class=\"s3\">&lt; </span><span class=\"s6\">400</span><span class=\"s3\">:</span>\n-            <span class=\"s2\">try</span><span class=\"s3\">:</span>\n-                <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">info</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Saving credentials to keyring&quot;</span><span class=\"s3\">)</span>\n-                <span class=\"s1\">self</span><span class=\"s3\">.</span><span class=\"s1\">keyring_provider</span><span class=\"s3\">.</span><span class=\"s1\">save_auth_info</span><span class=\"s3\">(</span>\n-                    <span class=\"s1\">creds</span><span class=\"s3\">.</span><span class=\"s1\">url</span><span class=\"s3\">, </span><span class=\"s1\">creds</span><span class=\"s3\">.</span><span class=\"s1\">username</span><span class=\"s3\">, </span><span class=\"s1\">creds</span><span class=\"s3\">.</span><span class=\"s1\">password</span>\n-                <span class=\"s3\">)</span>\n-            <span class=\"s2\">except </span><span class=\"s1\">Exception</span><span class=\"s3\">:</span>\n-                <span class=\"s1\">logger</span><span class=\"s3\">.</span><span class=\"s1\">exception</span><span class=\"s3\">(</span><span class=\"s5\">&quot;Failed to save credentials&quot;</span><span class=\"s3\">)</span>\n+<pre><span class=\"s0\">from </span><span class=\"s1\">flask </span><span class=\"s0\">import </span><span class=\"s1\">Blueprint</span><span class=\"s2\">, </span><span class=\"s1\">render_template</span><span class=\"s2\">, </span><span class=\"s1\">redirect</span><span class=\"s2\">, </span><span class=\"s1\">url_for</span><span class=\"s2\">, </span><span class=\"s1\">request</span><span class=\"s2\">, </span><span class=\"s1\">flash</span>\n+<span class=\"s0\">from </span><span class=\"s1\">flask_login </span><span class=\"s0\">import </span><span class=\"s1\">login_user</span><span class=\"s2\">, </span><span class=\"s1\">logout_user</span><span class=\"s2\">, </span><span class=\"s1\">login_required</span>\n+<span class=\"s0\">from </span><span class=\"s1\">app</span><span class=\"s2\">.</span><span class=\"s1\">models </span><span class=\"s0\">import </span><span class=\"s1\">db</span><span class=\"s2\">, </span><span class=\"s1\">User</span>\n+<span class=\"s0\">from </span><span class=\"s1\">werkzeug</span><span class=\"s2\">.</span><span class=\"s1\">security </span><span class=\"s0\">import </span><span class=\"s1\">generate_password_hash</span><span class=\"s2\">, </span><span class=\"s1\">check_password_hash</span>\n+\n+<span class=\"s1\">auth_bp </span><span class=\"s2\">= </span><span class=\"s1\">Blueprint</span><span class=\"s2\">(</span><span class=\"s3\">&quot;auth&quot;</span><span class=\"s2\">, </span><span class=\"s1\">__name__</span><span class=\"s2\">, </span><span class=\"s1\">template_folder</span><span class=\"s2\">=</span><span class=\"s3\">&quot;../templates/auth&quot;</span><span class=\"s2\">)</span>\n+\n+<span class=\"s2\">@</span><span class=\"s1\">auth_bp</span><span class=\"s2\">.</span><span class=\"s1\">route</span><span class=\"s2\">(</span><span class=\"s3\">&quot;/login&quot;</span><span class=\"s2\">, </span><span class=\"s1\">methods</span><span class=\"s2\">=[</span><span class=\"s3\">&quot;GET&quot;</span><span class=\"s2\">, </span><span class=\"s3\">&quot;POST&quot;</span><span class=\"s2\">])</span>\n+<span class=\"s0\">def </span><span class=\"s1\">login</span><span class=\"s2\">():</span>\n+    <span class=\"s0\">if </span><span class=\"s1\">request</span><span class=\"s2\">.</span><span class=\"s1\">method </span><span class=\"s2\">== </span><span class=\"s3\">&quot;POST&quot;</span><span class=\"s2\">:</span>\n+        <span class=\"s1\">username </span><span class=\"s2\">= </span><span class=\"s1\">request</span><span class=\"s2\">.</span><span class=\"s1\">form</span><span class=\"s2\">.</span><span class=\"s1\">get</span><span class=\"s2\">(</span><span class=\"s3\">&quot;username&quot;</span><span class=\"s2\">)</span>\n+        <span class=\"s1\">password </span><span class=\"s2\">= </span><span class=\"s1\">request</span><span class=\"s2\">.</span><span class=\"s1\">form</span><span class=\"s2\">.</span><span class=\"s1\">get</span><span class=\"s2\">(</span><span class=\"s3\">&quot;password&quot;</span><span class=\"s2\">)</span>\n+        <span class=\"s1\">user </span><span class=\"s2\">= </span><span class=\"s1\">User</span><span class=\"s2\">.</span><span class=\"s1\">query</span><span class=\"s2\">.</span><span class=\"s1\">filter_by</span><span class=\"s2\">(</span><span class=\"s1\">username</span><span class=\"s2\">=</span><span class=\"s1\">username</span><span class=\"s2\">).</span><span class=\"s1\">first</span><span class=\"s2\">()</span>\n+\n+        <span class=\"s0\">if </span><span class=\"s1\">user </span><span class=\"s0\">and </span><span class=\"s1\">check_password_hash</span><span class=\"s2\">(</span><span class=\"s1\">user</span><span class=\"s2\">.</span><span class=\"s1\">password_hash</span><span class=\"s2\">, </span><span class=\"s1\">password</span><span class=\"s2\">):</span>\n+            <span class=\"s1\">login_user</span><span class=\"s2\">(</span><span class=\"s1\">user</span><span class=\"s2\">)</span>\n+            <span class=\"s1\">flash</span><span class=\"s2\">(</span><span class=\"s3\">&quot;Login successful!&quot;</span><span class=\"s2\">, </span><span class=\"s3\">&quot;success&quot;</span><span class=\"s2\">)</span>\n+            <span class=\"s0\">return </span><span class=\"s1\">redirect</span><span class=\"s2\">(</span><span class=\"s1\">url_for</span><span class=\"s2\">(</span><span class=\"s3\">&quot;dashboard.index&quot;</span><span class=\"s2\">))</span>\n+        <span class=\"s0\">else</span><span class=\"s2\">:</span>\n+            <span class=\"s1\">flash</span><span class=\"s2\">(</span><span class=\"s3\">&quot;Invalid username or password&quot;</span><span class=\"s2\">, </span><span class=\"s3\">&quot;danger&quot;</span><span class=\"s2\">)</span>\n+\n+    <span class=\"s0\">return </span><span class=\"s1\">render_template</span><span class=\"s2\">(</span><span class=\"s3\">&quot;auth/login.html&quot;</span><span class=\"s2\">)</span>\n+\n+<span class=\"s2\">@</span><span class=\"s1\">auth_bp</span><span class=\"s2\">.</span><span class=\"s1\">route</span><span class=\"s2\">(</span><span class=\"s3\">&quot;/logout&quot;</span><span class=\"s2\">)</span>\n+<span class=\"s2\">@</span><span class=\"s1\">login_required</span>\n+<span class=\"s0\">def </span><span class=\"s1\">logout</span><span class=\"s2\">():</span>\n+    <span class=\"s1\">logout_user</span><span class=\"s2\">()</span>\n+    <span class=\"s1\">flash</span><span class=\"s2\">(</span><span class=\"s3\">&quot;You have been logged out.&quot;</span><span class=\"s2\">, </span><span class=\"s3\">&quot;info&quot;</span><span class=\"s2\">)</span>\n+    <span class=\"s0\">return </span><span class=\"s1\">redirect</span><span class=\"s2\">(</span><span class=\"s1\">url_for</span><span class=\"s2\">(</span><span class=\"s3\">&quot;auth.login&quot;</span><span class=\"s2\">))</span>\n+\n+<span class=\"s2\">@</span><span class=\"s1\">auth_bp</span><span class=\"s2\">.</span><span class=\"s1\">route</span><span class=\"s2\">(</span><span class=\"s3\">&quot;/register&quot;</span><span class=\"s2\">, </span><span class=\"s1\">methods</span><span class=\"s2\">=[</span><span class=\"s3\">&quot;GET&quot;</span><span class=\"s2\">, </span><span class=\"s3\">&quot;POST&quot;</span><span class=\"s2\">])</span>\n+<span class=\"s0\">def </span><span class=\"s1\">register</span><span class=\"s2\">():</span>\n+    <span class=\"s0\">if </span><span class=\"s1\">request</span><span class=\"s2\">.</span><span class=\"s1\">method </span><span class=\"s2\">== </span><span class=\"s3\">&quot;POST&quot;</span><span class=\"s2\">:</span>\n+        <span class=\"s1\">username </span><span class=\"s2\">= </span><span class=\"s1\">request</span><span class=\"s2\">.</span><span class=\"s1\">form</span><span class=\"s2\">.</span><span class=\"s1\">get</span><span class=\"s2\">(</span><span class=\"s3\">&quot;username&quot;</span><span class=\"s2\">)</span>\n+        <span class=\"s1\">email </span><span class=\"s2\">= </span><span class=\"s1\">request</span><span class=\"s2\">.</span><span class=\"s1\">form</span><span class=\"s2\">.</span><span class=\"s1\">get</span><span class=\"s2\">(</span><span class=\"s3\">&quot;email&quot;</span><span class=\"s2\">)</span>\n+        <span class=\"s1\">password </span><span class=\"s2\">= </span><span class=\"s1\">request</span><span class=\"s2\">.</span><span class=\"s1\">form</span><span class=\"s2\">.</span><span class=\"s1\">get</span><span class=\"s2\">(</span><span class=\"s3\">&quot;password&quot;</span><span class=\"s2\">)</span>\n+\n+        <span class=\"s4\"># Check if user exists</span>\n+        <span class=\"s1\">existing_user </span><span class=\"s2\">= </span><span class=\"s1\">User</span><span class=\"s2\">.</span><span class=\"s1\">query</span><span class=\"s2\">.</span><span class=\"s1\">filter_by</span><span class=\"s2\">(</span><span class=\"s1\">username</span><span class=\"s2\">=</span><span class=\"s1\">username</span><span class=\"s2\">).</span><span class=\"s1\">first</span><span class=\"s2\">()</span>\n+        <span class=\"s0\">if </span><span class=\"s1\">existing_user</span><span class=\"s2\">:</span>\n+            <span class=\"s1\">flash</span><span class=\"s2\">(</span><span class=\"s3\">&quot;Username already exists. Choose a different one.&quot;</span><span class=\"s2\">, </span><span class=\"s3\">&quot;warning&quot;</span><span class=\"s2\">)</span>\n+            <span class=\"s0\">return </span><span class=\"s1\">redirect</span><span class=\"s2\">(</span><span class=\"s1\">url_for</span><span class=\"s2\">(</span><span class=\"s3\">&quot;auth.register&quot;</span><span class=\"s2\">))</span>\n+\n+        <span class=\"s4\"># Create new user</span>\n+        <span class=\"s1\">new_user </span><span class=\"s2\">= </span><span class=\"s1\">User</span><span class=\"s2\">(</span><span class=\"s1\">username</span><span class=\"s2\">=</span><span class=\"s1\">username</span><span class=\"s2\">, </span><span class=\"s1\">email</span><span class=\"s2\">=</span><span class=\"s1\">email</span><span class=\"s2\">, </span><span class=\"s1\">password_hash</span><span class=\"s2\">=</span><span class=\"s1\">generate_password_hash</span><span class=\"s2\">(</span><span class=\"s1\">password</span><span class=\"s2\">))</span>\n+        <span class=\"s1\">db</span><span class=\"s2\">.</span><span class=\"s1\">session</span><span class=\"s2\">.</span><span class=\"s1\">add</span><span class=\"s2\">(</span><span class=\"s1\">new_user</span><span class=\"s2\">)</span>\n+        <span class=\"s1\">db</span><span class=\"s2\">.</span><span class=\"s1\">session</span><span class=\"s2\">.</span><span class=\"s1\">commit</span><span class=\"s2\">()</span>\n+\n+        <span class=\"s1\">flash</span><span class=\"s2\">(</span><span class=\"s3\">&quot;Account created successfully! Please log in.&quot;</span><span class=\"s2\">, </span><span class=\"s3\">&quot;success&quot;</span><span class=\"s2\">)</span>\n+        <span class=\"s0\">return </span><span class=\"s1\">redirect</span><span class=\"s2\">(</span><span class=\"s1\">url_for</span><span class=\"s2\">(</span><span class=\"s3\">&quot;auth.login&quot;</span><span class=\"s2\">))</span>\n+\n+    <span class=\"s0\">return </span><span class=\"s1\">render_template</span><span class=\"s2\">(</span><span class=\"s3\">&quot;auth/register.html&quot;</span><span class=\"s2\">)</span>\n </pre>\n </body>\n </html>\n\\ No newline at end of file\n", "reason": "High Entropy", "stringsFound": ["97689324abcf01bd1793d49063e7ca01e03d7d07"]}
{"branch": "origin/work", "commit": "gate pass rights allocation\n", "commitHash": "8141568077158e103f12d11db3d5418c5167ced8", "date": "2025-07-11 10:01:03", "diff": "@@ -3,13 +3,9 @@\n <title>extensions.py</title>\n <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n <style type=\"text/css\">\n-.s0 { color: #7a7e85;}\n+.s0 { color: #cf8e6d;}\n .s1 { color: #bcbec4;}\n-.s2 { color: #5f826b; font-style: italic;}\n-.s3 { color: #cf8e6d;}\n-.s4 { color: #bcbec4;}\n-.s5 { color: #6aab73;}\n-.s6 { color: #2aacb8;}\n+.s2 { color: #bcbec4;}\n </style>\n </head>\n <body bgcolor=\"#1e1f22\">\n@@ -18,590 +14,13 @@\n <font face=\"Arial, Helvetica\" color=\"#000000\">\n extensions.py</font>\n </center></td></tr></table>\n-<pre><span class=\"s0\"># Disable type checking for this module since numba's internals</span>\n-<span class=\"s0\"># are not typed, and we use numba's internals via its extension API</span>\n-<span class=\"s0\"># mypy: ignore-errors</span>\n-<span class=\"s2\">&quot;&quot;&quot; \n-Utility classes/functions to let numba recognize \n-pandas Index/Series/DataFrame \n- \n-Mostly vendored from https://github.com/numba/numba/blob/main/numba/tests/pdlike_usecase.py \n-&quot;&quot;&quot;</span>\n+<pre><span class=\"s0\">from </span><span class=\"s1\">flask_sqlalchemy </span><span class=\"s0\">import </span><span class=\"s1\">SQLAlchemy</span>\n+<span class=\"s0\">from </span><span class=\"s1\">flask_migrate </span><span class=\"s0\">import </span><span class=\"s1\">Migrate</span>\n+<span class=\"s0\">from </span><span class=\"s1\">flask_mail </span><span class=\"s0\">import </span><span class=\"s1\">Mail</span>\n \n-<span class=\"s3\">from </span><span class=\"s1\">__future__ </span><span class=\"s3\">import </span><span class=\"s1\">annotations</span>\n-\n-<span class=\"s3\">from </span><span class=\"s1\">contextlib </span><span class=\"s3\">import </span><span class=\"s1\">contextmanager</span>\n-<span class=\"s3\">import </span><span class=\"s1\">operator</span>\n-\n-<span class=\"s3\">import </span><span class=\"s1\">numba</span>\n-<span class=\"s3\">from </span><span class=\"s1\">numba </span><span class=\"s3\">import </span><span class=\"s1\">types</span>\n-<span class=\"s3\">from </span><span class=\"s1\">numba</span><span class=\"s4\">.</span><span class=\"s1\">core </span><span class=\"s3\">import </span><span class=\"s1\">cgutils</span>\n-<span class=\"s3\">from </span><span class=\"s1\">numba</span><span class=\"s4\">.</span><span class=\"s1\">core</span><span class=\"s4\">.</span><span class=\"s1\">datamodel </span><span class=\"s3\">import </span><span class=\"s1\">models</span>\n-<span class=\"s3\">from </span><span class=\"s1\">numba</span><span class=\"s4\">.</span><span class=\"s1\">core</span><span class=\"s4\">.</span><span class=\"s1\">extending </span><span class=\"s3\">import </span><span class=\"s4\">(</span>\n-    <span class=\"s1\">NativeValue</span><span class=\"s4\">,</span>\n-    <span class=\"s1\">box</span><span class=\"s4\">,</span>\n-    <span class=\"s1\">lower_builtin</span><span class=\"s4\">,</span>\n-    <span class=\"s1\">make_attribute_wrapper</span><span class=\"s4\">,</span>\n-    <span class=\"s1\">overload</span><span class=\"s4\">,</span>\n-    <span class=\"s1\">overload_attribute</span><span class=\"s4\">,</span>\n-    <span class=\"s1\">overload_method</span><span class=\"s4\">,</span>\n-    <span class=\"s1\">register_model</span><span class=\"s4\">,</span>\n-    <span class=\"s1\">type_callable</span><span class=\"s4\">,</span>\n-    <span class=\"s1\">typeof_impl</span><span class=\"s4\">,</span>\n-    <span class=\"s1\">unbox</span><span class=\"s4\">,</span>\n-<span class=\"s4\">)</span>\n-<span class=\"s3\">from </span><span class=\"s1\">numba</span><span class=\"s4\">.</span><span class=\"s1\">core</span><span class=\"s4\">.</span><span class=\"s1\">imputils </span><span class=\"s3\">import </span><span class=\"s1\">impl_ret_borrowed</span>\n-<span class=\"s3\">import </span><span class=\"s1\">numpy </span><span class=\"s3\">as </span><span class=\"s1\">np</span>\n-\n-<span class=\"s3\">from </span><span class=\"s1\">pandas</span><span class=\"s4\">.</span><span class=\"s1\">_libs </span><span class=\"s3\">import </span><span class=\"s1\">lib</span>\n-\n-<span class=\"s3\">from </span><span class=\"s1\">pandas</span><span class=\"s4\">.</span><span class=\"s1\">core</span><span class=\"s4\">.</span><span class=\"s1\">indexes</span><span class=\"s4\">.</span><span class=\"s1\">base </span><span class=\"s3\">import </span><span class=\"s1\">Index</span>\n-<span class=\"s3\">from </span><span class=\"s1\">pandas</span><span class=\"s4\">.</span><span class=\"s1\">core</span><span class=\"s4\">.</span><span class=\"s1\">indexing </span><span class=\"s3\">import </span><span class=\"s1\">_iLocIndexer</span>\n-<span class=\"s3\">from </span><span class=\"s1\">pandas</span><span class=\"s4\">.</span><span class=\"s1\">core</span><span class=\"s4\">.</span><span class=\"s1\">internals </span><span class=\"s3\">import </span><span class=\"s1\">SingleBlockManager</span>\n-<span class=\"s3\">from </span><span class=\"s1\">pandas</span><span class=\"s4\">.</span><span class=\"s1\">core</span><span class=\"s4\">.</span><span class=\"s1\">series </span><span class=\"s3\">import </span><span class=\"s1\">Series</span>\n-\n-\n-<span class=\"s0\"># Helper function to hack around fact that Index casts numpy string dtype to object</span>\n-<span class=\"s0\">#</span>\n-<span class=\"s0\"># Idea is to set an attribute on a Index called _numba_data</span>\n-<span class=\"s0\"># that is the original data, or the object data casted to numpy string dtype,</span>\n-<span class=\"s0\"># with a context manager that is unset afterwards</span>\n-<span class=\"s4\">@</span><span class=\"s1\">contextmanager</span>\n-<span class=\"s3\">def </span><span class=\"s1\">set_numba_data</span><span class=\"s4\">(</span><span class=\"s1\">index</span><span class=\"s4\">: </span><span class=\"s1\">Index</span><span class=\"s4\">):</span>\n-    <span class=\"s1\">numba_data </span><span class=\"s4\">= </span><span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">_data</span>\n-    <span class=\"s3\">if </span><span class=\"s1\">numba_data</span><span class=\"s4\">.</span><span class=\"s1\">dtype </span><span class=\"s4\">== </span><span class=\"s1\">object</span><span class=\"s4\">:</span>\n-        <span class=\"s3\">if not </span><span class=\"s1\">lib</span><span class=\"s4\">.</span><span class=\"s1\">is_string_array</span><span class=\"s4\">(</span><span class=\"s1\">numba_data</span><span class=\"s4\">):</span>\n-            <span class=\"s3\">raise </span><span class=\"s1\">ValueError</span><span class=\"s4\">(</span>\n-                <span class=\"s5\">&quot;The numba engine only supports using string or numeric column names&quot;</span>\n-            <span class=\"s4\">)</span>\n-        <span class=\"s1\">numba_data </span><span class=\"s4\">= </span><span class=\"s1\">numba_data</span><span class=\"s4\">.</span><span class=\"s1\">astype</span><span class=\"s4\">(</span><span class=\"s5\">&quot;U&quot;</span><span class=\"s4\">)</span>\n-    <span class=\"s3\">try</span><span class=\"s4\">:</span>\n-        <span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">_numba_data </span><span class=\"s4\">= </span><span class=\"s1\">numba_data</span>\n-        <span class=\"s3\">yield </span><span class=\"s1\">index</span>\n-    <span class=\"s3\">finally</span><span class=\"s4\">:</span>\n-        <span class=\"s3\">del </span><span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">_numba_data</span>\n-\n-\n-<span class=\"s0\"># TODO: Range index support</span>\n-<span class=\"s0\"># (this currently lowers OK, but does not round-trip)</span>\n-<span class=\"s3\">class </span><span class=\"s1\">IndexType</span><span class=\"s4\">(</span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">Type</span><span class=\"s4\">):</span>\n-    <span class=\"s2\">&quot;&quot;&quot; \n-    The type class for Index objects. \n-    &quot;&quot;&quot;</span>\n-\n-    <span class=\"s3\">def </span><span class=\"s1\">__init__</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">, </span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s1\">layout</span><span class=\"s4\">, </span><span class=\"s1\">pyclass</span><span class=\"s4\">: </span><span class=\"s1\">any</span><span class=\"s4\">) </span><span class=\"s1\">-&gt; </span><span class=\"s3\">None</span><span class=\"s4\">:</span>\n-        <span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">pyclass </span><span class=\"s4\">= </span><span class=\"s1\">pyclass</span>\n-        <span class=\"s1\">name </span><span class=\"s4\">= </span><span class=\"s5\">f&quot;index(</span><span class=\"s3\">{</span><span class=\"s1\">dtype</span><span class=\"s3\">}</span><span class=\"s5\">, </span><span class=\"s3\">{</span><span class=\"s1\">layout</span><span class=\"s3\">}</span><span class=\"s5\">)&quot;</span>\n-        <span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">dtype </span><span class=\"s4\">= </span><span class=\"s1\">dtype</span>\n-        <span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">layout </span><span class=\"s4\">= </span><span class=\"s1\">layout</span>\n-        <span class=\"s1\">super</span><span class=\"s4\">().</span><span class=\"s1\">__init__</span><span class=\"s4\">(</span><span class=\"s1\">name</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s4\">@</span><span class=\"s1\">property</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">key</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">return </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">pyclass</span><span class=\"s4\">, </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">layout</span>\n-\n-    <span class=\"s4\">@</span><span class=\"s1\">property</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">as_array</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">return </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">Array</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s6\">1</span><span class=\"s4\">, </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">layout</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s3\">def </span><span class=\"s1\">copy</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">, </span><span class=\"s1\">dtype</span><span class=\"s4\">=</span><span class=\"s3\">None</span><span class=\"s4\">, </span><span class=\"s1\">ndim</span><span class=\"s4\">: </span><span class=\"s1\">int </span><span class=\"s4\">= </span><span class=\"s6\">1</span><span class=\"s4\">, </span><span class=\"s1\">layout</span><span class=\"s4\">=</span><span class=\"s3\">None</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">assert </span><span class=\"s1\">ndim </span><span class=\"s4\">== </span><span class=\"s6\">1</span>\n-        <span class=\"s3\">if </span><span class=\"s1\">dtype </span><span class=\"s3\">is None</span><span class=\"s4\">:</span>\n-            <span class=\"s1\">dtype </span><span class=\"s4\">= </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span>\n-        <span class=\"s1\">layout </span><span class=\"s4\">= </span><span class=\"s1\">layout </span><span class=\"s3\">or </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">layout</span>\n-        <span class=\"s3\">return </span><span class=\"s1\">type</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">)(</span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s1\">layout</span><span class=\"s4\">, </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">pyclass</span><span class=\"s4\">)</span>\n-\n-\n-<span class=\"s3\">class </span><span class=\"s1\">SeriesType</span><span class=\"s4\">(</span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">Type</span><span class=\"s4\">):</span>\n-    <span class=\"s2\">&quot;&quot;&quot; \n-    The type class for Series objects. \n-    &quot;&quot;&quot;</span>\n-\n-    <span class=\"s3\">def </span><span class=\"s1\">__init__</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">, </span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">namety</span><span class=\"s4\">) </span><span class=\"s1\">-&gt; </span><span class=\"s3\">None</span><span class=\"s4\">:</span>\n-        <span class=\"s3\">assert </span><span class=\"s1\">isinstance</span><span class=\"s4\">(</span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">IndexType</span><span class=\"s4\">)</span>\n-        <span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">dtype </span><span class=\"s4\">= </span><span class=\"s1\">dtype</span>\n-        <span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">index </span><span class=\"s4\">= </span><span class=\"s1\">index</span>\n-        <span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">values </span><span class=\"s4\">= </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">Array</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s6\">1</span><span class=\"s4\">, </span><span class=\"s5\">&quot;C&quot;</span><span class=\"s4\">)</span>\n-        <span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">namety </span><span class=\"s4\">= </span><span class=\"s1\">namety</span>\n-        <span class=\"s1\">name </span><span class=\"s4\">= </span><span class=\"s5\">f&quot;series(</span><span class=\"s3\">{</span><span class=\"s1\">dtype</span><span class=\"s3\">}</span><span class=\"s5\">, </span><span class=\"s3\">{</span><span class=\"s1\">index</span><span class=\"s3\">}</span><span class=\"s5\">, </span><span class=\"s3\">{</span><span class=\"s1\">namety</span><span class=\"s3\">}</span><span class=\"s5\">)&quot;</span>\n-        <span class=\"s1\">super</span><span class=\"s4\">().</span><span class=\"s1\">__init__</span><span class=\"s4\">(</span><span class=\"s1\">name</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s4\">@</span><span class=\"s1\">property</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">key</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">return </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">namety</span>\n-\n-    <span class=\"s4\">@</span><span class=\"s1\">property</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">as_array</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">return </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">values</span>\n-\n-    <span class=\"s3\">def </span><span class=\"s1\">copy</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">, </span><span class=\"s1\">dtype</span><span class=\"s4\">=</span><span class=\"s3\">None</span><span class=\"s4\">, </span><span class=\"s1\">ndim</span><span class=\"s4\">: </span><span class=\"s1\">int </span><span class=\"s4\">= </span><span class=\"s6\">1</span><span class=\"s4\">, </span><span class=\"s1\">layout</span><span class=\"s4\">: </span><span class=\"s1\">str </span><span class=\"s4\">= </span><span class=\"s5\">&quot;C&quot;</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">assert </span><span class=\"s1\">ndim </span><span class=\"s4\">== </span><span class=\"s6\">1</span>\n-        <span class=\"s3\">assert </span><span class=\"s1\">layout </span><span class=\"s4\">== </span><span class=\"s5\">&quot;C&quot;</span>\n-        <span class=\"s3\">if </span><span class=\"s1\">dtype </span><span class=\"s3\">is None</span><span class=\"s4\">:</span>\n-            <span class=\"s1\">dtype </span><span class=\"s4\">= </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span>\n-        <span class=\"s3\">return </span><span class=\"s1\">type</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">)(</span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">namety</span><span class=\"s4\">)</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">typeof_impl</span><span class=\"s4\">.</span><span class=\"s1\">register</span><span class=\"s4\">(</span><span class=\"s1\">Index</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">typeof_index</span><span class=\"s4\">(</span><span class=\"s1\">val</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">):</span>\n-    <span class=\"s2\">&quot;&quot;&quot; \n-    This will assume that only strings are in object dtype \n-    index. \n-    (you should check this before this gets lowered down to numba) \n-    &quot;&quot;&quot;</span>\n-    <span class=\"s0\"># arrty = typeof_impl(val._data, c)</span>\n-    <span class=\"s1\">arrty </span><span class=\"s4\">= </span><span class=\"s1\">typeof_impl</span><span class=\"s4\">(</span><span class=\"s1\">val</span><span class=\"s4\">.</span><span class=\"s1\">_numba_data</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">)</span>\n-    <span class=\"s3\">assert </span><span class=\"s1\">arrty</span><span class=\"s4\">.</span><span class=\"s1\">ndim </span><span class=\"s4\">== </span><span class=\"s6\">1</span>\n-    <span class=\"s3\">return </span><span class=\"s1\">IndexType</span><span class=\"s4\">(</span><span class=\"s1\">arrty</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s1\">arrty</span><span class=\"s4\">.</span><span class=\"s1\">layout</span><span class=\"s4\">, </span><span class=\"s1\">type</span><span class=\"s4\">(</span><span class=\"s1\">val</span><span class=\"s4\">))</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">typeof_impl</span><span class=\"s4\">.</span><span class=\"s1\">register</span><span class=\"s4\">(</span><span class=\"s1\">Series</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">typeof_series</span><span class=\"s4\">(</span><span class=\"s1\">val</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">):</span>\n-    <span class=\"s1\">index </span><span class=\"s4\">= </span><span class=\"s1\">typeof_impl</span><span class=\"s4\">(</span><span class=\"s1\">val</span><span class=\"s4\">.</span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">arrty </span><span class=\"s4\">= </span><span class=\"s1\">typeof_impl</span><span class=\"s4\">(</span><span class=\"s1\">val</span><span class=\"s4\">.</span><span class=\"s1\">values</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">namety </span><span class=\"s4\">= </span><span class=\"s1\">typeof_impl</span><span class=\"s4\">(</span><span class=\"s1\">val</span><span class=\"s4\">.</span><span class=\"s1\">name</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">)</span>\n-    <span class=\"s3\">assert </span><span class=\"s1\">arrty</span><span class=\"s4\">.</span><span class=\"s1\">ndim </span><span class=\"s4\">== </span><span class=\"s6\">1</span>\n-    <span class=\"s3\">assert </span><span class=\"s1\">arrty</span><span class=\"s4\">.</span><span class=\"s1\">layout </span><span class=\"s4\">== </span><span class=\"s5\">&quot;C&quot;</span>\n-    <span class=\"s3\">return </span><span class=\"s1\">SeriesType</span><span class=\"s4\">(</span><span class=\"s1\">arrty</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">namety</span><span class=\"s4\">)</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">type_callable</span><span class=\"s4\">(</span><span class=\"s1\">Series</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">type_series_constructor</span><span class=\"s4\">(</span><span class=\"s1\">context</span><span class=\"s4\">):</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">typer</span><span class=\"s4\">(</span><span class=\"s1\">data</span><span class=\"s4\">, </span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">name</span><span class=\"s4\">=</span><span class=\"s3\">None</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">if </span><span class=\"s1\">isinstance</span><span class=\"s4\">(</span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">IndexType</span><span class=\"s4\">) </span><span class=\"s3\">and </span><span class=\"s1\">isinstance</span><span class=\"s4\">(</span><span class=\"s1\">data</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">Array</span><span class=\"s4\">):</span>\n-            <span class=\"s3\">assert </span><span class=\"s1\">data</span><span class=\"s4\">.</span><span class=\"s1\">ndim </span><span class=\"s4\">== </span><span class=\"s6\">1</span>\n-            <span class=\"s3\">if </span><span class=\"s1\">name </span><span class=\"s3\">is None</span><span class=\"s4\">:</span>\n-                <span class=\"s1\">name </span><span class=\"s4\">= </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">intp</span>\n-            <span class=\"s3\">return </span><span class=\"s1\">SeriesType</span><span class=\"s4\">(</span><span class=\"s1\">data</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">name</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s3\">return </span><span class=\"s1\">typer</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">type_callable</span><span class=\"s4\">(</span><span class=\"s1\">Index</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">type_index_constructor</span><span class=\"s4\">(</span><span class=\"s1\">context</span><span class=\"s4\">):</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">typer</span><span class=\"s4\">(</span><span class=\"s1\">data</span><span class=\"s4\">, </span><span class=\"s1\">hashmap</span><span class=\"s4\">=</span><span class=\"s3\">None</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">if </span><span class=\"s1\">isinstance</span><span class=\"s4\">(</span><span class=\"s1\">data</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">Array</span><span class=\"s4\">):</span>\n-            <span class=\"s3\">assert </span><span class=\"s1\">data</span><span class=\"s4\">.</span><span class=\"s1\">layout </span><span class=\"s4\">== </span><span class=\"s5\">&quot;C&quot;</span>\n-            <span class=\"s3\">assert </span><span class=\"s1\">data</span><span class=\"s4\">.</span><span class=\"s1\">ndim </span><span class=\"s4\">== </span><span class=\"s6\">1</span>\n-            <span class=\"s3\">assert </span><span class=\"s1\">hashmap </span><span class=\"s3\">is None or </span><span class=\"s1\">isinstance</span><span class=\"s4\">(</span><span class=\"s1\">hashmap</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">DictType</span><span class=\"s4\">)</span>\n-            <span class=\"s3\">return </span><span class=\"s1\">IndexType</span><span class=\"s4\">(</span><span class=\"s1\">data</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s1\">layout</span><span class=\"s4\">=</span><span class=\"s1\">data</span><span class=\"s4\">.</span><span class=\"s1\">layout</span><span class=\"s4\">, </span><span class=\"s1\">pyclass</span><span class=\"s4\">=</span><span class=\"s1\">Index</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s3\">return </span><span class=\"s1\">typer</span>\n-\n-\n-<span class=\"s0\"># Backend extensions for Index and Series and Frame</span>\n-<span class=\"s4\">@</span><span class=\"s1\">register_model</span><span class=\"s4\">(</span><span class=\"s1\">IndexType</span><span class=\"s4\">)</span>\n-<span class=\"s3\">class </span><span class=\"s1\">IndexModel</span><span class=\"s4\">(</span><span class=\"s1\">models</span><span class=\"s4\">.</span><span class=\"s1\">StructModel</span><span class=\"s4\">):</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">__init__</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">, </span><span class=\"s1\">dmm</span><span class=\"s4\">, </span><span class=\"s1\">fe_type</span><span class=\"s4\">) </span><span class=\"s1\">-&gt; </span><span class=\"s3\">None</span><span class=\"s4\">:</span>\n-        <span class=\"s0\"># We don't want the numpy string scalar type in our hashmap</span>\n-        <span class=\"s1\">members </span><span class=\"s4\">= [</span>\n-            <span class=\"s4\">(</span><span class=\"s5\">&quot;data&quot;</span><span class=\"s4\">, </span><span class=\"s1\">fe_type</span><span class=\"s4\">.</span><span class=\"s1\">as_array</span><span class=\"s4\">),</span>\n-            <span class=\"s0\"># This is an attempt to emulate our hashtable code with a numba</span>\n-            <span class=\"s0\"># typed dict</span>\n-            <span class=\"s0\"># It maps from values in the index to their integer positions in the array</span>\n-            <span class=\"s4\">(</span><span class=\"s5\">&quot;hashmap&quot;</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">DictType</span><span class=\"s4\">(</span><span class=\"s1\">fe_type</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">intp</span><span class=\"s4\">)),</span>\n-            <span class=\"s0\"># Pointer to the Index object this was created from, or that it</span>\n-            <span class=\"s0\"># boxes to</span>\n-            <span class=\"s0\"># https://numba.discourse.group/t/qst-how-to-cache-the-boxing-of-an-object/2128/2?u=lithomas1</span>\n-            <span class=\"s4\">(</span><span class=\"s5\">&quot;parent&quot;</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">pyobject</span><span class=\"s4\">),</span>\n-        <span class=\"s4\">]</span>\n-        <span class=\"s1\">models</span><span class=\"s4\">.</span><span class=\"s1\">StructModel</span><span class=\"s4\">.</span><span class=\"s1\">__init__</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">, </span><span class=\"s1\">dmm</span><span class=\"s4\">, </span><span class=\"s1\">fe_type</span><span class=\"s4\">, </span><span class=\"s1\">members</span><span class=\"s4\">)</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">register_model</span><span class=\"s4\">(</span><span class=\"s1\">SeriesType</span><span class=\"s4\">)</span>\n-<span class=\"s3\">class </span><span class=\"s1\">SeriesModel</span><span class=\"s4\">(</span><span class=\"s1\">models</span><span class=\"s4\">.</span><span class=\"s1\">StructModel</span><span class=\"s4\">):</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">__init__</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">, </span><span class=\"s1\">dmm</span><span class=\"s4\">, </span><span class=\"s1\">fe_type</span><span class=\"s4\">) </span><span class=\"s1\">-&gt; </span><span class=\"s3\">None</span><span class=\"s4\">:</span>\n-        <span class=\"s1\">members </span><span class=\"s4\">= [</span>\n-            <span class=\"s4\">(</span><span class=\"s5\">&quot;index&quot;</span><span class=\"s4\">, </span><span class=\"s1\">fe_type</span><span class=\"s4\">.</span><span class=\"s1\">index</span><span class=\"s4\">),</span>\n-            <span class=\"s4\">(</span><span class=\"s5\">&quot;values&quot;</span><span class=\"s4\">, </span><span class=\"s1\">fe_type</span><span class=\"s4\">.</span><span class=\"s1\">as_array</span><span class=\"s4\">),</span>\n-            <span class=\"s4\">(</span><span class=\"s5\">&quot;name&quot;</span><span class=\"s4\">, </span><span class=\"s1\">fe_type</span><span class=\"s4\">.</span><span class=\"s1\">namety</span><span class=\"s4\">),</span>\n-        <span class=\"s4\">]</span>\n-        <span class=\"s1\">models</span><span class=\"s4\">.</span><span class=\"s1\">StructModel</span><span class=\"s4\">.</span><span class=\"s1\">__init__</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">, </span><span class=\"s1\">dmm</span><span class=\"s4\">, </span><span class=\"s1\">fe_type</span><span class=\"s4\">, </span><span class=\"s1\">members</span><span class=\"s4\">)</span>\n-\n-\n-<span class=\"s1\">make_attribute_wrapper</span><span class=\"s4\">(</span><span class=\"s1\">IndexType</span><span class=\"s4\">, </span><span class=\"s5\">&quot;data&quot;</span><span class=\"s4\">, </span><span class=\"s5\">&quot;_data&quot;</span><span class=\"s4\">)</span>\n-<span class=\"s1\">make_attribute_wrapper</span><span class=\"s4\">(</span><span class=\"s1\">IndexType</span><span class=\"s4\">, </span><span class=\"s5\">&quot;hashmap&quot;</span><span class=\"s4\">, </span><span class=\"s5\">&quot;hashmap&quot;</span><span class=\"s4\">)</span>\n-\n-<span class=\"s1\">make_attribute_wrapper</span><span class=\"s4\">(</span><span class=\"s1\">SeriesType</span><span class=\"s4\">, </span><span class=\"s5\">&quot;index&quot;</span><span class=\"s4\">, </span><span class=\"s5\">&quot;index&quot;</span><span class=\"s4\">)</span>\n-<span class=\"s1\">make_attribute_wrapper</span><span class=\"s4\">(</span><span class=\"s1\">SeriesType</span><span class=\"s4\">, </span><span class=\"s5\">&quot;values&quot;</span><span class=\"s4\">, </span><span class=\"s5\">&quot;values&quot;</span><span class=\"s4\">)</span>\n-<span class=\"s1\">make_attribute_wrapper</span><span class=\"s4\">(</span><span class=\"s1\">SeriesType</span><span class=\"s4\">, </span><span class=\"s5\">&quot;name&quot;</span><span class=\"s4\">, </span><span class=\"s5\">&quot;name&quot;</span><span class=\"s4\">)</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">lower_builtin</span><span class=\"s4\">(</span><span class=\"s1\">Series</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">Array</span><span class=\"s4\">, </span><span class=\"s1\">IndexType</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">pdseries_constructor</span><span class=\"s4\">(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">sig</span><span class=\"s4\">, </span><span class=\"s1\">args</span><span class=\"s4\">):</span>\n-    <span class=\"s1\">data</span><span class=\"s4\">, </span><span class=\"s1\">index </span><span class=\"s4\">= </span><span class=\"s1\">args</span>\n-    <span class=\"s1\">series </span><span class=\"s4\">= </span><span class=\"s1\">cgutils</span><span class=\"s4\">.</span><span class=\"s1\">create_struct_proxy</span><span class=\"s4\">(</span><span class=\"s1\">sig</span><span class=\"s4\">.</span><span class=\"s1\">return_type</span><span class=\"s4\">)(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">index </span><span class=\"s4\">= </span><span class=\"s1\">index</span>\n-    <span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">values </span><span class=\"s4\">= </span><span class=\"s1\">data</span>\n-    <span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">name </span><span class=\"s4\">= </span><span class=\"s1\">context</span><span class=\"s4\">.</span><span class=\"s1\">get_constant</span><span class=\"s4\">(</span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">intp</span><span class=\"s4\">, </span><span class=\"s6\">0</span><span class=\"s4\">)</span>\n-    <span class=\"s3\">return </span><span class=\"s1\">impl_ret_borrowed</span><span class=\"s4\">(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">sig</span><span class=\"s4\">.</span><span class=\"s1\">return_type</span><span class=\"s4\">, </span><span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">_getvalue</span><span class=\"s4\">())</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">lower_builtin</span><span class=\"s4\">(</span><span class=\"s1\">Series</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">Array</span><span class=\"s4\">, </span><span class=\"s1\">IndexType</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">intp</span><span class=\"s4\">)</span>\n-<span class=\"s4\">@</span><span class=\"s1\">lower_builtin</span><span class=\"s4\">(</span><span class=\"s1\">Series</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">Array</span><span class=\"s4\">, </span><span class=\"s1\">IndexType</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">float64</span><span class=\"s4\">)</span>\n-<span class=\"s4\">@</span><span class=\"s1\">lower_builtin</span><span class=\"s4\">(</span><span class=\"s1\">Series</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">Array</span><span class=\"s4\">, </span><span class=\"s1\">IndexType</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">unicode_type</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">pdseries_constructor_with_name</span><span class=\"s4\">(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">sig</span><span class=\"s4\">, </span><span class=\"s1\">args</span><span class=\"s4\">):</span>\n-    <span class=\"s1\">data</span><span class=\"s4\">, </span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">name </span><span class=\"s4\">= </span><span class=\"s1\">args</span>\n-    <span class=\"s1\">series </span><span class=\"s4\">= </span><span class=\"s1\">cgutils</span><span class=\"s4\">.</span><span class=\"s1\">create_struct_proxy</span><span class=\"s4\">(</span><span class=\"s1\">sig</span><span class=\"s4\">.</span><span class=\"s1\">return_type</span><span class=\"s4\">)(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">index </span><span class=\"s4\">= </span><span class=\"s1\">index</span>\n-    <span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">values </span><span class=\"s4\">= </span><span class=\"s1\">data</span>\n-    <span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">name </span><span class=\"s4\">= </span><span class=\"s1\">name</span>\n-    <span class=\"s3\">return </span><span class=\"s1\">impl_ret_borrowed</span><span class=\"s4\">(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">sig</span><span class=\"s4\">.</span><span class=\"s1\">return_type</span><span class=\"s4\">, </span><span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">_getvalue</span><span class=\"s4\">())</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">lower_builtin</span><span class=\"s4\">(</span><span class=\"s1\">Index</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">Array</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">DictType</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">pyobject</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">index_constructor_2arg</span><span class=\"s4\">(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">sig</span><span class=\"s4\">, </span><span class=\"s1\">args</span><span class=\"s4\">):</span>\n-    <span class=\"s4\">(</span><span class=\"s1\">data</span><span class=\"s4\">, </span><span class=\"s1\">hashmap</span><span class=\"s4\">, </span><span class=\"s1\">parent</span><span class=\"s4\">) = </span><span class=\"s1\">args</span>\n-    <span class=\"s1\">index </span><span class=\"s4\">= </span><span class=\"s1\">cgutils</span><span class=\"s4\">.</span><span class=\"s1\">create_struct_proxy</span><span class=\"s4\">(</span><span class=\"s1\">sig</span><span class=\"s4\">.</span><span class=\"s1\">return_type</span><span class=\"s4\">)(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">data </span><span class=\"s4\">= </span><span class=\"s1\">data</span>\n-    <span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">hashmap </span><span class=\"s4\">= </span><span class=\"s1\">hashmap</span>\n-    <span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">parent </span><span class=\"s4\">= </span><span class=\"s1\">parent</span>\n-    <span class=\"s3\">return </span><span class=\"s1\">impl_ret_borrowed</span><span class=\"s4\">(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">sig</span><span class=\"s4\">.</span><span class=\"s1\">return_type</span><span class=\"s4\">, </span><span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">_getvalue</span><span class=\"s4\">())</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">lower_builtin</span><span class=\"s4\">(</span><span class=\"s1\">Index</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">Array</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">DictType</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">index_constructor_2arg_parent</span><span class=\"s4\">(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">sig</span><span class=\"s4\">, </span><span class=\"s1\">args</span><span class=\"s4\">):</span>\n-    <span class=\"s0\"># Basically same as index_constructor_1arg, but also lets you specify the</span>\n-    <span class=\"s0\"># parent object</span>\n-    <span class=\"s4\">(</span><span class=\"s1\">data</span><span class=\"s4\">, </span><span class=\"s1\">hashmap</span><span class=\"s4\">) = </span><span class=\"s1\">args</span>\n-    <span class=\"s1\">index </span><span class=\"s4\">= </span><span class=\"s1\">cgutils</span><span class=\"s4\">.</span><span class=\"s1\">create_struct_proxy</span><span class=\"s4\">(</span><span class=\"s1\">sig</span><span class=\"s4\">.</span><span class=\"s1\">return_type</span><span class=\"s4\">)(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">data </span><span class=\"s4\">= </span><span class=\"s1\">data</span>\n-    <span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">hashmap </span><span class=\"s4\">= </span><span class=\"s1\">hashmap</span>\n-    <span class=\"s3\">return </span><span class=\"s1\">impl_ret_borrowed</span><span class=\"s4\">(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">sig</span><span class=\"s4\">.</span><span class=\"s1\">return_type</span><span class=\"s4\">, </span><span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">_getvalue</span><span class=\"s4\">())</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">lower_builtin</span><span class=\"s4\">(</span><span class=\"s1\">Index</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">Array</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">index_constructor_1arg</span><span class=\"s4\">(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">sig</span><span class=\"s4\">, </span><span class=\"s1\">args</span><span class=\"s4\">):</span>\n-    <span class=\"s3\">from </span><span class=\"s1\">numba</span><span class=\"s4\">.</span><span class=\"s1\">typed </span><span class=\"s3\">import </span><span class=\"s1\">Dict</span>\n-\n-    <span class=\"s1\">key_type </span><span class=\"s4\">= </span><span class=\"s1\">sig</span><span class=\"s4\">.</span><span class=\"s1\">return_type</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span>\n-    <span class=\"s1\">value_type </span><span class=\"s4\">= </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">intp</span>\n-\n-    <span class=\"s3\">def </span><span class=\"s1\">index_impl</span><span class=\"s4\">(</span><span class=\"s1\">data</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">return </span><span class=\"s1\">Index</span><span class=\"s4\">(</span><span class=\"s1\">data</span><span class=\"s4\">, </span><span class=\"s1\">Dict</span><span class=\"s4\">.</span><span class=\"s1\">empty</span><span class=\"s4\">(</span><span class=\"s1\">key_type</span><span class=\"s4\">, </span><span class=\"s1\">value_type</span><span class=\"s4\">))</span>\n-\n-    <span class=\"s3\">return </span><span class=\"s1\">context</span><span class=\"s4\">.</span><span class=\"s1\">compile_internal</span><span class=\"s4\">(</span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">index_impl</span><span class=\"s4\">, </span><span class=\"s1\">sig</span><span class=\"s4\">, </span><span class=\"s1\">args</span><span class=\"s4\">)</span>\n-\n-\n-<span class=\"s0\"># Helper to convert the unicodecharseq (numpy string scalar) into a unicode_type</span>\n-<span class=\"s0\"># (regular string)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">maybe_cast_str</span><span class=\"s4\">(</span><span class=\"s1\">x</span><span class=\"s4\">):</span>\n-    <span class=\"s0\"># Dummy function that numba can overload</span>\n-    <span class=\"s3\">pass</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">overload</span><span class=\"s4\">(</span><span class=\"s1\">maybe_cast_str</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">maybe_cast_str_impl</span><span class=\"s4\">(</span><span class=\"s1\">x</span><span class=\"s4\">):</span>\n-    <span class=\"s2\">&quot;&quot;&quot;Converts numba UnicodeCharSeq (numpy string scalar) -&gt; unicode type (string). \n-    Is a no-op for other types.&quot;&quot;&quot;</span>\n-    <span class=\"s3\">if </span><span class=\"s1\">isinstance</span><span class=\"s4\">(</span><span class=\"s1\">x</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">UnicodeCharSeq</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">return lambda </span><span class=\"s1\">x</span><span class=\"s4\">: </span><span class=\"s1\">str</span><span class=\"s4\">(</span><span class=\"s1\">x</span><span class=\"s4\">)</span>\n-    <span class=\"s3\">else</span><span class=\"s4\">:</span>\n-        <span class=\"s3\">return lambda </span><span class=\"s1\">x</span><span class=\"s4\">: </span><span class=\"s1\">x</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">unbox</span><span class=\"s4\">(</span><span class=\"s1\">IndexType</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">unbox_index</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">, </span><span class=\"s1\">obj</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">):</span>\n-    <span class=\"s2\">&quot;&quot;&quot; \n-    Convert a Index object to a native structure. \n- \n-    Note: Object dtype is not allowed here \n-    &quot;&quot;&quot;</span>\n-    <span class=\"s1\">data_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">object_getattr_string</span><span class=\"s4\">(</span><span class=\"s1\">obj</span><span class=\"s4\">, </span><span class=\"s5\">&quot;_numba_data&quot;</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">index </span><span class=\"s4\">= </span><span class=\"s1\">cgutils</span><span class=\"s4\">.</span><span class=\"s1\">create_struct_proxy</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">)(</span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">builder</span><span class=\"s4\">)</span>\n-    <span class=\"s0\"># If we see an object array, assume its been validated as only containing strings</span>\n-    <span class=\"s0\"># We still need to do the conversion though</span>\n-    <span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">data </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">unbox</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">.</span><span class=\"s1\">as_array</span><span class=\"s4\">, </span><span class=\"s1\">data_obj</span><span class=\"s4\">).</span><span class=\"s1\">value</span>\n-    <span class=\"s1\">typed_dict_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">unserialize</span><span class=\"s4\">(</span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">serialize_object</span><span class=\"s4\">(</span><span class=\"s1\">numba</span><span class=\"s4\">.</span><span class=\"s1\">typed</span><span class=\"s4\">.</span><span class=\"s1\">Dict</span><span class=\"s4\">))</span>\n-    <span class=\"s0\"># Create an empty typed dict in numba for the hashmap for indexing</span>\n-    <span class=\"s0\"># equiv of numba.typed.Dict.empty(typ.dtype, types.intp)</span>\n-    <span class=\"s1\">arr_type_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">unserialize</span><span class=\"s4\">(</span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">serialize_object</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span><span class=\"s4\">))</span>\n-    <span class=\"s1\">intp_type_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">unserialize</span><span class=\"s4\">(</span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">serialize_object</span><span class=\"s4\">(</span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">intp</span><span class=\"s4\">))</span>\n-    <span class=\"s1\">hashmap_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">call_method</span><span class=\"s4\">(</span>\n-        <span class=\"s1\">typed_dict_obj</span><span class=\"s4\">, </span><span class=\"s5\">&quot;empty&quot;</span><span class=\"s4\">, (</span><span class=\"s1\">arr_type_obj</span><span class=\"s4\">, </span><span class=\"s1\">intp_type_obj</span><span class=\"s4\">)</span>\n-    <span class=\"s4\">)</span>\n-    <span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">hashmap </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">unbox</span><span class=\"s4\">(</span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">DictType</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">intp</span><span class=\"s4\">), </span><span class=\"s1\">hashmap_obj</span><span class=\"s4\">).</span><span class=\"s1\">value</span>\n-    <span class=\"s0\"># Set the parent for speedy boxing.</span>\n-    <span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">parent </span><span class=\"s4\">= </span><span class=\"s1\">obj</span>\n-\n-    <span class=\"s0\"># Decrefs</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">data_obj</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">arr_type_obj</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">intp_type_obj</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">typed_dict_obj</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s3\">return </span><span class=\"s1\">NativeValue</span><span class=\"s4\">(</span><span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">_getvalue</span><span class=\"s4\">())</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">unbox</span><span class=\"s4\">(</span><span class=\"s1\">SeriesType</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">unbox_series</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">, </span><span class=\"s1\">obj</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">):</span>\n-    <span class=\"s2\">&quot;&quot;&quot; \n-    Convert a Series object to a native structure. \n-    &quot;&quot;&quot;</span>\n-    <span class=\"s1\">index_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">object_getattr_string</span><span class=\"s4\">(</span><span class=\"s1\">obj</span><span class=\"s4\">, </span><span class=\"s5\">&quot;index&quot;</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">values_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">object_getattr_string</span><span class=\"s4\">(</span><span class=\"s1\">obj</span><span class=\"s4\">, </span><span class=\"s5\">&quot;values&quot;</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">name_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">object_getattr_string</span><span class=\"s4\">(</span><span class=\"s1\">obj</span><span class=\"s4\">, </span><span class=\"s5\">&quot;name&quot;</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s1\">series </span><span class=\"s4\">= </span><span class=\"s1\">cgutils</span><span class=\"s4\">.</span><span class=\"s1\">create_struct_proxy</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">)(</span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">builder</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">index </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">unbox</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">.</span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">index_obj</span><span class=\"s4\">).</span><span class=\"s1\">value</span>\n-    <span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">values </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">unbox</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">.</span><span class=\"s1\">values</span><span class=\"s4\">, </span><span class=\"s1\">values_obj</span><span class=\"s4\">).</span><span class=\"s1\">value</span>\n-    <span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">name </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">unbox</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">.</span><span class=\"s1\">namety</span><span class=\"s4\">, </span><span class=\"s1\">name_obj</span><span class=\"s4\">).</span><span class=\"s1\">value</span>\n-\n-    <span class=\"s0\"># Decrefs</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">index_obj</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">values_obj</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">name_obj</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s3\">return </span><span class=\"s1\">NativeValue</span><span class=\"s4\">(</span><span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">_getvalue</span><span class=\"s4\">())</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">box</span><span class=\"s4\">(</span><span class=\"s1\">IndexType</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">box_index</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">, </span><span class=\"s1\">val</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">):</span>\n-    <span class=\"s2\">&quot;&quot;&quot; \n-    Convert a native index structure to a Index object. \n- \n-    If our native index is of a numpy string dtype, we'll cast it to \n-    object. \n-    &quot;&quot;&quot;</span>\n-    <span class=\"s0\"># First build a Numpy array object, then wrap it in a Index</span>\n-    <span class=\"s1\">index </span><span class=\"s4\">= </span><span class=\"s1\">cgutils</span><span class=\"s4\">.</span><span class=\"s1\">create_struct_proxy</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">)(</span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">value</span><span class=\"s4\">=</span><span class=\"s1\">val</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s1\">res </span><span class=\"s4\">= </span><span class=\"s1\">cgutils</span><span class=\"s4\">.</span><span class=\"s1\">alloca_once_value</span><span class=\"s4\">(</span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">parent</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s0\"># Does parent exist?</span>\n-    <span class=\"s0\"># (it means already boxed once, or Index same as original df.index or df.columns)</span>\n-    <span class=\"s0\"># xref https://github.com/numba/numba/blob/596e8a55334cc46854e3192766e643767bd7c934/numba/core/boxing.py#L593C17-L593C17</span>\n-    <span class=\"s3\">with </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">builder</span><span class=\"s4\">.</span><span class=\"s1\">if_else</span><span class=\"s4\">(</span><span class=\"s1\">cgutils</span><span class=\"s4\">.</span><span class=\"s1\">is_not_null</span><span class=\"s4\">(</span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">parent</span><span class=\"s4\">)) </span><span class=\"s3\">as </span><span class=\"s4\">(</span>\n-        <span class=\"s1\">has_parent</span><span class=\"s4\">,</span>\n-        <span class=\"s1\">otherwise</span><span class=\"s4\">,</span>\n-    <span class=\"s4\">):</span>\n-        <span class=\"s3\">with </span><span class=\"s1\">has_parent</span><span class=\"s4\">:</span>\n-            <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">incref</span><span class=\"s4\">(</span><span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">parent</span><span class=\"s4\">)</span>\n-        <span class=\"s3\">with </span><span class=\"s1\">otherwise</span><span class=\"s4\">:</span>\n-            <span class=\"s0\"># TODO: preserve the original class for the index</span>\n-            <span class=\"s0\"># Also need preserve the name of the Index</span>\n-            <span class=\"s0\"># class_obj = c.pyapi.unserialize(c.pyapi.serialize_object(typ.pyclass))</span>\n-            <span class=\"s1\">class_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">unserialize</span><span class=\"s4\">(</span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">serialize_object</span><span class=\"s4\">(</span><span class=\"s1\">Index</span><span class=\"s4\">))</span>\n-            <span class=\"s1\">array_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">box</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">.</span><span class=\"s1\">as_array</span><span class=\"s4\">, </span><span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">data</span><span class=\"s4\">)</span>\n-            <span class=\"s3\">if </span><span class=\"s1\">isinstance</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">UnicodeCharSeq</span><span class=\"s4\">):</span>\n-                <span class=\"s0\"># We converted to numpy string dtype, convert back</span>\n-                <span class=\"s0\"># to object since _simple_new won't do that for uss</span>\n-                <span class=\"s1\">object_str_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">unserialize</span><span class=\"s4\">(</span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">serialize_object</span><span class=\"s4\">(</span><span class=\"s5\">&quot;object&quot;</span><span class=\"s4\">))</span>\n-                <span class=\"s1\">array_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">call_method</span><span class=\"s4\">(</span><span class=\"s1\">array_obj</span><span class=\"s4\">, </span><span class=\"s5\">&quot;astype&quot;</span><span class=\"s4\">, (</span><span class=\"s1\">object_str_obj</span><span class=\"s4\">,))</span>\n-                <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">object_str_obj</span><span class=\"s4\">)</span>\n-            <span class=\"s0\"># this is basically Index._simple_new(array_obj, name_obj) in python</span>\n-            <span class=\"s1\">index_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">call_method</span><span class=\"s4\">(</span><span class=\"s1\">class_obj</span><span class=\"s4\">, </span><span class=\"s5\">&quot;_simple_new&quot;</span><span class=\"s4\">, (</span><span class=\"s1\">array_obj</span><span class=\"s4\">,))</span>\n-            <span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">parent </span><span class=\"s4\">= </span><span class=\"s1\">index_obj</span>\n-            <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">builder</span><span class=\"s4\">.</span><span class=\"s1\">store</span><span class=\"s4\">(</span><span class=\"s1\">index_obj</span><span class=\"s4\">, </span><span class=\"s1\">res</span><span class=\"s4\">)</span>\n-\n-            <span class=\"s0\"># Decrefs</span>\n-            <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">class_obj</span><span class=\"s4\">)</span>\n-            <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">array_obj</span><span class=\"s4\">)</span>\n-    <span class=\"s3\">return </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">builder</span><span class=\"s4\">.</span><span class=\"s1\">load</span><span class=\"s4\">(</span><span class=\"s1\">res</span><span class=\"s4\">)</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">box</span><span class=\"s4\">(</span><span class=\"s1\">SeriesType</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">box_series</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">, </span><span class=\"s1\">val</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">):</span>\n-    <span class=\"s2\">&quot;&quot;&quot; \n-    Convert a native series structure to a Series object. \n-    &quot;&quot;&quot;</span>\n-    <span class=\"s1\">series </span><span class=\"s4\">= </span><span class=\"s1\">cgutils</span><span class=\"s4\">.</span><span class=\"s1\">create_struct_proxy</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">)(</span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">value</span><span class=\"s4\">=</span><span class=\"s1\">val</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">series_const_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">unserialize</span><span class=\"s4\">(</span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">serialize_object</span><span class=\"s4\">(</span><span class=\"s1\">Series</span><span class=\"s4\">.</span><span class=\"s1\">_from_mgr</span><span class=\"s4\">))</span>\n-    <span class=\"s1\">mgr_const_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">unserialize</span><span class=\"s4\">(</span>\n-        <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">serialize_object</span><span class=\"s4\">(</span><span class=\"s1\">SingleBlockManager</span><span class=\"s4\">.</span><span class=\"s1\">from_array</span><span class=\"s4\">)</span>\n-    <span class=\"s4\">)</span>\n-    <span class=\"s1\">index_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">box</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">.</span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">index</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">array_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">box</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">.</span><span class=\"s1\">as_array</span><span class=\"s4\">, </span><span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">values</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">name_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">box</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">.</span><span class=\"s1\">namety</span><span class=\"s4\">, </span><span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">name</span><span class=\"s4\">)</span>\n-    <span class=\"s0\"># This is basically equivalent of</span>\n-    <span class=\"s0\"># pd.Series(data=array_obj, index=index_obj)</span>\n-    <span class=\"s0\"># To improve perf, we will construct the Series from a manager</span>\n-    <span class=\"s0\"># object to avoid checks.</span>\n-    <span class=\"s0\"># We'll also set the name attribute manually to avoid validation</span>\n-    <span class=\"s1\">mgr_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">call_function_objargs</span><span class=\"s4\">(</span>\n-        <span class=\"s1\">mgr_const_obj</span><span class=\"s4\">,</span>\n-        <span class=\"s4\">(</span>\n-            <span class=\"s1\">array_obj</span><span class=\"s4\">,</span>\n-            <span class=\"s1\">index_obj</span><span class=\"s4\">,</span>\n-        <span class=\"s4\">),</span>\n-    <span class=\"s4\">)</span>\n-    <span class=\"s1\">mgr_axes_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">object_getattr_string</span><span class=\"s4\">(</span><span class=\"s1\">mgr_obj</span><span class=\"s4\">, </span><span class=\"s5\">&quot;axes&quot;</span><span class=\"s4\">)</span>\n-    <span class=\"s0\"># Series._constructor_from_mgr(mgr, axes)</span>\n-    <span class=\"s1\">series_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">call_function_objargs</span><span class=\"s4\">(</span>\n-        <span class=\"s1\">series_const_obj</span><span class=\"s4\">, (</span><span class=\"s1\">mgr_obj</span><span class=\"s4\">, </span><span class=\"s1\">mgr_axes_obj</span><span class=\"s4\">)</span>\n-    <span class=\"s4\">)</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">object_setattr_string</span><span class=\"s4\">(</span><span class=\"s1\">series_obj</span><span class=\"s4\">, </span><span class=\"s5\">&quot;_name&quot;</span><span class=\"s4\">, </span><span class=\"s1\">name_obj</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s0\"># Decrefs</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">series_const_obj</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">mgr_axes_obj</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">mgr_obj</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">mgr_const_obj</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">index_obj</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">array_obj</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">name_obj</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s3\">return </span><span class=\"s1\">series_obj</span>\n-\n-\n-<span class=\"s0\"># Add common series reductions (e.g. mean, sum),</span>\n-<span class=\"s0\"># and also add common binops (e.g. add, sub, mul, div)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">generate_series_reduction</span><span class=\"s4\">(</span><span class=\"s1\">ser_reduction</span><span class=\"s4\">, </span><span class=\"s1\">ser_method</span><span class=\"s4\">):</span>\n-    <span class=\"s4\">@</span><span class=\"s1\">overload_method</span><span class=\"s4\">(</span><span class=\"s1\">SeriesType</span><span class=\"s4\">, </span><span class=\"s1\">ser_reduction</span><span class=\"s4\">)</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">series_reduction</span><span class=\"s4\">(</span><span class=\"s1\">series</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">def </span><span class=\"s1\">series_reduction_impl</span><span class=\"s4\">(</span><span class=\"s1\">series</span><span class=\"s4\">):</span>\n-            <span class=\"s3\">return </span><span class=\"s1\">ser_method</span><span class=\"s4\">(</span><span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">values</span><span class=\"s4\">)</span>\n-\n-        <span class=\"s3\">return </span><span class=\"s1\">series_reduction_impl</span>\n-\n-    <span class=\"s3\">return </span><span class=\"s1\">series_reduction</span>\n-\n-\n-<span class=\"s3\">def </span><span class=\"s1\">generate_series_binop</span><span class=\"s4\">(</span><span class=\"s1\">binop</span><span class=\"s4\">):</span>\n-    <span class=\"s4\">@</span><span class=\"s1\">overload</span><span class=\"s4\">(</span><span class=\"s1\">binop</span><span class=\"s4\">)</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">series_binop</span><span class=\"s4\">(</span><span class=\"s1\">series1</span><span class=\"s4\">, </span><span class=\"s1\">value</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">if </span><span class=\"s1\">isinstance</span><span class=\"s4\">(</span><span class=\"s1\">series1</span><span class=\"s4\">, </span><span class=\"s1\">SeriesType</span><span class=\"s4\">):</span>\n-            <span class=\"s3\">if </span><span class=\"s1\">isinstance</span><span class=\"s4\">(</span><span class=\"s1\">value</span><span class=\"s4\">, </span><span class=\"s1\">SeriesType</span><span class=\"s4\">):</span>\n-\n-                <span class=\"s3\">def </span><span class=\"s1\">series_binop_impl</span><span class=\"s4\">(</span><span class=\"s1\">series1</span><span class=\"s4\">, </span><span class=\"s1\">series2</span><span class=\"s4\">):</span>\n-                    <span class=\"s0\"># TODO: Check index matching?</span>\n-                    <span class=\"s3\">return </span><span class=\"s1\">Series</span><span class=\"s4\">(</span>\n-                        <span class=\"s1\">binop</span><span class=\"s4\">(</span><span class=\"s1\">series1</span><span class=\"s4\">.</span><span class=\"s1\">values</span><span class=\"s4\">, </span><span class=\"s1\">series2</span><span class=\"s4\">.</span><span class=\"s1\">values</span><span class=\"s4\">),</span>\n-                        <span class=\"s1\">series1</span><span class=\"s4\">.</span><span class=\"s1\">index</span><span class=\"s4\">,</span>\n-                        <span class=\"s1\">series1</span><span class=\"s4\">.</span><span class=\"s1\">name</span><span class=\"s4\">,</span>\n-                    <span class=\"s4\">)</span>\n-\n-                <span class=\"s3\">return </span><span class=\"s1\">series_binop_impl</span>\n-            <span class=\"s3\">else</span><span class=\"s4\">:</span>\n-\n-                <span class=\"s3\">def </span><span class=\"s1\">series_binop_impl</span><span class=\"s4\">(</span><span class=\"s1\">series1</span><span class=\"s4\">, </span><span class=\"s1\">value</span><span class=\"s4\">):</span>\n-                    <span class=\"s3\">return </span><span class=\"s1\">Series</span><span class=\"s4\">(</span>\n-                        <span class=\"s1\">binop</span><span class=\"s4\">(</span><span class=\"s1\">series1</span><span class=\"s4\">.</span><span class=\"s1\">values</span><span class=\"s4\">, </span><span class=\"s1\">value</span><span class=\"s4\">), </span><span class=\"s1\">series1</span><span class=\"s4\">.</span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">series1</span><span class=\"s4\">.</span><span class=\"s1\">name</span>\n-                    <span class=\"s4\">)</span>\n-\n-                <span class=\"s3\">return </span><span class=\"s1\">series_binop_impl</span>\n-\n-    <span class=\"s3\">return </span><span class=\"s1\">series_binop</span>\n-\n-\n-<span class=\"s1\">series_reductions </span><span class=\"s4\">= [</span>\n-    <span class=\"s4\">(</span><span class=\"s5\">&quot;sum&quot;</span><span class=\"s4\">, </span><span class=\"s1\">np</span><span class=\"s4\">.</span><span class=\"s1\">sum</span><span class=\"s4\">),</span>\n-    <span class=\"s4\">(</span><span class=\"s5\">&quot;mean&quot;</span><span class=\"s4\">, </span><span class=\"s1\">np</span><span class=\"s4\">.</span><span class=\"s1\">mean</span><span class=\"s4\">),</span>\n-    <span class=\"s0\"># Disabled due to discrepancies between numba std. dev</span>\n-    <span class=\"s0\"># and pandas std. dev (no way to specify dof)</span>\n-    <span class=\"s0\"># (&quot;std&quot;, np.std),</span>\n-    <span class=\"s0\"># (&quot;var&quot;, np.var),</span>\n-    <span class=\"s4\">(</span><span class=\"s5\">&quot;min&quot;</span><span class=\"s4\">, </span><span class=\"s1\">np</span><span class=\"s4\">.</span><span class=\"s1\">min</span><span class=\"s4\">),</span>\n-    <span class=\"s4\">(</span><span class=\"s5\">&quot;max&quot;</span><span class=\"s4\">, </span><span class=\"s1\">np</span><span class=\"s4\">.</span><span class=\"s1\">max</span><span class=\"s4\">),</span>\n-<span class=\"s4\">]</span>\n-<span class=\"s3\">for </span><span class=\"s1\">reduction</span><span class=\"s4\">, </span><span class=\"s1\">reduction_method </span><span class=\"s3\">in </span><span class=\"s1\">series_reductions</span><span class=\"s4\">:</span>\n-    <span class=\"s1\">generate_series_reduction</span><span class=\"s4\">(</span><span class=\"s1\">reduction</span><span class=\"s4\">, </span><span class=\"s1\">reduction_method</span><span class=\"s4\">)</span>\n-\n-<span class=\"s1\">series_binops </span><span class=\"s4\">= [</span><span class=\"s1\">operator</span><span class=\"s4\">.</span><span class=\"s1\">add</span><span class=\"s4\">, </span><span class=\"s1\">operator</span><span class=\"s4\">.</span><span class=\"s1\">sub</span><span class=\"s4\">, </span><span class=\"s1\">operator</span><span class=\"s4\">.</span><span class=\"s1\">mul</span><span class=\"s4\">, </span><span class=\"s1\">operator</span><span class=\"s4\">.</span><span class=\"s1\">truediv</span><span class=\"s4\">]</span>\n-\n-<span class=\"s3\">for </span><span class=\"s1\">ser_binop </span><span class=\"s3\">in </span><span class=\"s1\">series_binops</span><span class=\"s4\">:</span>\n-    <span class=\"s1\">generate_series_binop</span><span class=\"s4\">(</span><span class=\"s1\">ser_binop</span><span class=\"s4\">)</span>\n-\n-\n-<span class=\"s0\"># get_loc on Index</span>\n-<span class=\"s4\">@</span><span class=\"s1\">overload_method</span><span class=\"s4\">(</span><span class=\"s1\">IndexType</span><span class=\"s4\">, </span><span class=\"s5\">&quot;get_loc&quot;</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">index_get_loc</span><span class=\"s4\">(</span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">item</span><span class=\"s4\">):</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">index_get_loc_impl</span><span class=\"s4\">(</span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">item</span><span class=\"s4\">):</span>\n-        <span class=\"s0\"># Initialize the hash table if not initialized</span>\n-        <span class=\"s3\">if </span><span class=\"s1\">len</span><span class=\"s4\">(</span><span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">hashmap</span><span class=\"s4\">) == </span><span class=\"s6\">0</span><span class=\"s4\">:</span>\n-            <span class=\"s3\">for </span><span class=\"s1\">i</span><span class=\"s4\">, </span><span class=\"s1\">val </span><span class=\"s3\">in </span><span class=\"s1\">enumerate</span><span class=\"s4\">(</span><span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">_data</span><span class=\"s4\">):</span>\n-                <span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">hashmap</span><span class=\"s4\">[</span><span class=\"s1\">val</span><span class=\"s4\">] = </span><span class=\"s1\">i</span>\n-        <span class=\"s3\">return </span><span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">hashmap</span><span class=\"s4\">[</span><span class=\"s1\">item</span><span class=\"s4\">]</span>\n-\n-    <span class=\"s3\">return </span><span class=\"s1\">index_get_loc_impl</span>\n-\n-\n-<span class=\"s0\"># Indexing for Series/Index</span>\n-<span class=\"s4\">@</span><span class=\"s1\">overload</span><span class=\"s4\">(</span><span class=\"s1\">operator</span><span class=\"s4\">.</span><span class=\"s1\">getitem</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">series_indexing</span><span class=\"s4\">(</span><span class=\"s1\">series</span><span class=\"s4\">, </span><span class=\"s1\">item</span><span class=\"s4\">):</span>\n-    <span class=\"s3\">if </span><span class=\"s1\">isinstance</span><span class=\"s4\">(</span><span class=\"s1\">series</span><span class=\"s4\">, </span><span class=\"s1\">SeriesType</span><span class=\"s4\">):</span>\n-\n-        <span class=\"s3\">def </span><span class=\"s1\">series_getitem</span><span class=\"s4\">(</span><span class=\"s1\">series</span><span class=\"s4\">, </span><span class=\"s1\">item</span><span class=\"s4\">):</span>\n-            <span class=\"s1\">loc </span><span class=\"s4\">= </span><span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">get_loc</span><span class=\"s4\">(</span><span class=\"s1\">item</span><span class=\"s4\">)</span>\n-            <span class=\"s3\">return </span><span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">iloc</span><span class=\"s4\">[</span><span class=\"s1\">loc</span><span class=\"s4\">]</span>\n-\n-        <span class=\"s3\">return </span><span class=\"s1\">series_getitem</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">overload</span><span class=\"s4\">(</span><span class=\"s1\">operator</span><span class=\"s4\">.</span><span class=\"s1\">getitem</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">index_indexing</span><span class=\"s4\">(</span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">idx</span><span class=\"s4\">):</span>\n-    <span class=\"s3\">if </span><span class=\"s1\">isinstance</span><span class=\"s4\">(</span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">IndexType</span><span class=\"s4\">):</span>\n-\n-        <span class=\"s3\">def </span><span class=\"s1\">index_getitem</span><span class=\"s4\">(</span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">idx</span><span class=\"s4\">):</span>\n-            <span class=\"s3\">return </span><span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">_data</span><span class=\"s4\">[</span><span class=\"s1\">idx</span><span class=\"s4\">]</span>\n-\n-        <span class=\"s3\">return </span><span class=\"s1\">index_getitem</span>\n-\n-\n-<span class=\"s3\">class </span><span class=\"s1\">IlocType</span><span class=\"s4\">(</span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">Type</span><span class=\"s4\">):</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">__init__</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">, </span><span class=\"s1\">obj_type</span><span class=\"s4\">) </span><span class=\"s1\">-&gt; </span><span class=\"s3\">None</span><span class=\"s4\">:</span>\n-        <span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">obj_type </span><span class=\"s4\">= </span><span class=\"s1\">obj_type</span>\n-        <span class=\"s1\">name </span><span class=\"s4\">= </span><span class=\"s5\">f&quot;iLocIndexer(</span><span class=\"s3\">{</span><span class=\"s1\">obj_type</span><span class=\"s3\">}</span><span class=\"s5\">)&quot;</span>\n-        <span class=\"s1\">super</span><span class=\"s4\">().</span><span class=\"s1\">__init__</span><span class=\"s4\">(</span><span class=\"s1\">name</span><span class=\"s4\">=</span><span class=\"s1\">name</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s4\">@</span><span class=\"s1\">property</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">key</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">return </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">obj_type</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">typeof_impl</span><span class=\"s4\">.</span><span class=\"s1\">register</span><span class=\"s4\">(</span><span class=\"s1\">_iLocIndexer</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">typeof_iloc</span><span class=\"s4\">(</span><span class=\"s1\">val</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">):</span>\n-    <span class=\"s1\">objtype </span><span class=\"s4\">= </span><span class=\"s1\">typeof_impl</span><span class=\"s4\">(</span><span class=\"s1\">val</span><span class=\"s4\">.</span><span class=\"s1\">obj</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">)</span>\n-    <span class=\"s3\">return </span><span class=\"s1\">IlocType</span><span class=\"s4\">(</span><span class=\"s1\">objtype</span><span class=\"s4\">)</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">type_callable</span><span class=\"s4\">(</span><span class=\"s1\">_iLocIndexer</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">type_iloc_constructor</span><span class=\"s4\">(</span><span class=\"s1\">context</span><span class=\"s4\">):</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">typer</span><span class=\"s4\">(</span><span class=\"s1\">obj</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">if </span><span class=\"s1\">isinstance</span><span class=\"s4\">(</span><span class=\"s1\">obj</span><span class=\"s4\">, </span><span class=\"s1\">SeriesType</span><span class=\"s4\">):</span>\n-            <span class=\"s3\">return </span><span class=\"s1\">IlocType</span><span class=\"s4\">(</span><span class=\"s1\">obj</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s3\">return </span><span class=\"s1\">typer</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">lower_builtin</span><span class=\"s4\">(</span><span class=\"s1\">_iLocIndexer</span><span class=\"s4\">, </span><span class=\"s1\">SeriesType</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">iloc_constructor</span><span class=\"s4\">(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">sig</span><span class=\"s4\">, </span><span class=\"s1\">args</span><span class=\"s4\">):</span>\n-    <span class=\"s4\">(</span><span class=\"s1\">obj</span><span class=\"s4\">,) = </span><span class=\"s1\">args</span>\n-    <span class=\"s1\">iloc_indexer </span><span class=\"s4\">= </span><span class=\"s1\">cgutils</span><span class=\"s4\">.</span><span class=\"s1\">create_struct_proxy</span><span class=\"s4\">(</span><span class=\"s1\">sig</span><span class=\"s4\">.</span><span class=\"s1\">return_type</span><span class=\"s4\">)(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">iloc_indexer</span><span class=\"s4\">.</span><span class=\"s1\">obj </span><span class=\"s4\">= </span><span class=\"s1\">obj</span>\n-    <span class=\"s3\">return </span><span class=\"s1\">impl_ret_borrowed</span><span class=\"s4\">(</span>\n-        <span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">sig</span><span class=\"s4\">.</span><span class=\"s1\">return_type</span><span class=\"s4\">, </span><span class=\"s1\">iloc_indexer</span><span class=\"s4\">.</span><span class=\"s1\">_getvalue</span><span class=\"s4\">()</span>\n-    <span class=\"s4\">)</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">register_model</span><span class=\"s4\">(</span><span class=\"s1\">IlocType</span><span class=\"s4\">)</span>\n-<span class=\"s3\">class </span><span class=\"s1\">ILocModel</span><span class=\"s4\">(</span><span class=\"s1\">models</span><span class=\"s4\">.</span><span class=\"s1\">StructModel</span><span class=\"s4\">):</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">__init__</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">, </span><span class=\"s1\">dmm</span><span class=\"s4\">, </span><span class=\"s1\">fe_type</span><span class=\"s4\">) </span><span class=\"s1\">-&gt; </span><span class=\"s3\">None</span><span class=\"s4\">:</span>\n-        <span class=\"s1\">members </span><span class=\"s4\">= [(</span><span class=\"s5\">&quot;obj&quot;</span><span class=\"s4\">, </span><span class=\"s1\">fe_type</span><span class=\"s4\">.</span><span class=\"s1\">obj_type</span><span class=\"s4\">)]</span>\n-        <span class=\"s1\">models</span><span class=\"s4\">.</span><span class=\"s1\">StructModel</span><span class=\"s4\">.</span><span class=\"s1\">__init__</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">, </span><span class=\"s1\">dmm</span><span class=\"s4\">, </span><span class=\"s1\">fe_type</span><span class=\"s4\">, </span><span class=\"s1\">members</span><span class=\"s4\">)</span>\n-\n-\n-<span class=\"s1\">make_attribute_wrapper</span><span class=\"s4\">(</span><span class=\"s1\">IlocType</span><span class=\"s4\">, </span><span class=\"s5\">&quot;obj&quot;</span><span class=\"s4\">, </span><span class=\"s5\">&quot;obj&quot;</span><span class=\"s4\">)</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">overload_attribute</span><span class=\"s4\">(</span><span class=\"s1\">SeriesType</span><span class=\"s4\">, </span><span class=\"s5\">&quot;iloc&quot;</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">series_iloc</span><span class=\"s4\">(</span><span class=\"s1\">series</span><span class=\"s4\">):</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">get</span><span class=\"s4\">(</span><span class=\"s1\">series</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">return </span><span class=\"s1\">_iLocIndexer</span><span class=\"s4\">(</span><span class=\"s1\">series</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s3\">return </span><span class=\"s1\">get</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">overload</span><span class=\"s4\">(</span><span class=\"s1\">operator</span><span class=\"s4\">.</span><span class=\"s1\">getitem</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">iloc_getitem</span><span class=\"s4\">(</span><span class=\"s1\">iloc_indexer</span><span class=\"s4\">, </span><span class=\"s1\">i</span><span class=\"s4\">):</span>\n-    <span class=\"s3\">if </span><span class=\"s1\">isinstance</span><span class=\"s4\">(</span><span class=\"s1\">iloc_indexer</span><span class=\"s4\">, </span><span class=\"s1\">IlocType</span><span class=\"s4\">):</span>\n-\n-        <span class=\"s3\">def </span><span class=\"s1\">getitem_impl</span><span class=\"s4\">(</span><span class=\"s1\">iloc_indexer</span><span class=\"s4\">, </span><span class=\"s1\">i</span><span class=\"s4\">):</span>\n-            <span class=\"s3\">return </span><span class=\"s1\">iloc_indexer</span><span class=\"s4\">.</span><span class=\"s1\">obj</span><span class=\"s4\">.</span><span class=\"s1\">values</span><span class=\"s4\">[</span><span class=\"s1\">i</span><span class=\"s4\">]</span>\n-\n-        <span class=\"s3\">return </span><span class=\"s1\">getitem_impl</span>\n+<span class=\"s1\">db </span><span class=\"s2\">= </span><span class=\"s1\">SQLAlchemy</span><span class=\"s2\">()</span>\n+<span class=\"s1\">migrate </span><span class=\"s2\">= </span><span class=\"s1\">Migrate</span><span class=\"s2\">()</span>\n+<span class=\"s1\">mail </span><span class=\"s2\">= </span><span class=\"s1\">Mail</span><span class=\"s2\">()</span>\n </pre>\n </body>\n </html>\n\\ No newline at end of file\n", "path": "exportToHTML/extensions.py.html", "printDiff": "@@ -3,13 +3,9 @@\n <title>extensions.py</title>\n <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n <style type=\"text/css\">\n-.s0 { color: #7a7e85;}\n+.s0 { color: #cf8e6d;}\n .s1 { color: #bcbec4;}\n-.s2 { color: #5f826b; font-style: italic;}\n-.s3 { color: #cf8e6d;}\n-.s4 { color: #bcbec4;}\n-.s5 { color: #6aab73;}\n-.s6 { color: #2aacb8;}\n+.s2 { color: #bcbec4;}\n </style>\n </head>\n <body bgcolor=\"#1e1f22\">\n@@ -18,590 +14,13 @@\n <font face=\"Arial, Helvetica\" color=\"#000000\">\n extensions.py</font>\n </center></td></tr></table>\n-<pre><span class=\"s0\"># Disable type checking for this module since numba's internals</span>\n-<span class=\"s0\"># are not typed, and we use numba's internals via its extension API</span>\n-<span class=\"s0\"># mypy: ignore-errors</span>\n-<span class=\"s2\">&quot;&quot;&quot; \n-Utility classes/functions to let numba recognize \n-pandas Index/Series/DataFrame \n- \n-Mostly vendored from https://github.com/numba/numba/blob/main/numba/tests/pdlike_usecase.py \n-&quot;&quot;&quot;</span>\n+<pre><span class=\"s0\">from </span><span class=\"s1\">flask_sqlalchemy </span><span class=\"s0\">import </span><span class=\"s1\">SQLAlchemy</span>\n+<span class=\"s0\">from </span><span class=\"s1\">flask_migrate </span><span class=\"s0\">import </span><span class=\"s1\">Migrate</span>\n+<span class=\"s0\">from </span><span class=\"s1\">flask_mail </span><span class=\"s0\">import </span><span class=\"s1\">Mail</span>\n \n-<span class=\"s3\">from </span><span class=\"s1\">__future__ </span><span class=\"s3\">import </span><span class=\"s1\">annotations</span>\n-\n-<span class=\"s3\">from </span><span class=\"s1\">contextlib </span><span class=\"s3\">import </span><span class=\"s1\">contextmanager</span>\n-<span class=\"s3\">import </span><span class=\"s1\">operator</span>\n-\n-<span class=\"s3\">import </span><span class=\"s1\">numba</span>\n-<span class=\"s3\">from </span><span class=\"s1\">numba </span><span class=\"s3\">import </span><span class=\"s1\">types</span>\n-<span class=\"s3\">from </span><span class=\"s1\">numba</span><span class=\"s4\">.</span><span class=\"s1\">core </span><span class=\"s3\">import </span><span class=\"s1\">cgutils</span>\n-<span class=\"s3\">from </span><span class=\"s1\">numba</span><span class=\"s4\">.</span><span class=\"s1\">core</span><span class=\"s4\">.</span><span class=\"s1\">datamodel </span><span class=\"s3\">import </span><span class=\"s1\">models</span>\n-<span class=\"s3\">from </span><span class=\"s1\">numba</span><span class=\"s4\">.</span><span class=\"s1\">core</span><span class=\"s4\">.</span><span class=\"s1\">extending </span><span class=\"s3\">import </span><span class=\"s4\">(</span>\n-    <span class=\"s1\">NativeValue</span><span class=\"s4\">,</span>\n-    <span class=\"s1\">box</span><span class=\"s4\">,</span>\n-    <span class=\"s1\">lower_builtin</span><span class=\"s4\">,</span>\n-    <span class=\"s1\">make_attribute_wrapper</span><span class=\"s4\">,</span>\n-    <span class=\"s1\">overload</span><span class=\"s4\">,</span>\n-    <span class=\"s1\">overload_attribute</span><span class=\"s4\">,</span>\n-    <span class=\"s1\">overload_method</span><span class=\"s4\">,</span>\n-    <span class=\"s1\">register_model</span><span class=\"s4\">,</span>\n-    <span class=\"s1\">type_callable</span><span class=\"s4\">,</span>\n-    <span class=\"s1\">typeof_impl</span><span class=\"s4\">,</span>\n-    <span class=\"s1\">unbox</span><span class=\"s4\">,</span>\n-<span class=\"s4\">)</span>\n-<span class=\"s3\">from </span><span class=\"s1\">numba</span><span class=\"s4\">.</span><span class=\"s1\">core</span><span class=\"s4\">.</span><span class=\"s1\">imputils </span><span class=\"s3\">import </span><span class=\"s1\">impl_ret_borrowed</span>\n-<span class=\"s3\">import </span><span class=\"s1\">numpy </span><span class=\"s3\">as </span><span class=\"s1\">np</span>\n-\n-<span class=\"s3\">from </span><span class=\"s1\">pandas</span><span class=\"s4\">.</span><span class=\"s1\">_libs </span><span class=\"s3\">import </span><span class=\"s1\">lib</span>\n-\n-<span class=\"s3\">from </span><span class=\"s1\">pandas</span><span class=\"s4\">.</span><span class=\"s1\">core</span><span class=\"s4\">.</span><span class=\"s1\">indexes</span><span class=\"s4\">.</span><span class=\"s1\">base </span><span class=\"s3\">import </span><span class=\"s1\">Index</span>\n-<span class=\"s3\">from </span><span class=\"s1\">pandas</span><span class=\"s4\">.</span><span class=\"s1\">core</span><span class=\"s4\">.</span><span class=\"s1\">indexing </span><span class=\"s3\">import </span><span class=\"s1\">_iLocIndexer</span>\n-<span class=\"s3\">from </span><span class=\"s1\">pandas</span><span class=\"s4\">.</span><span class=\"s1\">core</span><span class=\"s4\">.</span><span class=\"s1\">internals </span><span class=\"s3\">import </span><span class=\"s1\">SingleBlockManager</span>\n-<span class=\"s3\">from </span><span class=\"s1\">pandas</span><span class=\"s4\">.</span><span class=\"s1\">core</span><span class=\"s4\">.</span><span class=\"s1\">series </span><span class=\"s3\">import </span><span class=\"s1\">Series</span>\n-\n-\n-<span class=\"s0\"># Helper function to hack around fact that Index casts numpy string dtype to object</span>\n-<span class=\"s0\">#</span>\n-<span class=\"s0\"># Idea is to set an attribute on a Index called _numba_data</span>\n-<span class=\"s0\"># that is the original data, or the object data casted to numpy string dtype,</span>\n-<span class=\"s0\"># with a context manager that is unset afterwards</span>\n-<span class=\"s4\">@</span><span class=\"s1\">contextmanager</span>\n-<span class=\"s3\">def </span><span class=\"s1\">set_numba_data</span><span class=\"s4\">(</span><span class=\"s1\">index</span><span class=\"s4\">: </span><span class=\"s1\">Index</span><span class=\"s4\">):</span>\n-    <span class=\"s1\">numba_data </span><span class=\"s4\">= </span><span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">_data</span>\n-    <span class=\"s3\">if </span><span class=\"s1\">numba_data</span><span class=\"s4\">.</span><span class=\"s1\">dtype </span><span class=\"s4\">== </span><span class=\"s1\">object</span><span class=\"s4\">:</span>\n-        <span class=\"s3\">if not </span><span class=\"s1\">lib</span><span class=\"s4\">.</span><span class=\"s1\">is_string_array</span><span class=\"s4\">(</span><span class=\"s1\">numba_data</span><span class=\"s4\">):</span>\n-            <span class=\"s3\">raise </span><span class=\"s1\">ValueError</span><span class=\"s4\">(</span>\n-                <span class=\"s5\">&quot;The numba engine only supports using string or numeric column names&quot;</span>\n-            <span class=\"s4\">)</span>\n-        <span class=\"s1\">numba_data </span><span class=\"s4\">= </span><span class=\"s1\">numba_data</span><span class=\"s4\">.</span><span class=\"s1\">astype</span><span class=\"s4\">(</span><span class=\"s5\">&quot;U&quot;</span><span class=\"s4\">)</span>\n-    <span class=\"s3\">try</span><span class=\"s4\">:</span>\n-        <span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">_numba_data </span><span class=\"s4\">= </span><span class=\"s1\">numba_data</span>\n-        <span class=\"s3\">yield </span><span class=\"s1\">index</span>\n-    <span class=\"s3\">finally</span><span class=\"s4\">:</span>\n-        <span class=\"s3\">del </span><span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">_numba_data</span>\n-\n-\n-<span class=\"s0\"># TODO: Range index support</span>\n-<span class=\"s0\"># (this currently lowers OK, but does not round-trip)</span>\n-<span class=\"s3\">class </span><span class=\"s1\">IndexType</span><span class=\"s4\">(</span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">Type</span><span class=\"s4\">):</span>\n-    <span class=\"s2\">&quot;&quot;&quot; \n-    The type class for Index objects. \n-    &quot;&quot;&quot;</span>\n-\n-    <span class=\"s3\">def </span><span class=\"s1\">__init__</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">, </span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s1\">layout</span><span class=\"s4\">, </span><span class=\"s1\">pyclass</span><span class=\"s4\">: </span><span class=\"s1\">any</span><span class=\"s4\">) </span><span class=\"s1\">-&gt; </span><span class=\"s3\">None</span><span class=\"s4\">:</span>\n-        <span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">pyclass </span><span class=\"s4\">= </span><span class=\"s1\">pyclass</span>\n-        <span class=\"s1\">name </span><span class=\"s4\">= </span><span class=\"s5\">f&quot;index(</span><span class=\"s3\">{</span><span class=\"s1\">dtype</span><span class=\"s3\">}</span><span class=\"s5\">, </span><span class=\"s3\">{</span><span class=\"s1\">layout</span><span class=\"s3\">}</span><span class=\"s5\">)&quot;</span>\n-        <span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">dtype </span><span class=\"s4\">= </span><span class=\"s1\">dtype</span>\n-        <span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">layout </span><span class=\"s4\">= </span><span class=\"s1\">layout</span>\n-        <span class=\"s1\">super</span><span class=\"s4\">().</span><span class=\"s1\">__init__</span><span class=\"s4\">(</span><span class=\"s1\">name</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s4\">@</span><span class=\"s1\">property</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">key</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">return </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">pyclass</span><span class=\"s4\">, </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">layout</span>\n-\n-    <span class=\"s4\">@</span><span class=\"s1\">property</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">as_array</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">return </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">Array</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s6\">1</span><span class=\"s4\">, </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">layout</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s3\">def </span><span class=\"s1\">copy</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">, </span><span class=\"s1\">dtype</span><span class=\"s4\">=</span><span class=\"s3\">None</span><span class=\"s4\">, </span><span class=\"s1\">ndim</span><span class=\"s4\">: </span><span class=\"s1\">int </span><span class=\"s4\">= </span><span class=\"s6\">1</span><span class=\"s4\">, </span><span class=\"s1\">layout</span><span class=\"s4\">=</span><span class=\"s3\">None</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">assert </span><span class=\"s1\">ndim </span><span class=\"s4\">== </span><span class=\"s6\">1</span>\n-        <span class=\"s3\">if </span><span class=\"s1\">dtype </span><span class=\"s3\">is None</span><span class=\"s4\">:</span>\n-            <span class=\"s1\">dtype </span><span class=\"s4\">= </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span>\n-        <span class=\"s1\">layout </span><span class=\"s4\">= </span><span class=\"s1\">layout </span><span class=\"s3\">or </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">layout</span>\n-        <span class=\"s3\">return </span><span class=\"s1\">type</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">)(</span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s1\">layout</span><span class=\"s4\">, </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">pyclass</span><span class=\"s4\">)</span>\n-\n-\n-<span class=\"s3\">class </span><span class=\"s1\">SeriesType</span><span class=\"s4\">(</span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">Type</span><span class=\"s4\">):</span>\n-    <span class=\"s2\">&quot;&quot;&quot; \n-    The type class for Series objects. \n-    &quot;&quot;&quot;</span>\n-\n-    <span class=\"s3\">def </span><span class=\"s1\">__init__</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">, </span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">namety</span><span class=\"s4\">) </span><span class=\"s1\">-&gt; </span><span class=\"s3\">None</span><span class=\"s4\">:</span>\n-        <span class=\"s3\">assert </span><span class=\"s1\">isinstance</span><span class=\"s4\">(</span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">IndexType</span><span class=\"s4\">)</span>\n-        <span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">dtype </span><span class=\"s4\">= </span><span class=\"s1\">dtype</span>\n-        <span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">index </span><span class=\"s4\">= </span><span class=\"s1\">index</span>\n-        <span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">values </span><span class=\"s4\">= </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">Array</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s6\">1</span><span class=\"s4\">, </span><span class=\"s5\">&quot;C&quot;</span><span class=\"s4\">)</span>\n-        <span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">namety </span><span class=\"s4\">= </span><span class=\"s1\">namety</span>\n-        <span class=\"s1\">name </span><span class=\"s4\">= </span><span class=\"s5\">f&quot;series(</span><span class=\"s3\">{</span><span class=\"s1\">dtype</span><span class=\"s3\">}</span><span class=\"s5\">, </span><span class=\"s3\">{</span><span class=\"s1\">index</span><span class=\"s3\">}</span><span class=\"s5\">, </span><span class=\"s3\">{</span><span class=\"s1\">namety</span><span class=\"s3\">}</span><span class=\"s5\">)&quot;</span>\n-        <span class=\"s1\">super</span><span class=\"s4\">().</span><span class=\"s1\">__init__</span><span class=\"s4\">(</span><span class=\"s1\">name</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s4\">@</span><span class=\"s1\">property</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">key</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">return </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">namety</span>\n-\n-    <span class=\"s4\">@</span><span class=\"s1\">property</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">as_array</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">return </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">values</span>\n-\n-    <span class=\"s3\">def </span><span class=\"s1\">copy</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">, </span><span class=\"s1\">dtype</span><span class=\"s4\">=</span><span class=\"s3\">None</span><span class=\"s4\">, </span><span class=\"s1\">ndim</span><span class=\"s4\">: </span><span class=\"s1\">int </span><span class=\"s4\">= </span><span class=\"s6\">1</span><span class=\"s4\">, </span><span class=\"s1\">layout</span><span class=\"s4\">: </span><span class=\"s1\">str </span><span class=\"s4\">= </span><span class=\"s5\">&quot;C&quot;</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">assert </span><span class=\"s1\">ndim </span><span class=\"s4\">== </span><span class=\"s6\">1</span>\n-        <span class=\"s3\">assert </span><span class=\"s1\">layout </span><span class=\"s4\">== </span><span class=\"s5\">&quot;C&quot;</span>\n-        <span class=\"s3\">if </span><span class=\"s1\">dtype </span><span class=\"s3\">is None</span><span class=\"s4\">:</span>\n-            <span class=\"s1\">dtype </span><span class=\"s4\">= </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span>\n-        <span class=\"s3\">return </span><span class=\"s1\">type</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">)(</span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">namety</span><span class=\"s4\">)</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">typeof_impl</span><span class=\"s4\">.</span><span class=\"s1\">register</span><span class=\"s4\">(</span><span class=\"s1\">Index</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">typeof_index</span><span class=\"s4\">(</span><span class=\"s1\">val</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">):</span>\n-    <span class=\"s2\">&quot;&quot;&quot; \n-    This will assume that only strings are in object dtype \n-    index. \n-    (you should check this before this gets lowered down to numba) \n-    &quot;&quot;&quot;</span>\n-    <span class=\"s0\"># arrty = typeof_impl(val._data, c)</span>\n-    <span class=\"s1\">arrty </span><span class=\"s4\">= </span><span class=\"s1\">typeof_impl</span><span class=\"s4\">(</span><span class=\"s1\">val</span><span class=\"s4\">.</span><span class=\"s1\">_numba_data</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">)</span>\n-    <span class=\"s3\">assert </span><span class=\"s1\">arrty</span><span class=\"s4\">.</span><span class=\"s1\">ndim </span><span class=\"s4\">== </span><span class=\"s6\">1</span>\n-    <span class=\"s3\">return </span><span class=\"s1\">IndexType</span><span class=\"s4\">(</span><span class=\"s1\">arrty</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s1\">arrty</span><span class=\"s4\">.</span><span class=\"s1\">layout</span><span class=\"s4\">, </span><span class=\"s1\">type</span><span class=\"s4\">(</span><span class=\"s1\">val</span><span class=\"s4\">))</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">typeof_impl</span><span class=\"s4\">.</span><span class=\"s1\">register</span><span class=\"s4\">(</span><span class=\"s1\">Series</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">typeof_series</span><span class=\"s4\">(</span><span class=\"s1\">val</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">):</span>\n-    <span class=\"s1\">index </span><span class=\"s4\">= </span><span class=\"s1\">typeof_impl</span><span class=\"s4\">(</span><span class=\"s1\">val</span><span class=\"s4\">.</span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">arrty </span><span class=\"s4\">= </span><span class=\"s1\">typeof_impl</span><span class=\"s4\">(</span><span class=\"s1\">val</span><span class=\"s4\">.</span><span class=\"s1\">values</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">namety </span><span class=\"s4\">= </span><span class=\"s1\">typeof_impl</span><span class=\"s4\">(</span><span class=\"s1\">val</span><span class=\"s4\">.</span><span class=\"s1\">name</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">)</span>\n-    <span class=\"s3\">assert </span><span class=\"s1\">arrty</span><span class=\"s4\">.</span><span class=\"s1\">ndim </span><span class=\"s4\">== </span><span class=\"s6\">1</span>\n-    <span class=\"s3\">assert </span><span class=\"s1\">arrty</span><span class=\"s4\">.</span><span class=\"s1\">layout </span><span class=\"s4\">== </span><span class=\"s5\">&quot;C&quot;</span>\n-    <span class=\"s3\">return </span><span class=\"s1\">SeriesType</span><span class=\"s4\">(</span><span class=\"s1\">arrty</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">namety</span><span class=\"s4\">)</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">type_callable</span><span class=\"s4\">(</span><span class=\"s1\">Series</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">type_series_constructor</span><span class=\"s4\">(</span><span class=\"s1\">context</span><span class=\"s4\">):</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">typer</span><span class=\"s4\">(</span><span class=\"s1\">data</span><span class=\"s4\">, </span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">name</span><span class=\"s4\">=</span><span class=\"s3\">None</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">if </span><span class=\"s1\">isinstance</span><span class=\"s4\">(</span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">IndexType</span><span class=\"s4\">) </span><span class=\"s3\">and </span><span class=\"s1\">isinstance</span><span class=\"s4\">(</span><span class=\"s1\">data</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">Array</span><span class=\"s4\">):</span>\n-            <span class=\"s3\">assert </span><span class=\"s1\">data</span><span class=\"s4\">.</span><span class=\"s1\">ndim </span><span class=\"s4\">== </span><span class=\"s6\">1</span>\n-            <span class=\"s3\">if </span><span class=\"s1\">name </span><span class=\"s3\">is None</span><span class=\"s4\">:</span>\n-                <span class=\"s1\">name </span><span class=\"s4\">= </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">intp</span>\n-            <span class=\"s3\">return </span><span class=\"s1\">SeriesType</span><span class=\"s4\">(</span><span class=\"s1\">data</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">name</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s3\">return </span><span class=\"s1\">typer</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">type_callable</span><span class=\"s4\">(</span><span class=\"s1\">Index</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">type_index_constructor</span><span class=\"s4\">(</span><span class=\"s1\">context</span><span class=\"s4\">):</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">typer</span><span class=\"s4\">(</span><span class=\"s1\">data</span><span class=\"s4\">, </span><span class=\"s1\">hashmap</span><span class=\"s4\">=</span><span class=\"s3\">None</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">if </span><span class=\"s1\">isinstance</span><span class=\"s4\">(</span><span class=\"s1\">data</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">Array</span><span class=\"s4\">):</span>\n-            <span class=\"s3\">assert </span><span class=\"s1\">data</span><span class=\"s4\">.</span><span class=\"s1\">layout </span><span class=\"s4\">== </span><span class=\"s5\">&quot;C&quot;</span>\n-            <span class=\"s3\">assert </span><span class=\"s1\">data</span><span class=\"s4\">.</span><span class=\"s1\">ndim </span><span class=\"s4\">== </span><span class=\"s6\">1</span>\n-            <span class=\"s3\">assert </span><span class=\"s1\">hashmap </span><span class=\"s3\">is None or </span><span class=\"s1\">isinstance</span><span class=\"s4\">(</span><span class=\"s1\">hashmap</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">DictType</span><span class=\"s4\">)</span>\n-            <span class=\"s3\">return </span><span class=\"s1\">IndexType</span><span class=\"s4\">(</span><span class=\"s1\">data</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s1\">layout</span><span class=\"s4\">=</span><span class=\"s1\">data</span><span class=\"s4\">.</span><span class=\"s1\">layout</span><span class=\"s4\">, </span><span class=\"s1\">pyclass</span><span class=\"s4\">=</span><span class=\"s1\">Index</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s3\">return </span><span class=\"s1\">typer</span>\n-\n-\n-<span class=\"s0\"># Backend extensions for Index and Series and Frame</span>\n-<span class=\"s4\">@</span><span class=\"s1\">register_model</span><span class=\"s4\">(</span><span class=\"s1\">IndexType</span><span class=\"s4\">)</span>\n-<span class=\"s3\">class </span><span class=\"s1\">IndexModel</span><span class=\"s4\">(</span><span class=\"s1\">models</span><span class=\"s4\">.</span><span class=\"s1\">StructModel</span><span class=\"s4\">):</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">__init__</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">, </span><span class=\"s1\">dmm</span><span class=\"s4\">, </span><span class=\"s1\">fe_type</span><span class=\"s4\">) </span><span class=\"s1\">-&gt; </span><span class=\"s3\">None</span><span class=\"s4\">:</span>\n-        <span class=\"s0\"># We don't want the numpy string scalar type in our hashmap</span>\n-        <span class=\"s1\">members </span><span class=\"s4\">= [</span>\n-            <span class=\"s4\">(</span><span class=\"s5\">&quot;data&quot;</span><span class=\"s4\">, </span><span class=\"s1\">fe_type</span><span class=\"s4\">.</span><span class=\"s1\">as_array</span><span class=\"s4\">),</span>\n-            <span class=\"s0\"># This is an attempt to emulate our hashtable code with a numba</span>\n-            <span class=\"s0\"># typed dict</span>\n-            <span class=\"s0\"># It maps from values in the index to their integer positions in the array</span>\n-            <span class=\"s4\">(</span><span class=\"s5\">&quot;hashmap&quot;</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">DictType</span><span class=\"s4\">(</span><span class=\"s1\">fe_type</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">intp</span><span class=\"s4\">)),</span>\n-            <span class=\"s0\"># Pointer to the Index object this was created from, or that it</span>\n-            <span class=\"s0\"># boxes to</span>\n-            <span class=\"s0\"># https://numba.discourse.group/t/qst-how-to-cache-the-boxing-of-an-object/2128/2?u=lithomas1</span>\n-            <span class=\"s4\">(</span><span class=\"s5\">&quot;parent&quot;</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">pyobject</span><span class=\"s4\">),</span>\n-        <span class=\"s4\">]</span>\n-        <span class=\"s1\">models</span><span class=\"s4\">.</span><span class=\"s1\">StructModel</span><span class=\"s4\">.</span><span class=\"s1\">__init__</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">, </span><span class=\"s1\">dmm</span><span class=\"s4\">, </span><span class=\"s1\">fe_type</span><span class=\"s4\">, </span><span class=\"s1\">members</span><span class=\"s4\">)</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">register_model</span><span class=\"s4\">(</span><span class=\"s1\">SeriesType</span><span class=\"s4\">)</span>\n-<span class=\"s3\">class </span><span class=\"s1\">SeriesModel</span><span class=\"s4\">(</span><span class=\"s1\">models</span><span class=\"s4\">.</span><span class=\"s1\">StructModel</span><span class=\"s4\">):</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">__init__</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">, </span><span class=\"s1\">dmm</span><span class=\"s4\">, </span><span class=\"s1\">fe_type</span><span class=\"s4\">) </span><span class=\"s1\">-&gt; </span><span class=\"s3\">None</span><span class=\"s4\">:</span>\n-        <span class=\"s1\">members </span><span class=\"s4\">= [</span>\n-            <span class=\"s4\">(</span><span class=\"s5\">&quot;index&quot;</span><span class=\"s4\">, </span><span class=\"s1\">fe_type</span><span class=\"s4\">.</span><span class=\"s1\">index</span><span class=\"s4\">),</span>\n-            <span class=\"s4\">(</span><span class=\"s5\">&quot;values&quot;</span><span class=\"s4\">, </span><span class=\"s1\">fe_type</span><span class=\"s4\">.</span><span class=\"s1\">as_array</span><span class=\"s4\">),</span>\n-            <span class=\"s4\">(</span><span class=\"s5\">&quot;name&quot;</span><span class=\"s4\">, </span><span class=\"s1\">fe_type</span><span class=\"s4\">.</span><span class=\"s1\">namety</span><span class=\"s4\">),</span>\n-        <span class=\"s4\">]</span>\n-        <span class=\"s1\">models</span><span class=\"s4\">.</span><span class=\"s1\">StructModel</span><span class=\"s4\">.</span><span class=\"s1\">__init__</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">, </span><span class=\"s1\">dmm</span><span class=\"s4\">, </span><span class=\"s1\">fe_type</span><span class=\"s4\">, </span><span class=\"s1\">members</span><span class=\"s4\">)</span>\n-\n-\n-<span class=\"s1\">make_attribute_wrapper</span><span class=\"s4\">(</span><span class=\"s1\">IndexType</span><span class=\"s4\">, </span><span class=\"s5\">&quot;data&quot;</span><span class=\"s4\">, </span><span class=\"s5\">&quot;_data&quot;</span><span class=\"s4\">)</span>\n-<span class=\"s1\">make_attribute_wrapper</span><span class=\"s4\">(</span><span class=\"s1\">IndexType</span><span class=\"s4\">, </span><span class=\"s5\">&quot;hashmap&quot;</span><span class=\"s4\">, </span><span class=\"s5\">&quot;hashmap&quot;</span><span class=\"s4\">)</span>\n-\n-<span class=\"s1\">make_attribute_wrapper</span><span class=\"s4\">(</span><span class=\"s1\">SeriesType</span><span class=\"s4\">, </span><span class=\"s5\">&quot;index&quot;</span><span class=\"s4\">, </span><span class=\"s5\">&quot;index&quot;</span><span class=\"s4\">)</span>\n-<span class=\"s1\">make_attribute_wrapper</span><span class=\"s4\">(</span><span class=\"s1\">SeriesType</span><span class=\"s4\">, </span><span class=\"s5\">&quot;values&quot;</span><span class=\"s4\">, </span><span class=\"s5\">&quot;values&quot;</span><span class=\"s4\">)</span>\n-<span class=\"s1\">make_attribute_wrapper</span><span class=\"s4\">(</span><span class=\"s1\">SeriesType</span><span class=\"s4\">, </span><span class=\"s5\">&quot;name&quot;</span><span class=\"s4\">, </span><span class=\"s5\">&quot;name&quot;</span><span class=\"s4\">)</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">lower_builtin</span><span class=\"s4\">(</span><span class=\"s1\">Series</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">Array</span><span class=\"s4\">, </span><span class=\"s1\">IndexType</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">pdseries_constructor</span><span class=\"s4\">(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">sig</span><span class=\"s4\">, </span><span class=\"s1\">args</span><span class=\"s4\">):</span>\n-    <span class=\"s1\">data</span><span class=\"s4\">, </span><span class=\"s1\">index </span><span class=\"s4\">= </span><span class=\"s1\">args</span>\n-    <span class=\"s1\">series </span><span class=\"s4\">= </span><span class=\"s1\">cgutils</span><span class=\"s4\">.</span><span class=\"s1\">create_struct_proxy</span><span class=\"s4\">(</span><span class=\"s1\">sig</span><span class=\"s4\">.</span><span class=\"s1\">return_type</span><span class=\"s4\">)(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">index </span><span class=\"s4\">= </span><span class=\"s1\">index</span>\n-    <span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">values </span><span class=\"s4\">= </span><span class=\"s1\">data</span>\n-    <span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">name </span><span class=\"s4\">= </span><span class=\"s1\">context</span><span class=\"s4\">.</span><span class=\"s1\">get_constant</span><span class=\"s4\">(</span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">intp</span><span class=\"s4\">, </span><span class=\"s6\">0</span><span class=\"s4\">)</span>\n-    <span class=\"s3\">return </span><span class=\"s1\">impl_ret_borrowed</span><span class=\"s4\">(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">sig</span><span class=\"s4\">.</span><span class=\"s1\">return_type</span><span class=\"s4\">, </span><span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">_getvalue</span><span class=\"s4\">())</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">lower_builtin</span><span class=\"s4\">(</span><span class=\"s1\">Series</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">Array</span><span class=\"s4\">, </span><span class=\"s1\">IndexType</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">intp</span><span class=\"s4\">)</span>\n-<span class=\"s4\">@</span><span class=\"s1\">lower_builtin</span><span class=\"s4\">(</span><span class=\"s1\">Series</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">Array</span><span class=\"s4\">, </span><span class=\"s1\">IndexType</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">float64</span><span class=\"s4\">)</span>\n-<span class=\"s4\">@</span><span class=\"s1\">lower_builtin</span><span class=\"s4\">(</span><span class=\"s1\">Series</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">Array</span><span class=\"s4\">, </span><span class=\"s1\">IndexType</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">unicode_type</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">pdseries_constructor_with_name</span><span class=\"s4\">(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">sig</span><span class=\"s4\">, </span><span class=\"s1\">args</span><span class=\"s4\">):</span>\n-    <span class=\"s1\">data</span><span class=\"s4\">, </span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">name </span><span class=\"s4\">= </span><span class=\"s1\">args</span>\n-    <span class=\"s1\">series </span><span class=\"s4\">= </span><span class=\"s1\">cgutils</span><span class=\"s4\">.</span><span class=\"s1\">create_struct_proxy</span><span class=\"s4\">(</span><span class=\"s1\">sig</span><span class=\"s4\">.</span><span class=\"s1\">return_type</span><span class=\"s4\">)(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">index </span><span class=\"s4\">= </span><span class=\"s1\">index</span>\n-    <span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">values </span><span class=\"s4\">= </span><span class=\"s1\">data</span>\n-    <span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">name </span><span class=\"s4\">= </span><span class=\"s1\">name</span>\n-    <span class=\"s3\">return </span><span class=\"s1\">impl_ret_borrowed</span><span class=\"s4\">(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">sig</span><span class=\"s4\">.</span><span class=\"s1\">return_type</span><span class=\"s4\">, </span><span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">_getvalue</span><span class=\"s4\">())</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">lower_builtin</span><span class=\"s4\">(</span><span class=\"s1\">Index</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">Array</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">DictType</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">pyobject</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">index_constructor_2arg</span><span class=\"s4\">(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">sig</span><span class=\"s4\">, </span><span class=\"s1\">args</span><span class=\"s4\">):</span>\n-    <span class=\"s4\">(</span><span class=\"s1\">data</span><span class=\"s4\">, </span><span class=\"s1\">hashmap</span><span class=\"s4\">, </span><span class=\"s1\">parent</span><span class=\"s4\">) = </span><span class=\"s1\">args</span>\n-    <span class=\"s1\">index </span><span class=\"s4\">= </span><span class=\"s1\">cgutils</span><span class=\"s4\">.</span><span class=\"s1\">create_struct_proxy</span><span class=\"s4\">(</span><span class=\"s1\">sig</span><span class=\"s4\">.</span><span class=\"s1\">return_type</span><span class=\"s4\">)(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">data </span><span class=\"s4\">= </span><span class=\"s1\">data</span>\n-    <span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">hashmap </span><span class=\"s4\">= </span><span class=\"s1\">hashmap</span>\n-    <span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">parent </span><span class=\"s4\">= </span><span class=\"s1\">parent</span>\n-    <span class=\"s3\">return </span><span class=\"s1\">impl_ret_borrowed</span><span class=\"s4\">(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">sig</span><span class=\"s4\">.</span><span class=\"s1\">return_type</span><span class=\"s4\">, </span><span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">_getvalue</span><span class=\"s4\">())</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">lower_builtin</span><span class=\"s4\">(</span><span class=\"s1\">Index</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">Array</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">DictType</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">index_constructor_2arg_parent</span><span class=\"s4\">(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">sig</span><span class=\"s4\">, </span><span class=\"s1\">args</span><span class=\"s4\">):</span>\n-    <span class=\"s0\"># Basically same as index_constructor_1arg, but also lets you specify the</span>\n-    <span class=\"s0\"># parent object</span>\n-    <span class=\"s4\">(</span><span class=\"s1\">data</span><span class=\"s4\">, </span><span class=\"s1\">hashmap</span><span class=\"s4\">) = </span><span class=\"s1\">args</span>\n-    <span class=\"s1\">index </span><span class=\"s4\">= </span><span class=\"s1\">cgutils</span><span class=\"s4\">.</span><span class=\"s1\">create_struct_proxy</span><span class=\"s4\">(</span><span class=\"s1\">sig</span><span class=\"s4\">.</span><span class=\"s1\">return_type</span><span class=\"s4\">)(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">data </span><span class=\"s4\">= </span><span class=\"s1\">data</span>\n-    <span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">hashmap </span><span class=\"s4\">= </span><span class=\"s1\">hashmap</span>\n-    <span class=\"s3\">return </span><span class=\"s1\">impl_ret_borrowed</span><span class=\"s4\">(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">sig</span><span class=\"s4\">.</span><span class=\"s1\">return_type</span><span class=\"s4\">, </span><span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">_getvalue</span><span class=\"s4\">())</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">lower_builtin</span><span class=\"s4\">(</span><span class=\"s1\">Index</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">Array</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">index_constructor_1arg</span><span class=\"s4\">(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">sig</span><span class=\"s4\">, </span><span class=\"s1\">args</span><span class=\"s4\">):</span>\n-    <span class=\"s3\">from </span><span class=\"s1\">numba</span><span class=\"s4\">.</span><span class=\"s1\">typed </span><span class=\"s3\">import </span><span class=\"s1\">Dict</span>\n-\n-    <span class=\"s1\">key_type </span><span class=\"s4\">= </span><span class=\"s1\">sig</span><span class=\"s4\">.</span><span class=\"s1\">return_type</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span>\n-    <span class=\"s1\">value_type </span><span class=\"s4\">= </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">intp</span>\n-\n-    <span class=\"s3\">def </span><span class=\"s1\">index_impl</span><span class=\"s4\">(</span><span class=\"s1\">data</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">return </span><span class=\"s1\">Index</span><span class=\"s4\">(</span><span class=\"s1\">data</span><span class=\"s4\">, </span><span class=\"s1\">Dict</span><span class=\"s4\">.</span><span class=\"s1\">empty</span><span class=\"s4\">(</span><span class=\"s1\">key_type</span><span class=\"s4\">, </span><span class=\"s1\">value_type</span><span class=\"s4\">))</span>\n-\n-    <span class=\"s3\">return </span><span class=\"s1\">context</span><span class=\"s4\">.</span><span class=\"s1\">compile_internal</span><span class=\"s4\">(</span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">index_impl</span><span class=\"s4\">, </span><span class=\"s1\">sig</span><span class=\"s4\">, </span><span class=\"s1\">args</span><span class=\"s4\">)</span>\n-\n-\n-<span class=\"s0\"># Helper to convert the unicodecharseq (numpy string scalar) into a unicode_type</span>\n-<span class=\"s0\"># (regular string)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">maybe_cast_str</span><span class=\"s4\">(</span><span class=\"s1\">x</span><span class=\"s4\">):</span>\n-    <span class=\"s0\"># Dummy function that numba can overload</span>\n-    <span class=\"s3\">pass</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">overload</span><span class=\"s4\">(</span><span class=\"s1\">maybe_cast_str</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">maybe_cast_str_impl</span><span class=\"s4\">(</span><span class=\"s1\">x</span><span class=\"s4\">):</span>\n-    <span class=\"s2\">&quot;&quot;&quot;Converts numba UnicodeCharSeq (numpy string scalar) -&gt; unicode type (string). \n-    Is a no-op for other types.&quot;&quot;&quot;</span>\n-    <span class=\"s3\">if </span><span class=\"s1\">isinstance</span><span class=\"s4\">(</span><span class=\"s1\">x</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">UnicodeCharSeq</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">return lambda </span><span class=\"s1\">x</span><span class=\"s4\">: </span><span class=\"s1\">str</span><span class=\"s4\">(</span><span class=\"s1\">x</span><span class=\"s4\">)</span>\n-    <span class=\"s3\">else</span><span class=\"s4\">:</span>\n-        <span class=\"s3\">return lambda </span><span class=\"s1\">x</span><span class=\"s4\">: </span><span class=\"s1\">x</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">unbox</span><span class=\"s4\">(</span><span class=\"s1\">IndexType</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">unbox_index</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">, </span><span class=\"s1\">obj</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">):</span>\n-    <span class=\"s2\">&quot;&quot;&quot; \n-    Convert a Index object to a native structure. \n- \n-    Note: Object dtype is not allowed here \n-    &quot;&quot;&quot;</span>\n-    <span class=\"s1\">data_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">object_getattr_string</span><span class=\"s4\">(</span><span class=\"s1\">obj</span><span class=\"s4\">, </span><span class=\"s5\">&quot;_numba_data&quot;</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">index </span><span class=\"s4\">= </span><span class=\"s1\">cgutils</span><span class=\"s4\">.</span><span class=\"s1\">create_struct_proxy</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">)(</span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">builder</span><span class=\"s4\">)</span>\n-    <span class=\"s0\"># If we see an object array, assume its been validated as only containing strings</span>\n-    <span class=\"s0\"># We still need to do the conversion though</span>\n-    <span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">data </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">unbox</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">.</span><span class=\"s1\">as_array</span><span class=\"s4\">, </span><span class=\"s1\">data_obj</span><span class=\"s4\">).</span><span class=\"s1\">value</span>\n-    <span class=\"s1\">typed_dict_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">unserialize</span><span class=\"s4\">(</span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">serialize_object</span><span class=\"s4\">(</span><span class=\"s1\">numba</span><span class=\"s4\">.</span><span class=\"s1\">typed</span><span class=\"s4\">.</span><span class=\"s1\">Dict</span><span class=\"s4\">))</span>\n-    <span class=\"s0\"># Create an empty typed dict in numba for the hashmap for indexing</span>\n-    <span class=\"s0\"># equiv of numba.typed.Dict.empty(typ.dtype, types.intp)</span>\n-    <span class=\"s1\">arr_type_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">unserialize</span><span class=\"s4\">(</span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">serialize_object</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span><span class=\"s4\">))</span>\n-    <span class=\"s1\">intp_type_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">unserialize</span><span class=\"s4\">(</span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">serialize_object</span><span class=\"s4\">(</span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">intp</span><span class=\"s4\">))</span>\n-    <span class=\"s1\">hashmap_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">call_method</span><span class=\"s4\">(</span>\n-        <span class=\"s1\">typed_dict_obj</span><span class=\"s4\">, </span><span class=\"s5\">&quot;empty&quot;</span><span class=\"s4\">, (</span><span class=\"s1\">arr_type_obj</span><span class=\"s4\">, </span><span class=\"s1\">intp_type_obj</span><span class=\"s4\">)</span>\n-    <span class=\"s4\">)</span>\n-    <span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">hashmap </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">unbox</span><span class=\"s4\">(</span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">DictType</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">intp</span><span class=\"s4\">), </span><span class=\"s1\">hashmap_obj</span><span class=\"s4\">).</span><span class=\"s1\">value</span>\n-    <span class=\"s0\"># Set the parent for speedy boxing.</span>\n-    <span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">parent </span><span class=\"s4\">= </span><span class=\"s1\">obj</span>\n-\n-    <span class=\"s0\"># Decrefs</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">data_obj</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">arr_type_obj</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">intp_type_obj</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">typed_dict_obj</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s3\">return </span><span class=\"s1\">NativeValue</span><span class=\"s4\">(</span><span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">_getvalue</span><span class=\"s4\">())</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">unbox</span><span class=\"s4\">(</span><span class=\"s1\">SeriesType</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">unbox_series</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">, </span><span class=\"s1\">obj</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">):</span>\n-    <span class=\"s2\">&quot;&quot;&quot; \n-    Convert a Series object to a native structure. \n-    &quot;&quot;&quot;</span>\n-    <span class=\"s1\">index_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">object_getattr_string</span><span class=\"s4\">(</span><span class=\"s1\">obj</span><span class=\"s4\">, </span><span class=\"s5\">&quot;index&quot;</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">values_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">object_getattr_string</span><span class=\"s4\">(</span><span class=\"s1\">obj</span><span class=\"s4\">, </span><span class=\"s5\">&quot;values&quot;</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">name_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">object_getattr_string</span><span class=\"s4\">(</span><span class=\"s1\">obj</span><span class=\"s4\">, </span><span class=\"s5\">&quot;name&quot;</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s1\">series </span><span class=\"s4\">= </span><span class=\"s1\">cgutils</span><span class=\"s4\">.</span><span class=\"s1\">create_struct_proxy</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">)(</span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">builder</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">index </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">unbox</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">.</span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">index_obj</span><span class=\"s4\">).</span><span class=\"s1\">value</span>\n-    <span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">values </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">unbox</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">.</span><span class=\"s1\">values</span><span class=\"s4\">, </span><span class=\"s1\">values_obj</span><span class=\"s4\">).</span><span class=\"s1\">value</span>\n-    <span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">name </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">unbox</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">.</span><span class=\"s1\">namety</span><span class=\"s4\">, </span><span class=\"s1\">name_obj</span><span class=\"s4\">).</span><span class=\"s1\">value</span>\n-\n-    <span class=\"s0\"># Decrefs</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">index_obj</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">values_obj</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">name_obj</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s3\">return </span><span class=\"s1\">NativeValue</span><span class=\"s4\">(</span><span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">_getvalue</span><span class=\"s4\">())</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">box</span><span class=\"s4\">(</span><span class=\"s1\">IndexType</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">box_index</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">, </span><span class=\"s1\">val</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">):</span>\n-    <span class=\"s2\">&quot;&quot;&quot; \n-    Convert a native index structure to a Index object. \n- \n-    If our native index is of a numpy string dtype, we'll cast it to \n-    object. \n-    &quot;&quot;&quot;</span>\n-    <span class=\"s0\"># First build a Numpy array object, then wrap it in a Index</span>\n-    <span class=\"s1\">index </span><span class=\"s4\">= </span><span class=\"s1\">cgutils</span><span class=\"s4\">.</span><span class=\"s1\">create_struct_proxy</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">)(</span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">value</span><span class=\"s4\">=</span><span class=\"s1\">val</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s1\">res </span><span class=\"s4\">= </span><span class=\"s1\">cgutils</span><span class=\"s4\">.</span><span class=\"s1\">alloca_once_value</span><span class=\"s4\">(</span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">parent</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s0\"># Does parent exist?</span>\n-    <span class=\"s0\"># (it means already boxed once, or Index same as original df.index or df.columns)</span>\n-    <span class=\"s0\"># xref https://github.com/numba/numba/blob/\u001b[93m596e8a55334cc46854e3192766e643767bd7c934\u001b[0m/numba/core/boxing.py#L593C17-L593C17</span>\n-    <span class=\"s3\">with </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">builder</span><span class=\"s4\">.</span><span class=\"s1\">if_else</span><span class=\"s4\">(</span><span class=\"s1\">cgutils</span><span class=\"s4\">.</span><span class=\"s1\">is_not_null</span><span class=\"s4\">(</span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">parent</span><span class=\"s4\">)) </span><span class=\"s3\">as </span><span class=\"s4\">(</span>\n-        <span class=\"s1\">has_parent</span><span class=\"s4\">,</span>\n-        <span class=\"s1\">otherwise</span><span class=\"s4\">,</span>\n-    <span class=\"s4\">):</span>\n-        <span class=\"s3\">with </span><span class=\"s1\">has_parent</span><span class=\"s4\">:</span>\n-            <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">incref</span><span class=\"s4\">(</span><span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">parent</span><span class=\"s4\">)</span>\n-        <span class=\"s3\">with </span><span class=\"s1\">otherwise</span><span class=\"s4\">:</span>\n-            <span class=\"s0\"># TODO: preserve the original class for the index</span>\n-            <span class=\"s0\"># Also need preserve the name of the Index</span>\n-            <span class=\"s0\"># class_obj = c.pyapi.unserialize(c.pyapi.serialize_object(typ.pyclass))</span>\n-            <span class=\"s1\">class_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">unserialize</span><span class=\"s4\">(</span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">serialize_object</span><span class=\"s4\">(</span><span class=\"s1\">Index</span><span class=\"s4\">))</span>\n-            <span class=\"s1\">array_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">box</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">.</span><span class=\"s1\">as_array</span><span class=\"s4\">, </span><span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">data</span><span class=\"s4\">)</span>\n-            <span class=\"s3\">if </span><span class=\"s1\">isinstance</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">.</span><span class=\"s1\">dtype</span><span class=\"s4\">, </span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">UnicodeCharSeq</span><span class=\"s4\">):</span>\n-                <span class=\"s0\"># We converted to numpy string dtype, convert back</span>\n-                <span class=\"s0\"># to object since _simple_new won't do that for uss</span>\n-                <span class=\"s1\">object_str_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">unserialize</span><span class=\"s4\">(</span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">serialize_object</span><span class=\"s4\">(</span><span class=\"s5\">&quot;object&quot;</span><span class=\"s4\">))</span>\n-                <span class=\"s1\">array_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">call_method</span><span class=\"s4\">(</span><span class=\"s1\">array_obj</span><span class=\"s4\">, </span><span class=\"s5\">&quot;astype&quot;</span><span class=\"s4\">, (</span><span class=\"s1\">object_str_obj</span><span class=\"s4\">,))</span>\n-                <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">object_str_obj</span><span class=\"s4\">)</span>\n-            <span class=\"s0\"># this is basically Index._simple_new(array_obj, name_obj) in python</span>\n-            <span class=\"s1\">index_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">call_method</span><span class=\"s4\">(</span><span class=\"s1\">class_obj</span><span class=\"s4\">, </span><span class=\"s5\">&quot;_simple_new&quot;</span><span class=\"s4\">, (</span><span class=\"s1\">array_obj</span><span class=\"s4\">,))</span>\n-            <span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">parent </span><span class=\"s4\">= </span><span class=\"s1\">index_obj</span>\n-            <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">builder</span><span class=\"s4\">.</span><span class=\"s1\">store</span><span class=\"s4\">(</span><span class=\"s1\">index_obj</span><span class=\"s4\">, </span><span class=\"s1\">res</span><span class=\"s4\">)</span>\n-\n-            <span class=\"s0\"># Decrefs</span>\n-            <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">class_obj</span><span class=\"s4\">)</span>\n-            <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">array_obj</span><span class=\"s4\">)</span>\n-    <span class=\"s3\">return </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">builder</span><span class=\"s4\">.</span><span class=\"s1\">load</span><span class=\"s4\">(</span><span class=\"s1\">res</span><span class=\"s4\">)</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">box</span><span class=\"s4\">(</span><span class=\"s1\">SeriesType</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">box_series</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">, </span><span class=\"s1\">val</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">):</span>\n-    <span class=\"s2\">&quot;&quot;&quot; \n-    Convert a native series structure to a Series object. \n-    &quot;&quot;&quot;</span>\n-    <span class=\"s1\">series </span><span class=\"s4\">= </span><span class=\"s1\">cgutils</span><span class=\"s4\">.</span><span class=\"s1\">create_struct_proxy</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">)(</span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">value</span><span class=\"s4\">=</span><span class=\"s1\">val</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">series_const_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">unserialize</span><span class=\"s4\">(</span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">serialize_object</span><span class=\"s4\">(</span><span class=\"s1\">Series</span><span class=\"s4\">.</span><span class=\"s1\">_from_mgr</span><span class=\"s4\">))</span>\n-    <span class=\"s1\">mgr_const_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">unserialize</span><span class=\"s4\">(</span>\n-        <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">serialize_object</span><span class=\"s4\">(</span><span class=\"s1\">SingleBlockManager</span><span class=\"s4\">.</span><span class=\"s1\">from_array</span><span class=\"s4\">)</span>\n-    <span class=\"s4\">)</span>\n-    <span class=\"s1\">index_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">box</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">.</span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">index</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">array_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">box</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">.</span><span class=\"s1\">as_array</span><span class=\"s4\">, </span><span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">values</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">name_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">box</span><span class=\"s4\">(</span><span class=\"s1\">typ</span><span class=\"s4\">.</span><span class=\"s1\">namety</span><span class=\"s4\">, </span><span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">name</span><span class=\"s4\">)</span>\n-    <span class=\"s0\"># This is basically equivalent of</span>\n-    <span class=\"s0\"># pd.Series(data=array_obj, index=index_obj)</span>\n-    <span class=\"s0\"># To improve perf, we will construct the Series from a manager</span>\n-    <span class=\"s0\"># object to avoid checks.</span>\n-    <span class=\"s0\"># We'll also set the name attribute manually to avoid validation</span>\n-    <span class=\"s1\">mgr_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">call_function_objargs</span><span class=\"s4\">(</span>\n-        <span class=\"s1\">mgr_const_obj</span><span class=\"s4\">,</span>\n-        <span class=\"s4\">(</span>\n-            <span class=\"s1\">array_obj</span><span class=\"s4\">,</span>\n-            <span class=\"s1\">index_obj</span><span class=\"s4\">,</span>\n-        <span class=\"s4\">),</span>\n-    <span class=\"s4\">)</span>\n-    <span class=\"s1\">mgr_axes_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">object_getattr_string</span><span class=\"s4\">(</span><span class=\"s1\">mgr_obj</span><span class=\"s4\">, </span><span class=\"s5\">&quot;axes&quot;</span><span class=\"s4\">)</span>\n-    <span class=\"s0\"># Series._constructor_from_mgr(mgr, axes)</span>\n-    <span class=\"s1\">series_obj </span><span class=\"s4\">= </span><span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">call_function_objargs</span><span class=\"s4\">(</span>\n-        <span class=\"s1\">series_const_obj</span><span class=\"s4\">, (</span><span class=\"s1\">mgr_obj</span><span class=\"s4\">, </span><span class=\"s1\">mgr_axes_obj</span><span class=\"s4\">)</span>\n-    <span class=\"s4\">)</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">object_setattr_string</span><span class=\"s4\">(</span><span class=\"s1\">series_obj</span><span class=\"s4\">, </span><span class=\"s5\">&quot;_name&quot;</span><span class=\"s4\">, </span><span class=\"s1\">name_obj</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s0\"># Decrefs</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">series_const_obj</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">mgr_axes_obj</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">mgr_obj</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">mgr_const_obj</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">index_obj</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">array_obj</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">c</span><span class=\"s4\">.</span><span class=\"s1\">pyapi</span><span class=\"s4\">.</span><span class=\"s1\">decref</span><span class=\"s4\">(</span><span class=\"s1\">name_obj</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s3\">return </span><span class=\"s1\">series_obj</span>\n-\n-\n-<span class=\"s0\"># Add common series reductions (e.g. mean, sum),</span>\n-<span class=\"s0\"># and also add common binops (e.g. add, sub, mul, div)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">generate_series_reduction</span><span class=\"s4\">(</span><span class=\"s1\">ser_reduction</span><span class=\"s4\">, </span><span class=\"s1\">ser_method</span><span class=\"s4\">):</span>\n-    <span class=\"s4\">@</span><span class=\"s1\">overload_method</span><span class=\"s4\">(</span><span class=\"s1\">SeriesType</span><span class=\"s4\">, </span><span class=\"s1\">ser_reduction</span><span class=\"s4\">)</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">series_reduction</span><span class=\"s4\">(</span><span class=\"s1\">series</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">def </span><span class=\"s1\">series_reduction_impl</span><span class=\"s4\">(</span><span class=\"s1\">series</span><span class=\"s4\">):</span>\n-            <span class=\"s3\">return </span><span class=\"s1\">ser_method</span><span class=\"s4\">(</span><span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">values</span><span class=\"s4\">)</span>\n-\n-        <span class=\"s3\">return </span><span class=\"s1\">series_reduction_impl</span>\n-\n-    <span class=\"s3\">return </span><span class=\"s1\">series_reduction</span>\n-\n-\n-<span class=\"s3\">def </span><span class=\"s1\">generate_series_binop</span><span class=\"s4\">(</span><span class=\"s1\">binop</span><span class=\"s4\">):</span>\n-    <span class=\"s4\">@</span><span class=\"s1\">overload</span><span class=\"s4\">(</span><span class=\"s1\">binop</span><span class=\"s4\">)</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">series_binop</span><span class=\"s4\">(</span><span class=\"s1\">series1</span><span class=\"s4\">, </span><span class=\"s1\">value</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">if </span><span class=\"s1\">isinstance</span><span class=\"s4\">(</span><span class=\"s1\">series1</span><span class=\"s4\">, </span><span class=\"s1\">SeriesType</span><span class=\"s4\">):</span>\n-            <span class=\"s3\">if </span><span class=\"s1\">isinstance</span><span class=\"s4\">(</span><span class=\"s1\">value</span><span class=\"s4\">, </span><span class=\"s1\">SeriesType</span><span class=\"s4\">):</span>\n-\n-                <span class=\"s3\">def </span><span class=\"s1\">series_binop_impl</span><span class=\"s4\">(</span><span class=\"s1\">series1</span><span class=\"s4\">, </span><span class=\"s1\">series2</span><span class=\"s4\">):</span>\n-                    <span class=\"s0\"># TODO: Check index matching?</span>\n-                    <span class=\"s3\">return </span><span class=\"s1\">Series</span><span class=\"s4\">(</span>\n-                        <span class=\"s1\">binop</span><span class=\"s4\">(</span><span class=\"s1\">series1</span><span class=\"s4\">.</span><span class=\"s1\">values</span><span class=\"s4\">, </span><span class=\"s1\">series2</span><span class=\"s4\">.</span><span class=\"s1\">values</span><span class=\"s4\">),</span>\n-                        <span class=\"s1\">series1</span><span class=\"s4\">.</span><span class=\"s1\">index</span><span class=\"s4\">,</span>\n-                        <span class=\"s1\">series1</span><span class=\"s4\">.</span><span class=\"s1\">name</span><span class=\"s4\">,</span>\n-                    <span class=\"s4\">)</span>\n-\n-                <span class=\"s3\">return </span><span class=\"s1\">series_binop_impl</span>\n-            <span class=\"s3\">else</span><span class=\"s4\">:</span>\n-\n-                <span class=\"s3\">def </span><span class=\"s1\">series_binop_impl</span><span class=\"s4\">(</span><span class=\"s1\">series1</span><span class=\"s4\">, </span><span class=\"s1\">value</span><span class=\"s4\">):</span>\n-                    <span class=\"s3\">return </span><span class=\"s1\">Series</span><span class=\"s4\">(</span>\n-                        <span class=\"s1\">binop</span><span class=\"s4\">(</span><span class=\"s1\">series1</span><span class=\"s4\">.</span><span class=\"s1\">values</span><span class=\"s4\">, </span><span class=\"s1\">value</span><span class=\"s4\">), </span><span class=\"s1\">series1</span><span class=\"s4\">.</span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">series1</span><span class=\"s4\">.</span><span class=\"s1\">name</span>\n-                    <span class=\"s4\">)</span>\n-\n-                <span class=\"s3\">return </span><span class=\"s1\">series_binop_impl</span>\n-\n-    <span class=\"s3\">return </span><span class=\"s1\">series_binop</span>\n-\n-\n-<span class=\"s1\">series_reductions </span><span class=\"s4\">= [</span>\n-    <span class=\"s4\">(</span><span class=\"s5\">&quot;sum&quot;</span><span class=\"s4\">, </span><span class=\"s1\">np</span><span class=\"s4\">.</span><span class=\"s1\">sum</span><span class=\"s4\">),</span>\n-    <span class=\"s4\">(</span><span class=\"s5\">&quot;mean&quot;</span><span class=\"s4\">, </span><span class=\"s1\">np</span><span class=\"s4\">.</span><span class=\"s1\">mean</span><span class=\"s4\">),</span>\n-    <span class=\"s0\"># Disabled due to discrepancies between numba std. dev</span>\n-    <span class=\"s0\"># and pandas std. dev (no way to specify dof)</span>\n-    <span class=\"s0\"># (&quot;std&quot;, np.std),</span>\n-    <span class=\"s0\"># (&quot;var&quot;, np.var),</span>\n-    <span class=\"s4\">(</span><span class=\"s5\">&quot;min&quot;</span><span class=\"s4\">, </span><span class=\"s1\">np</span><span class=\"s4\">.</span><span class=\"s1\">min</span><span class=\"s4\">),</span>\n-    <span class=\"s4\">(</span><span class=\"s5\">&quot;max&quot;</span><span class=\"s4\">, </span><span class=\"s1\">np</span><span class=\"s4\">.</span><span class=\"s1\">max</span><span class=\"s4\">),</span>\n-<span class=\"s4\">]</span>\n-<span class=\"s3\">for </span><span class=\"s1\">reduction</span><span class=\"s4\">, </span><span class=\"s1\">reduction_method </span><span class=\"s3\">in </span><span class=\"s1\">series_reductions</span><span class=\"s4\">:</span>\n-    <span class=\"s1\">generate_series_reduction</span><span class=\"s4\">(</span><span class=\"s1\">reduction</span><span class=\"s4\">, </span><span class=\"s1\">reduction_method</span><span class=\"s4\">)</span>\n-\n-<span class=\"s1\">series_binops </span><span class=\"s4\">= [</span><span class=\"s1\">operator</span><span class=\"s4\">.</span><span class=\"s1\">add</span><span class=\"s4\">, </span><span class=\"s1\">operator</span><span class=\"s4\">.</span><span class=\"s1\">sub</span><span class=\"s4\">, </span><span class=\"s1\">operator</span><span class=\"s4\">.</span><span class=\"s1\">mul</span><span class=\"s4\">, </span><span class=\"s1\">operator</span><span class=\"s4\">.</span><span class=\"s1\">truediv</span><span class=\"s4\">]</span>\n-\n-<span class=\"s3\">for </span><span class=\"s1\">ser_binop </span><span class=\"s3\">in </span><span class=\"s1\">series_binops</span><span class=\"s4\">:</span>\n-    <span class=\"s1\">generate_series_binop</span><span class=\"s4\">(</span><span class=\"s1\">ser_binop</span><span class=\"s4\">)</span>\n-\n-\n-<span class=\"s0\"># get_loc on Index</span>\n-<span class=\"s4\">@</span><span class=\"s1\">overload_method</span><span class=\"s4\">(</span><span class=\"s1\">IndexType</span><span class=\"s4\">, </span><span class=\"s5\">&quot;get_loc&quot;</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">index_get_loc</span><span class=\"s4\">(</span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">item</span><span class=\"s4\">):</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">index_get_loc_impl</span><span class=\"s4\">(</span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">item</span><span class=\"s4\">):</span>\n-        <span class=\"s0\"># Initialize the hash table if not initialized</span>\n-        <span class=\"s3\">if </span><span class=\"s1\">len</span><span class=\"s4\">(</span><span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">hashmap</span><span class=\"s4\">) == </span><span class=\"s6\">0</span><span class=\"s4\">:</span>\n-            <span class=\"s3\">for </span><span class=\"s1\">i</span><span class=\"s4\">, </span><span class=\"s1\">val </span><span class=\"s3\">in </span><span class=\"s1\">enumerate</span><span class=\"s4\">(</span><span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">_data</span><span class=\"s4\">):</span>\n-                <span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">hashmap</span><span class=\"s4\">[</span><span class=\"s1\">val</span><span class=\"s4\">] = </span><span class=\"s1\">i</span>\n-        <span class=\"s3\">return </span><span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">hashmap</span><span class=\"s4\">[</span><span class=\"s1\">item</span><span class=\"s4\">]</span>\n-\n-    <span class=\"s3\">return </span><span class=\"s1\">index_get_loc_impl</span>\n-\n-\n-<span class=\"s0\"># Indexing for Series/Index</span>\n-<span class=\"s4\">@</span><span class=\"s1\">overload</span><span class=\"s4\">(</span><span class=\"s1\">operator</span><span class=\"s4\">.</span><span class=\"s1\">getitem</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">series_indexing</span><span class=\"s4\">(</span><span class=\"s1\">series</span><span class=\"s4\">, </span><span class=\"s1\">item</span><span class=\"s4\">):</span>\n-    <span class=\"s3\">if </span><span class=\"s1\">isinstance</span><span class=\"s4\">(</span><span class=\"s1\">series</span><span class=\"s4\">, </span><span class=\"s1\">SeriesType</span><span class=\"s4\">):</span>\n-\n-        <span class=\"s3\">def </span><span class=\"s1\">series_getitem</span><span class=\"s4\">(</span><span class=\"s1\">series</span><span class=\"s4\">, </span><span class=\"s1\">item</span><span class=\"s4\">):</span>\n-            <span class=\"s1\">loc </span><span class=\"s4\">= </span><span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">get_loc</span><span class=\"s4\">(</span><span class=\"s1\">item</span><span class=\"s4\">)</span>\n-            <span class=\"s3\">return </span><span class=\"s1\">series</span><span class=\"s4\">.</span><span class=\"s1\">iloc</span><span class=\"s4\">[</span><span class=\"s1\">loc</span><span class=\"s4\">]</span>\n-\n-        <span class=\"s3\">return </span><span class=\"s1\">series_getitem</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">overload</span><span class=\"s4\">(</span><span class=\"s1\">operator</span><span class=\"s4\">.</span><span class=\"s1\">getitem</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">index_indexing</span><span class=\"s4\">(</span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">idx</span><span class=\"s4\">):</span>\n-    <span class=\"s3\">if </span><span class=\"s1\">isinstance</span><span class=\"s4\">(</span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">IndexType</span><span class=\"s4\">):</span>\n-\n-        <span class=\"s3\">def </span><span class=\"s1\">index_getitem</span><span class=\"s4\">(</span><span class=\"s1\">index</span><span class=\"s4\">, </span><span class=\"s1\">idx</span><span class=\"s4\">):</span>\n-            <span class=\"s3\">return </span><span class=\"s1\">index</span><span class=\"s4\">.</span><span class=\"s1\">_data</span><span class=\"s4\">[</span><span class=\"s1\">idx</span><span class=\"s4\">]</span>\n-\n-        <span class=\"s3\">return </span><span class=\"s1\">index_getitem</span>\n-\n-\n-<span class=\"s3\">class </span><span class=\"s1\">IlocType</span><span class=\"s4\">(</span><span class=\"s1\">types</span><span class=\"s4\">.</span><span class=\"s1\">Type</span><span class=\"s4\">):</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">__init__</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">, </span><span class=\"s1\">obj_type</span><span class=\"s4\">) </span><span class=\"s1\">-&gt; </span><span class=\"s3\">None</span><span class=\"s4\">:</span>\n-        <span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">obj_type </span><span class=\"s4\">= </span><span class=\"s1\">obj_type</span>\n-        <span class=\"s1\">name </span><span class=\"s4\">= </span><span class=\"s5\">f&quot;iLocIndexer(</span><span class=\"s3\">{</span><span class=\"s1\">obj_type</span><span class=\"s3\">}</span><span class=\"s5\">)&quot;</span>\n-        <span class=\"s1\">super</span><span class=\"s4\">().</span><span class=\"s1\">__init__</span><span class=\"s4\">(</span><span class=\"s1\">name</span><span class=\"s4\">=</span><span class=\"s1\">name</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s4\">@</span><span class=\"s1\">property</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">key</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">return </span><span class=\"s1\">self</span><span class=\"s4\">.</span><span class=\"s1\">obj_type</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">typeof_impl</span><span class=\"s4\">.</span><span class=\"s1\">register</span><span class=\"s4\">(</span><span class=\"s1\">_iLocIndexer</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">typeof_iloc</span><span class=\"s4\">(</span><span class=\"s1\">val</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">):</span>\n-    <span class=\"s1\">objtype </span><span class=\"s4\">= </span><span class=\"s1\">typeof_impl</span><span class=\"s4\">(</span><span class=\"s1\">val</span><span class=\"s4\">.</span><span class=\"s1\">obj</span><span class=\"s4\">, </span><span class=\"s1\">c</span><span class=\"s4\">)</span>\n-    <span class=\"s3\">return </span><span class=\"s1\">IlocType</span><span class=\"s4\">(</span><span class=\"s1\">objtype</span><span class=\"s4\">)</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">type_callable</span><span class=\"s4\">(</span><span class=\"s1\">_iLocIndexer</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">type_iloc_constructor</span><span class=\"s4\">(</span><span class=\"s1\">context</span><span class=\"s4\">):</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">typer</span><span class=\"s4\">(</span><span class=\"s1\">obj</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">if </span><span class=\"s1\">isinstance</span><span class=\"s4\">(</span><span class=\"s1\">obj</span><span class=\"s4\">, </span><span class=\"s1\">SeriesType</span><span class=\"s4\">):</span>\n-            <span class=\"s3\">return </span><span class=\"s1\">IlocType</span><span class=\"s4\">(</span><span class=\"s1\">obj</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s3\">return </span><span class=\"s1\">typer</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">lower_builtin</span><span class=\"s4\">(</span><span class=\"s1\">_iLocIndexer</span><span class=\"s4\">, </span><span class=\"s1\">SeriesType</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">iloc_constructor</span><span class=\"s4\">(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">sig</span><span class=\"s4\">, </span><span class=\"s1\">args</span><span class=\"s4\">):</span>\n-    <span class=\"s4\">(</span><span class=\"s1\">obj</span><span class=\"s4\">,) = </span><span class=\"s1\">args</span>\n-    <span class=\"s1\">iloc_indexer </span><span class=\"s4\">= </span><span class=\"s1\">cgutils</span><span class=\"s4\">.</span><span class=\"s1\">create_struct_proxy</span><span class=\"s4\">(</span><span class=\"s1\">sig</span><span class=\"s4\">.</span><span class=\"s1\">return_type</span><span class=\"s4\">)(</span><span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">)</span>\n-    <span class=\"s1\">iloc_indexer</span><span class=\"s4\">.</span><span class=\"s1\">obj </span><span class=\"s4\">= </span><span class=\"s1\">obj</span>\n-    <span class=\"s3\">return </span><span class=\"s1\">impl_ret_borrowed</span><span class=\"s4\">(</span>\n-        <span class=\"s1\">context</span><span class=\"s4\">, </span><span class=\"s1\">builder</span><span class=\"s4\">, </span><span class=\"s1\">sig</span><span class=\"s4\">.</span><span class=\"s1\">return_type</span><span class=\"s4\">, </span><span class=\"s1\">iloc_indexer</span><span class=\"s4\">.</span><span class=\"s1\">_getvalue</span><span class=\"s4\">()</span>\n-    <span class=\"s4\">)</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">register_model</span><span class=\"s4\">(</span><span class=\"s1\">IlocType</span><span class=\"s4\">)</span>\n-<span class=\"s3\">class </span><span class=\"s1\">ILocModel</span><span class=\"s4\">(</span><span class=\"s1\">models</span><span class=\"s4\">.</span><span class=\"s1\">StructModel</span><span class=\"s4\">):</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">__init__</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">, </span><span class=\"s1\">dmm</span><span class=\"s4\">, </span><span class=\"s1\">fe_type</span><span class=\"s4\">) </span><span class=\"s1\">-&gt; </span><span class=\"s3\">None</span><span class=\"s4\">:</span>\n-        <span class=\"s1\">members </span><span class=\"s4\">= [(</span><span class=\"s5\">&quot;obj&quot;</span><span class=\"s4\">, </span><span class=\"s1\">fe_type</span><span class=\"s4\">.</span><span class=\"s1\">obj_type</span><span class=\"s4\">)]</span>\n-        <span class=\"s1\">models</span><span class=\"s4\">.</span><span class=\"s1\">StructModel</span><span class=\"s4\">.</span><span class=\"s1\">__init__</span><span class=\"s4\">(</span><span class=\"s1\">self</span><span class=\"s4\">, </span><span class=\"s1\">dmm</span><span class=\"s4\">, </span><span class=\"s1\">fe_type</span><span class=\"s4\">, </span><span class=\"s1\">members</span><span class=\"s4\">)</span>\n-\n-\n-<span class=\"s1\">make_attribute_wrapper</span><span class=\"s4\">(</span><span class=\"s1\">IlocType</span><span class=\"s4\">, </span><span class=\"s5\">&quot;obj&quot;</span><span class=\"s4\">, </span><span class=\"s5\">&quot;obj&quot;</span><span class=\"s4\">)</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">overload_attribute</span><span class=\"s4\">(</span><span class=\"s1\">SeriesType</span><span class=\"s4\">, </span><span class=\"s5\">&quot;iloc&quot;</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">series_iloc</span><span class=\"s4\">(</span><span class=\"s1\">series</span><span class=\"s4\">):</span>\n-    <span class=\"s3\">def </span><span class=\"s1\">get</span><span class=\"s4\">(</span><span class=\"s1\">series</span><span class=\"s4\">):</span>\n-        <span class=\"s3\">return </span><span class=\"s1\">_iLocIndexer</span><span class=\"s4\">(</span><span class=\"s1\">series</span><span class=\"s4\">)</span>\n-\n-    <span class=\"s3\">return </span><span class=\"s1\">get</span>\n-\n-\n-<span class=\"s4\">@</span><span class=\"s1\">overload</span><span class=\"s4\">(</span><span class=\"s1\">operator</span><span class=\"s4\">.</span><span class=\"s1\">getitem</span><span class=\"s4\">)</span>\n-<span class=\"s3\">def </span><span class=\"s1\">iloc_getitem</span><span class=\"s4\">(</span><span class=\"s1\">iloc_indexer</span><span class=\"s4\">, </span><span class=\"s1\">i</span><span class=\"s4\">):</span>\n-    <span class=\"s3\">if </span><span class=\"s1\">isinstance</span><span class=\"s4\">(</span><span class=\"s1\">iloc_indexer</span><span class=\"s4\">, </span><span class=\"s1\">IlocType</span><span class=\"s4\">):</span>\n-\n-        <span class=\"s3\">def </span><span class=\"s1\">getitem_impl</span><span class=\"s4\">(</span><span class=\"s1\">iloc_indexer</span><span class=\"s4\">, </span><span class=\"s1\">i</span><span class=\"s4\">):</span>\n-            <span class=\"s3\">return </span><span class=\"s1\">iloc_indexer</span><span class=\"s4\">.</span><span class=\"s1\">obj</span><span class=\"s4\">.</span><span class=\"s1\">values</span><span class=\"s4\">[</span><span class=\"s1\">i</span><span class=\"s4\">]</span>\n-\n-        <span class=\"s3\">return </span><span class=\"s1\">getitem_impl</span>\n+<span class=\"s1\">db </span><span class=\"s2\">= </span><span class=\"s1\">SQLAlchemy</span><span class=\"s2\">()</span>\n+<span class=\"s1\">migrate </span><span class=\"s2\">= </span><span class=\"s1\">Migrate</span><span class=\"s2\">()</span>\n+<span class=\"s1\">mail </span><span class=\"s2\">= </span><span class=\"s1\">Mail</span><span class=\"s2\">()</span>\n </pre>\n </body>\n </html>\n\\ No newline at end of file\n", "reason": "High Entropy", "stringsFound": ["596e8a55334cc46854e3192766e643767bd7c934"]}
